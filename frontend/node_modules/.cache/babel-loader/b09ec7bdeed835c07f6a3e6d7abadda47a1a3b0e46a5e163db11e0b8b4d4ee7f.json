{"ast":null,"code":"function _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\n/**\n * The SelectionRange class is a simple CellRanges collection designed for easy manipulation of the multiple\n * consecutive and non-consecutive selections.\n *\n * @class SelectionRange\n * @util\n */\nclass SelectionRange {\n  constructor(createCellRange) {\n    /**\n     * List of all CellRanges added to the class instance.\n     *\n     * @type {CellRange[]}\n     */\n    _defineProperty(this, \"ranges\", []);\n    /**\n     * @type {function(CellCoords): CellRange}\n     */\n    _defineProperty(this, \"createCellRange\", void 0);\n    this.createCellRange = createCellRange;\n  }\n\n  /**\n   * Check if selected range is empty.\n   *\n   * @returns {boolean}\n   */\n  isEmpty() {\n    return this.size() === 0;\n  }\n\n  /**\n   * Set coordinates to the class instance. It clears all previously added coordinates and push `coords`\n   * to the collection.\n   *\n   * @param {CellCoords} coords The CellCoords instance with defined visual coordinates.\n   * @returns {SelectionRange}\n   */\n  set(coords) {\n    this.clear();\n    this.ranges.push(this.createCellRange(coords));\n    return this;\n  }\n\n  /**\n   * Add coordinates to the class instance. The new coordinates are added to the end of the range collection.\n   *\n   * @param {CellCoords} coords The CellCoords instance with defined visual coordinates.\n   * @returns {SelectionRange}\n   */\n  add(coords) {\n    this.ranges.push(this.createCellRange(coords));\n    return this;\n  }\n\n  /**\n   * Removes from the stack the last added coordinates.\n   *\n   * @returns {SelectionRange}\n   */\n  pop() {\n    this.ranges.pop();\n    return this;\n  }\n\n  /**\n   * Get last added coordinates from ranges, it returns a CellRange instance.\n   *\n   * @returns {CellRange|undefined}\n   */\n  current() {\n    return this.peekByIndex(this.size() - 1);\n  }\n\n  /**\n   * Get previously added coordinates from ranges, it returns a CellRange instance.\n   *\n   * @returns {CellRange|undefined}\n   */\n  previous() {\n    return this.peekByIndex(this.size() - 2);\n  }\n\n  /**\n   * Returns `true` if coords is within selection coords. This method iterates through all selection layers to check if\n   * the coords object is within selection range.\n   *\n   * @param {CellCoords} coords The CellCoords instance with defined visual coordinates.\n   * @returns {boolean}\n   */\n  includes(coords) {\n    return this.ranges.some(cellRange => cellRange.includes(coords));\n  }\n\n  /**\n   * Clear collection.\n   *\n   * @returns {SelectionRange}\n   */\n  clear() {\n    this.ranges.length = 0;\n    return this;\n  }\n\n  /**\n   * Get count of added all coordinates added to the selection.\n   *\n   * @returns {number}\n   */\n  size() {\n    return this.ranges.length;\n  }\n\n  /**\n   * Peek the coordinates based on the index where that coordinate resides in the collection.\n   *\n   * @param {number} [index=0] An index where the coordinate will be retrieved from. The index '0' gets the\n   * latest range.\n   * @returns {CellRange|undefined}\n   */\n  peekByIndex() {\n    let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let cellRange;\n    if (index >= 0 && index < this.size()) {\n      cellRange = this.ranges[index];\n    }\n    return cellRange;\n  }\n  [Symbol.iterator]() {\n    return this.ranges[Symbol.iterator]();\n  }\n}\nexport default SelectionRange;","map":{"version":3,"names":["_defineProperty","e","r","t","_toPropertyKey","Object","defineProperty","value","enumerable","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","SelectionRange","constructor","createCellRange","isEmpty","size","set","coords","clear","ranges","push","add","pop","current","peekByIndex","previous","includes","some","cellRange","length","index","arguments","undefined","iterator"],"sources":["D:/gym-project/frontend/node_modules/handsontable/selection/range.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * The SelectionRange class is a simple CellRanges collection designed for easy manipulation of the multiple\n * consecutive and non-consecutive selections.\n *\n * @class SelectionRange\n * @util\n */\nclass SelectionRange {\n  constructor(createCellRange) {\n    /**\n     * List of all CellRanges added to the class instance.\n     *\n     * @type {CellRange[]}\n     */\n    _defineProperty(this, \"ranges\", []);\n    /**\n     * @type {function(CellCoords): CellRange}\n     */\n    _defineProperty(this, \"createCellRange\", void 0);\n    this.createCellRange = createCellRange;\n  }\n\n  /**\n   * Check if selected range is empty.\n   *\n   * @returns {boolean}\n   */\n  isEmpty() {\n    return this.size() === 0;\n  }\n\n  /**\n   * Set coordinates to the class instance. It clears all previously added coordinates and push `coords`\n   * to the collection.\n   *\n   * @param {CellCoords} coords The CellCoords instance with defined visual coordinates.\n   * @returns {SelectionRange}\n   */\n  set(coords) {\n    this.clear();\n    this.ranges.push(this.createCellRange(coords));\n    return this;\n  }\n\n  /**\n   * Add coordinates to the class instance. The new coordinates are added to the end of the range collection.\n   *\n   * @param {CellCoords} coords The CellCoords instance with defined visual coordinates.\n   * @returns {SelectionRange}\n   */\n  add(coords) {\n    this.ranges.push(this.createCellRange(coords));\n    return this;\n  }\n\n  /**\n   * Removes from the stack the last added coordinates.\n   *\n   * @returns {SelectionRange}\n   */\n  pop() {\n    this.ranges.pop();\n    return this;\n  }\n\n  /**\n   * Get last added coordinates from ranges, it returns a CellRange instance.\n   *\n   * @returns {CellRange|undefined}\n   */\n  current() {\n    return this.peekByIndex(this.size() - 1);\n  }\n\n  /**\n   * Get previously added coordinates from ranges, it returns a CellRange instance.\n   *\n   * @returns {CellRange|undefined}\n   */\n  previous() {\n    return this.peekByIndex(this.size() - 2);\n  }\n\n  /**\n   * Returns `true` if coords is within selection coords. This method iterates through all selection layers to check if\n   * the coords object is within selection range.\n   *\n   * @param {CellCoords} coords The CellCoords instance with defined visual coordinates.\n   * @returns {boolean}\n   */\n  includes(coords) {\n    return this.ranges.some(cellRange => cellRange.includes(coords));\n  }\n\n  /**\n   * Clear collection.\n   *\n   * @returns {SelectionRange}\n   */\n  clear() {\n    this.ranges.length = 0;\n    return this;\n  }\n\n  /**\n   * Get count of added all coordinates added to the selection.\n   *\n   * @returns {number}\n   */\n  size() {\n    return this.ranges.length;\n  }\n\n  /**\n   * Peek the coordinates based on the index where that coordinate resides in the collection.\n   *\n   * @param {number} [index=0] An index where the coordinate will be retrieved from. The index '0' gets the\n   * latest range.\n   * @returns {CellRange|undefined}\n   */\n  peekByIndex() {\n    let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let cellRange;\n    if (index >= 0 && index < this.size()) {\n      cellRange = this.ranges[index];\n    }\n    return cellRange;\n  }\n  [Symbol.iterator]() {\n    return this.ranges[Symbol.iterator]();\n  }\n}\nexport default SelectionRange;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}