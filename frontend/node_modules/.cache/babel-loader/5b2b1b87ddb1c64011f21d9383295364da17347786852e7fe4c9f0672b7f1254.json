{"ast":null,"code":"const COLUMN_ORDER_PREFIX = 'sort';\n\n/**\n * Get CSS classes which should be added to particular column header.\n *\n * @param {object} columnStatesManager Instance of column state manager.\n * @param {number} column Visual column index.\n * @param {boolean} showSortIndicator Indicates if indicator should be shown for the particular column.\n * @returns {Array} Array of CSS classes.\n */\nexport function getClassesToAdd(columnStatesManager, column, showSortIndicator) {\n  const cssClasses = [];\n  if (showSortIndicator === false) {\n    return cssClasses;\n  }\n  if (columnStatesManager.isColumnSorted(column) && columnStatesManager.getNumberOfSortedColumns() > 1) {\n    cssClasses.push(`${COLUMN_ORDER_PREFIX}-${columnStatesManager.getIndexOfColumnInSortQueue(column) + 1}`);\n  }\n  return cssClasses;\n}\n\n/**\n * Get CSS classes which should be removed from column header.\n *\n * @param {HTMLElement} htmlElement An element to process.\n * @returns {Array} Array of CSS classes.\n */\nexport function getClassesToRemove(htmlElement) {\n  const cssClasses = htmlElement.className.split(' ');\n  const sortSequenceRegExp = new RegExp(`^${COLUMN_ORDER_PREFIX}-[0-9]{1,2}$`);\n  return cssClasses.filter(cssClass => sortSequenceRegExp.test(cssClass));\n}","map":{"version":3,"names":["COLUMN_ORDER_PREFIX","getClassesToAdd","columnStatesManager","column","showSortIndicator","cssClasses","isColumnSorted","getNumberOfSortedColumns","push","getIndexOfColumnInSortQueue","getClassesToRemove","htmlElement","className","split","sortSequenceRegExp","RegExp","filter","cssClass","test"],"sources":["D:/gym-project/frontend/node_modules/handsontable/plugins/multiColumnSorting/domHelpers.mjs"],"sourcesContent":["import \"core-js/modules/es.array.push.js\";\nconst COLUMN_ORDER_PREFIX = 'sort';\n\n/**\n * Get CSS classes which should be added to particular column header.\n *\n * @param {object} columnStatesManager Instance of column state manager.\n * @param {number} column Visual column index.\n * @param {boolean} showSortIndicator Indicates if indicator should be shown for the particular column.\n * @returns {Array} Array of CSS classes.\n */\nexport function getClassesToAdd(columnStatesManager, column, showSortIndicator) {\n  const cssClasses = [];\n  if (showSortIndicator === false) {\n    return cssClasses;\n  }\n  if (columnStatesManager.isColumnSorted(column) && columnStatesManager.getNumberOfSortedColumns() > 1) {\n    cssClasses.push(`${COLUMN_ORDER_PREFIX}-${columnStatesManager.getIndexOfColumnInSortQueue(column) + 1}`);\n  }\n  return cssClasses;\n}\n\n/**\n * Get CSS classes which should be removed from column header.\n *\n * @param {HTMLElement} htmlElement An element to process.\n * @returns {Array} Array of CSS classes.\n */\nexport function getClassesToRemove(htmlElement) {\n  const cssClasses = htmlElement.className.split(' ');\n  const sortSequenceRegExp = new RegExp(`^${COLUMN_ORDER_PREFIX}-[0-9]{1,2}$`);\n  return cssClasses.filter(cssClass => sortSequenceRegExp.test(cssClass));\n}"],"mappings":"AACA,MAAMA,mBAAmB,GAAG,MAAM;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAeA,CAACC,mBAAmB,EAAEC,MAAM,EAAEC,iBAAiB,EAAE;EAC9E,MAAMC,UAAU,GAAG,EAAE;EACrB,IAAID,iBAAiB,KAAK,KAAK,EAAE;IAC/B,OAAOC,UAAU;EACnB;EACA,IAAIH,mBAAmB,CAACI,cAAc,CAACH,MAAM,CAAC,IAAID,mBAAmB,CAACK,wBAAwB,CAAC,CAAC,GAAG,CAAC,EAAE;IACpGF,UAAU,CAACG,IAAI,CAAC,GAAGR,mBAAmB,IAAIE,mBAAmB,CAACO,2BAA2B,CAACN,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC;EAC1G;EACA,OAAOE,UAAU;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASK,kBAAkBA,CAACC,WAAW,EAAE;EAC9C,MAAMN,UAAU,GAAGM,WAAW,CAACC,SAAS,CAACC,KAAK,CAAC,GAAG,CAAC;EACnD,MAAMC,kBAAkB,GAAG,IAAIC,MAAM,CAAC,IAAIf,mBAAmB,cAAc,CAAC;EAC5E,OAAOK,UAAU,CAACW,MAAM,CAACC,QAAQ,IAAIH,kBAAkB,CAACI,IAAI,CAACD,QAAQ,CAAC,CAAC;AACzE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}