{"ast":null,"code":"function _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\n/**\n * Helper class for checking if element will fit at the desired side of cursor.\n *\n * @private\n * @class Cursor\n */\nexport class Cursor {\n  constructor(object, rootWindow) {\n    /**\n     * @type {number}\n     */\n    _defineProperty(this, \"top\", void 0);\n    /**\n     * @type {number}\n     */\n    _defineProperty(this, \"topRelative\", void 0);\n    /**\n     * @type {number}\n     */\n    _defineProperty(this, \"left\", void 0);\n    /**\n     * @type {number}\n     */\n    _defineProperty(this, \"leftRelative\", void 0);\n    /**\n     * @type {number}\n     */\n    _defineProperty(this, \"scrollTop\", void 0);\n    /**\n     * @type {number}\n     */\n    _defineProperty(this, \"scrollLeft\", void 0);\n    /**\n     * @type {number}\n     */\n    _defineProperty(this, \"cellHeight\", void 0);\n    /**\n     * @type {number}\n     */\n    _defineProperty(this, \"cellWidth\", void 0);\n    const windowScrollTop = rootWindow.scrollY;\n    const windowScrollLeft = rootWindow.scrollX;\n    let top;\n    let topRelative;\n    let left;\n    let leftRelative;\n    let cellHeight;\n    let cellWidth;\n    this.rootWindow = rootWindow;\n    this.type = this.getSourceType(object);\n    if (this.type === 'literal') {\n      top = parseInt(object.top, 10);\n      left = parseInt(object.left, 10);\n      cellHeight = object.height || 0;\n      cellWidth = object.width || 0;\n      topRelative = top;\n      leftRelative = left;\n      top += windowScrollTop;\n      left += windowScrollLeft;\n    } else if (this.type === 'event') {\n      top = parseInt(object.pageY, 10);\n      left = parseInt(object.pageX, 10);\n      cellHeight = object.target.clientHeight;\n      cellWidth = object.target.clientWidth;\n      topRelative = top - windowScrollTop;\n      leftRelative = left - windowScrollLeft;\n    }\n    this.top = top;\n    this.topRelative = topRelative;\n    this.left = left;\n    this.leftRelative = leftRelative;\n    this.scrollTop = windowScrollTop;\n    this.scrollLeft = windowScrollLeft;\n    this.cellHeight = cellHeight;\n    this.cellWidth = cellWidth;\n  }\n\n  /**\n   * Get source type name.\n   *\n   * @param {*} object Event or Object with coordinates.\n   * @returns {string} Returns one of this values: `'literal'`, `'event'`.\n   */\n  getSourceType(object) {\n    let type = 'literal';\n    if (object instanceof Event) {\n      type = 'event';\n    }\n    return type;\n  }\n\n  /**\n   * Checks if element can be placed above the cursor.\n   *\n   * @param {HTMLElement} element Element to check if it's size will fit above the cursor.\n   * @returns {boolean}\n   */\n  fitsAbove(element) {\n    return this.topRelative >= element.offsetHeight;\n  }\n\n  /**\n   * Checks if element can be placed below the cursor.\n   *\n   * @param {HTMLElement} element Element to check if it's size will fit below the cursor.\n   * @param {number} [viewportHeight] The viewport height.\n   * @returns {boolean}\n   */\n  fitsBelow(element) {\n    let viewportHeight = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.rootWindow.innerHeight;\n    return this.topRelative + element.offsetHeight <= viewportHeight;\n  }\n\n  /**\n   * Checks if element can be placed on the right of the cursor.\n   *\n   * @param {HTMLElement} element Element to check if it's size will fit on the right of the cursor.\n   * @param {number} [viewportWidth] The viewport width.\n   * @returns {boolean}\n   */\n  fitsOnRight(element) {\n    let viewportWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.rootWindow.innerWidth;\n    return this.leftRelative + this.cellWidth + element.offsetWidth <= viewportWidth;\n  }\n\n  /**\n   * Checks if element can be placed on the left on the cursor.\n   *\n   * @param {HTMLElement} element Element to check if it's size will fit on the left of the cursor.\n   * @returns {boolean}\n   */\n  fitsOnLeft(element) {\n    return this.leftRelative >= element.offsetWidth;\n  }\n}","map":{"version":3,"names":["_defineProperty","e","r","t","_toPropertyKey","Object","defineProperty","value","enumerable","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","Cursor","constructor","object","rootWindow","windowScrollTop","scrollY","windowScrollLeft","scrollX","top","topRelative","left","leftRelative","cellHeight","cellWidth","type","getSourceType","parseInt","height","width","pageY","pageX","target","clientHeight","clientWidth","scrollTop","scrollLeft","Event","fitsAbove","element","offsetHeight","fitsBelow","viewportHeight","arguments","length","undefined","innerHeight","fitsOnRight","viewportWidth","innerWidth","offsetWidth","fitsOnLeft"],"sources":["D:/gym-project/frontend/node_modules/handsontable/plugins/contextMenu/menu/cursor.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Helper class for checking if element will fit at the desired side of cursor.\n *\n * @private\n * @class Cursor\n */\nexport class Cursor {\n  constructor(object, rootWindow) {\n    /**\n     * @type {number}\n     */\n    _defineProperty(this, \"top\", void 0);\n    /**\n     * @type {number}\n     */\n    _defineProperty(this, \"topRelative\", void 0);\n    /**\n     * @type {number}\n     */\n    _defineProperty(this, \"left\", void 0);\n    /**\n     * @type {number}\n     */\n    _defineProperty(this, \"leftRelative\", void 0);\n    /**\n     * @type {number}\n     */\n    _defineProperty(this, \"scrollTop\", void 0);\n    /**\n     * @type {number}\n     */\n    _defineProperty(this, \"scrollLeft\", void 0);\n    /**\n     * @type {number}\n     */\n    _defineProperty(this, \"cellHeight\", void 0);\n    /**\n     * @type {number}\n     */\n    _defineProperty(this, \"cellWidth\", void 0);\n    const windowScrollTop = rootWindow.scrollY;\n    const windowScrollLeft = rootWindow.scrollX;\n    let top;\n    let topRelative;\n    let left;\n    let leftRelative;\n    let cellHeight;\n    let cellWidth;\n    this.rootWindow = rootWindow;\n    this.type = this.getSourceType(object);\n    if (this.type === 'literal') {\n      top = parseInt(object.top, 10);\n      left = parseInt(object.left, 10);\n      cellHeight = object.height || 0;\n      cellWidth = object.width || 0;\n      topRelative = top;\n      leftRelative = left;\n      top += windowScrollTop;\n      left += windowScrollLeft;\n    } else if (this.type === 'event') {\n      top = parseInt(object.pageY, 10);\n      left = parseInt(object.pageX, 10);\n      cellHeight = object.target.clientHeight;\n      cellWidth = object.target.clientWidth;\n      topRelative = top - windowScrollTop;\n      leftRelative = left - windowScrollLeft;\n    }\n    this.top = top;\n    this.topRelative = topRelative;\n    this.left = left;\n    this.leftRelative = leftRelative;\n    this.scrollTop = windowScrollTop;\n    this.scrollLeft = windowScrollLeft;\n    this.cellHeight = cellHeight;\n    this.cellWidth = cellWidth;\n  }\n\n  /**\n   * Get source type name.\n   *\n   * @param {*} object Event or Object with coordinates.\n   * @returns {string} Returns one of this values: `'literal'`, `'event'`.\n   */\n  getSourceType(object) {\n    let type = 'literal';\n    if (object instanceof Event) {\n      type = 'event';\n    }\n    return type;\n  }\n\n  /**\n   * Checks if element can be placed above the cursor.\n   *\n   * @param {HTMLElement} element Element to check if it's size will fit above the cursor.\n   * @returns {boolean}\n   */\n  fitsAbove(element) {\n    return this.topRelative >= element.offsetHeight;\n  }\n\n  /**\n   * Checks if element can be placed below the cursor.\n   *\n   * @param {HTMLElement} element Element to check if it's size will fit below the cursor.\n   * @param {number} [viewportHeight] The viewport height.\n   * @returns {boolean}\n   */\n  fitsBelow(element) {\n    let viewportHeight = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.rootWindow.innerHeight;\n    return this.topRelative + element.offsetHeight <= viewportHeight;\n  }\n\n  /**\n   * Checks if element can be placed on the right of the cursor.\n   *\n   * @param {HTMLElement} element Element to check if it's size will fit on the right of the cursor.\n   * @param {number} [viewportWidth] The viewport width.\n   * @returns {boolean}\n   */\n  fitsOnRight(element) {\n    let viewportWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.rootWindow.innerWidth;\n    return this.leftRelative + this.cellWidth + element.offsetWidth <= viewportWidth;\n  }\n\n  /**\n   * Checks if element can be placed on the left on the cursor.\n   *\n   * @param {HTMLElement} element Element to check if it's size will fit on the left of the cursor.\n   * @returns {boolean}\n   */\n  fitsOnLeft(element) {\n    return this.leftRelative >= element.offsetWidth;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}