{"ast":null,"code":"import { arrayEach, arrayMap } from \"../../../helpers/array.mjs\";\nimport * as C from \"../../../i18n/constants.mjs\";\n/**\n * @param {HiddenRows} hiddenRowsPlugin The plugin instance.\n * @returns {object}\n */\nexport default function showRowItem(hiddenRowsPlugin) {\n  const rows = [];\n  return {\n    key: 'hidden_rows_show',\n    name() {\n      const pluralForm = rows.length > 1 ? 1 : 0;\n      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_SHOW_ROW, pluralForm);\n    },\n    callback() {\n      var _this$rowIndexMapper$, _this$rowIndexMapper$2;\n      if (rows.length === 0) {\n        return;\n      }\n      let startVisualRow = rows[0];\n      let endVisualRow = rows[rows.length - 1];\n\n      // Add to the selection one more visual row on the top.\n      startVisualRow = (_this$rowIndexMapper$ = this.rowIndexMapper.getNearestNotHiddenIndex(startVisualRow - 1, -1)) !== null && _this$rowIndexMapper$ !== void 0 ? _this$rowIndexMapper$ : 0;\n      // Add to the selection one more visual row on the bottom.\n      endVisualRow = (_this$rowIndexMapper$2 = this.rowIndexMapper.getNearestNotHiddenIndex(endVisualRow + 1, 1)) !== null && _this$rowIndexMapper$2 !== void 0 ? _this$rowIndexMapper$2 : this.countRows() - 1;\n      hiddenRowsPlugin.showRows(rows);\n\n      // We render rows at first. It was needed for getting fixed rows.\n      // Please take a look at #6864 for broader description.\n      this.render();\n      this.view.adjustElementsSize();\n      const allRowsSelected = endVisualRow - startVisualRow + 1 === this.countRows();\n\n      // When all headers needs to be selected then do nothing. The header selection is\n      // automatically handled by corner click.\n      if (!allRowsSelected) {\n        this.selectRows(startVisualRow, endVisualRow);\n      }\n    },\n    disabled: false,\n    hidden() {\n      const hiddenPhysicalRows = arrayMap(hiddenRowsPlugin.getHiddenRows(), visualRowIndex => {\n        return this.toPhysicalRow(visualRowIndex);\n      });\n      if (!(this.selection.isSelectedByRowHeader() || this.selection.isSelectedByCorner()) || hiddenPhysicalRows.length < 1) {\n        return true;\n      }\n      rows.length = 0;\n      const selectedRangeLast = this.getSelectedRangeLast();\n      const visualStartRow = selectedRangeLast.getTopStartCorner().row;\n      const visualEndRow = selectedRangeLast.getBottomEndCorner().row;\n      const rowIndexMapper = this.rowIndexMapper;\n      const renderableStartRow = rowIndexMapper.getRenderableFromVisualIndex(visualStartRow);\n      const renderableEndRow = rowIndexMapper.getRenderableFromVisualIndex(visualEndRow);\n      const notTrimmedRowIndexes = rowIndexMapper.getNotTrimmedIndexes();\n      const physicalRowIndexes = [];\n      if (visualStartRow !== visualEndRow) {\n        const visualRowsInRange = visualEndRow - visualStartRow + 1;\n        const renderedRowsInRange = renderableEndRow - renderableStartRow + 1;\n\n        // Collect not trimmed rows if there are some hidden rows in the selection range.\n        if (visualRowsInRange > renderedRowsInRange) {\n          const physicalIndexesInRange = notTrimmedRowIndexes.slice(visualStartRow, visualEndRow + 1);\n          physicalRowIndexes.push(...physicalIndexesInRange.filter(physicalIndex => hiddenPhysicalRows.includes(physicalIndex)));\n        }\n\n        // Handled row is the first rendered index and there are some visual indexes before it.\n      } else if (renderableStartRow === 0 && renderableStartRow < visualStartRow) {\n        // not trimmed indexes -> array of mappings from visual (native array's index) to physical indexes (value).\n        physicalRowIndexes.push(...notTrimmedRowIndexes.slice(0, visualStartRow)); // physical indexes\n\n        // When all rows are hidden and the context menu is triggered using top-left corner.\n      } else if (renderableStartRow === null) {\n        // Show all hidden rows.\n        physicalRowIndexes.push(...notTrimmedRowIndexes.slice(0, this.countRows()));\n      } else {\n        const lastVisualIndex = this.countRows() - 1;\n        const lastRenderableIndex = rowIndexMapper.getRenderableFromVisualIndex(rowIndexMapper.getNearestNotHiddenIndex(lastVisualIndex, -1));\n\n        // Handled row is the last rendered index and there are some visual indexes after it.\n        if (renderableEndRow === lastRenderableIndex && lastVisualIndex > visualEndRow) {\n          physicalRowIndexes.push(...notTrimmedRowIndexes.slice(visualEndRow + 1));\n        }\n      }\n      arrayEach(physicalRowIndexes, physicalRowIndex => {\n        rows.push(this.toVisualRow(physicalRowIndex));\n      });\n      return rows.length === 0;\n    }\n  };\n}","map":{"version":3,"names":["arrayEach","arrayMap","C","showRowItem","hiddenRowsPlugin","rows","key","name","pluralForm","length","getTranslatedPhrase","CONTEXTMENU_ITEMS_SHOW_ROW","callback","_this$rowIndexMapper$","_this$rowIndexMapper$2","startVisualRow","endVisualRow","rowIndexMapper","getNearestNotHiddenIndex","countRows","showRows","render","view","adjustElementsSize","allRowsSelected","selectRows","disabled","hidden","hiddenPhysicalRows","getHiddenRows","visualRowIndex","toPhysicalRow","selection","isSelectedByRowHeader","isSelectedByCorner","selectedRangeLast","getSelectedRangeLast","visualStartRow","getTopStartCorner","row","visualEndRow","getBottomEndCorner","renderableStartRow","getRenderableFromVisualIndex","renderableEndRow","notTrimmedRowIndexes","getNotTrimmedIndexes","physicalRowIndexes","visualRowsInRange","renderedRowsInRange","physicalIndexesInRange","slice","push","filter","physicalIndex","includes","lastVisualIndex","lastRenderableIndex","physicalRowIndex","toVisualRow"],"sources":["D:/gym-project/frontend/node_modules/handsontable/plugins/hiddenRows/contextMenuItem/showRow.mjs"],"sourcesContent":["import \"core-js/modules/es.array.push.js\";\nimport { arrayEach, arrayMap } from \"../../../helpers/array.mjs\";\nimport * as C from \"../../../i18n/constants.mjs\";\n/**\n * @param {HiddenRows} hiddenRowsPlugin The plugin instance.\n * @returns {object}\n */\nexport default function showRowItem(hiddenRowsPlugin) {\n  const rows = [];\n  return {\n    key: 'hidden_rows_show',\n    name() {\n      const pluralForm = rows.length > 1 ? 1 : 0;\n      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_SHOW_ROW, pluralForm);\n    },\n    callback() {\n      var _this$rowIndexMapper$, _this$rowIndexMapper$2;\n      if (rows.length === 0) {\n        return;\n      }\n      let startVisualRow = rows[0];\n      let endVisualRow = rows[rows.length - 1];\n\n      // Add to the selection one more visual row on the top.\n      startVisualRow = (_this$rowIndexMapper$ = this.rowIndexMapper.getNearestNotHiddenIndex(startVisualRow - 1, -1)) !== null && _this$rowIndexMapper$ !== void 0 ? _this$rowIndexMapper$ : 0;\n      // Add to the selection one more visual row on the bottom.\n      endVisualRow = (_this$rowIndexMapper$2 = this.rowIndexMapper.getNearestNotHiddenIndex(endVisualRow + 1, 1)) !== null && _this$rowIndexMapper$2 !== void 0 ? _this$rowIndexMapper$2 : this.countRows() - 1;\n      hiddenRowsPlugin.showRows(rows);\n\n      // We render rows at first. It was needed for getting fixed rows.\n      // Please take a look at #6864 for broader description.\n      this.render();\n      this.view.adjustElementsSize();\n      const allRowsSelected = endVisualRow - startVisualRow + 1 === this.countRows();\n\n      // When all headers needs to be selected then do nothing. The header selection is\n      // automatically handled by corner click.\n      if (!allRowsSelected) {\n        this.selectRows(startVisualRow, endVisualRow);\n      }\n    },\n    disabled: false,\n    hidden() {\n      const hiddenPhysicalRows = arrayMap(hiddenRowsPlugin.getHiddenRows(), visualRowIndex => {\n        return this.toPhysicalRow(visualRowIndex);\n      });\n      if (!(this.selection.isSelectedByRowHeader() || this.selection.isSelectedByCorner()) || hiddenPhysicalRows.length < 1) {\n        return true;\n      }\n      rows.length = 0;\n      const selectedRangeLast = this.getSelectedRangeLast();\n      const visualStartRow = selectedRangeLast.getTopStartCorner().row;\n      const visualEndRow = selectedRangeLast.getBottomEndCorner().row;\n      const rowIndexMapper = this.rowIndexMapper;\n      const renderableStartRow = rowIndexMapper.getRenderableFromVisualIndex(visualStartRow);\n      const renderableEndRow = rowIndexMapper.getRenderableFromVisualIndex(visualEndRow);\n      const notTrimmedRowIndexes = rowIndexMapper.getNotTrimmedIndexes();\n      const physicalRowIndexes = [];\n      if (visualStartRow !== visualEndRow) {\n        const visualRowsInRange = visualEndRow - visualStartRow + 1;\n        const renderedRowsInRange = renderableEndRow - renderableStartRow + 1;\n\n        // Collect not trimmed rows if there are some hidden rows in the selection range.\n        if (visualRowsInRange > renderedRowsInRange) {\n          const physicalIndexesInRange = notTrimmedRowIndexes.slice(visualStartRow, visualEndRow + 1);\n          physicalRowIndexes.push(...physicalIndexesInRange.filter(physicalIndex => hiddenPhysicalRows.includes(physicalIndex)));\n        }\n\n        // Handled row is the first rendered index and there are some visual indexes before it.\n      } else if (renderableStartRow === 0 && renderableStartRow < visualStartRow) {\n        // not trimmed indexes -> array of mappings from visual (native array's index) to physical indexes (value).\n        physicalRowIndexes.push(...notTrimmedRowIndexes.slice(0, visualStartRow)); // physical indexes\n\n        // When all rows are hidden and the context menu is triggered using top-left corner.\n      } else if (renderableStartRow === null) {\n        // Show all hidden rows.\n        physicalRowIndexes.push(...notTrimmedRowIndexes.slice(0, this.countRows()));\n      } else {\n        const lastVisualIndex = this.countRows() - 1;\n        const lastRenderableIndex = rowIndexMapper.getRenderableFromVisualIndex(rowIndexMapper.getNearestNotHiddenIndex(lastVisualIndex, -1));\n\n        // Handled row is the last rendered index and there are some visual indexes after it.\n        if (renderableEndRow === lastRenderableIndex && lastVisualIndex > visualEndRow) {\n          physicalRowIndexes.push(...notTrimmedRowIndexes.slice(visualEndRow + 1));\n        }\n      }\n      arrayEach(physicalRowIndexes, physicalRowIndex => {\n        rows.push(this.toVisualRow(physicalRowIndex));\n      });\n      return rows.length === 0;\n    }\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}