{"ast":null,"code":"import BaseRenderer from \"./_base.mjs\";\nimport { warn } from \"./../../../../helpers/console.mjs\";\nimport { toSingleLine } from \"./../../../../helpers/templateLiteralTag.mjs\";\nimport { addClass } from \"./../../../../helpers/dom/element.mjs\";\nlet performanceWarningAppeared = false;\n\n/**\n * Colgroup renderer responsible for managing (inserting, tracking, rendering) COL elements.\n *\n *   <colgroup> (root node)\n *     ├ <col>   \\\n *     ├ <col>    \\\n *     ├ <col>     - ColGroupRenderer\n *     ├ <col>    /\n *     └ <col>   /.\n *\n * @class {ColGroupRenderer}\n */\nexport default class ColGroupRenderer extends BaseRenderer {\n  constructor(rootNode) {\n    super(null, rootNode); // NodePool is not implemented for this renderer yet\n  }\n\n  /**\n   * Adjusts the number of the rendered elements.\n   */\n  adjust() {\n    const {\n      columnsToRender,\n      rowHeadersCount\n    } = this.table;\n    const allColumnsToRender = columnsToRender + rowHeadersCount;\n    while (this.renderedNodes < allColumnsToRender) {\n      this.rootNode.appendChild(this.table.rootDocument.createElement('col'));\n      this.renderedNodes += 1;\n    }\n    while (this.renderedNodes > allColumnsToRender) {\n      this.rootNode.removeChild(this.rootNode.lastChild);\n      this.renderedNodes -= 1;\n    }\n  }\n\n  /**\n   * Renders the col group elements.\n   */\n  render() {\n    this.adjust();\n    const {\n      columnsToRender,\n      rowHeadersCount\n    } = this.table;\n    if (!performanceWarningAppeared && columnsToRender > 1000) {\n      performanceWarningAppeared = true;\n      warn(toSingleLine`Performance tip: Handsontable rendered more than 1000 visible columns.\\x20\n        Consider limiting the number of rendered columns by specifying the table width and/or\\x20\n        turning off the \"renderAllColumns\" option.`);\n    }\n\n    // Render column nodes for row headers\n    for (let visibleColumnIndex = 0; visibleColumnIndex < rowHeadersCount; visibleColumnIndex++) {\n      const sourceColumnIndex = this.table.renderedColumnToSource(visibleColumnIndex);\n      const width = this.table.columnUtils.getHeaderWidth(sourceColumnIndex);\n      this.rootNode.childNodes[visibleColumnIndex].style.width = `${width}px`;\n    }\n\n    // Render column nodes for cells\n    for (let visibleColumnIndex = 0; visibleColumnIndex < columnsToRender; visibleColumnIndex++) {\n      const sourceColumnIndex = this.table.renderedColumnToSource(visibleColumnIndex);\n      const width = this.table.columnUtils.getStretchedColumnWidth(sourceColumnIndex);\n      this.rootNode.childNodes[visibleColumnIndex + rowHeadersCount].style.width = `${width}px`;\n    }\n    const firstChild = this.rootNode.firstChild;\n    if (firstChild) {\n      addClass(firstChild, 'rowHeader');\n    }\n  }\n}","map":{"version":3,"names":["BaseRenderer","warn","toSingleLine","addClass","performanceWarningAppeared","ColGroupRenderer","constructor","rootNode","adjust","columnsToRender","rowHeadersCount","table","allColumnsToRender","renderedNodes","appendChild","rootDocument","createElement","removeChild","lastChild","render","visibleColumnIndex","sourceColumnIndex","renderedColumnToSource","width","columnUtils","getHeaderWidth","childNodes","style","getStretchedColumnWidth","firstChild"],"sources":["D:/gym-project/frontend/node_modules/handsontable/3rdparty/walkontable/src/renderer/colGroup.mjs"],"sourcesContent":["import BaseRenderer from \"./_base.mjs\";\nimport { warn } from \"./../../../../helpers/console.mjs\";\nimport { toSingleLine } from \"./../../../../helpers/templateLiteralTag.mjs\";\nimport { addClass } from \"./../../../../helpers/dom/element.mjs\";\nlet performanceWarningAppeared = false;\n\n/**\n * Colgroup renderer responsible for managing (inserting, tracking, rendering) COL elements.\n *\n *   <colgroup> (root node)\n *     ├ <col>   \\\n *     ├ <col>    \\\n *     ├ <col>     - ColGroupRenderer\n *     ├ <col>    /\n *     └ <col>   /.\n *\n * @class {ColGroupRenderer}\n */\nexport default class ColGroupRenderer extends BaseRenderer {\n  constructor(rootNode) {\n    super(null, rootNode); // NodePool is not implemented for this renderer yet\n  }\n\n  /**\n   * Adjusts the number of the rendered elements.\n   */\n  adjust() {\n    const {\n      columnsToRender,\n      rowHeadersCount\n    } = this.table;\n    const allColumnsToRender = columnsToRender + rowHeadersCount;\n    while (this.renderedNodes < allColumnsToRender) {\n      this.rootNode.appendChild(this.table.rootDocument.createElement('col'));\n      this.renderedNodes += 1;\n    }\n    while (this.renderedNodes > allColumnsToRender) {\n      this.rootNode.removeChild(this.rootNode.lastChild);\n      this.renderedNodes -= 1;\n    }\n  }\n\n  /**\n   * Renders the col group elements.\n   */\n  render() {\n    this.adjust();\n    const {\n      columnsToRender,\n      rowHeadersCount\n    } = this.table;\n    if (!performanceWarningAppeared && columnsToRender > 1000) {\n      performanceWarningAppeared = true;\n      warn(toSingleLine`Performance tip: Handsontable rendered more than 1000 visible columns.\\x20\n        Consider limiting the number of rendered columns by specifying the table width and/or\\x20\n        turning off the \"renderAllColumns\" option.`);\n    }\n\n    // Render column nodes for row headers\n    for (let visibleColumnIndex = 0; visibleColumnIndex < rowHeadersCount; visibleColumnIndex++) {\n      const sourceColumnIndex = this.table.renderedColumnToSource(visibleColumnIndex);\n      const width = this.table.columnUtils.getHeaderWidth(sourceColumnIndex);\n      this.rootNode.childNodes[visibleColumnIndex].style.width = `${width}px`;\n    }\n\n    // Render column nodes for cells\n    for (let visibleColumnIndex = 0; visibleColumnIndex < columnsToRender; visibleColumnIndex++) {\n      const sourceColumnIndex = this.table.renderedColumnToSource(visibleColumnIndex);\n      const width = this.table.columnUtils.getStretchedColumnWidth(sourceColumnIndex);\n      this.rootNode.childNodes[visibleColumnIndex + rowHeadersCount].style.width = `${width}px`;\n    }\n    const firstChild = this.rootNode.firstChild;\n    if (firstChild) {\n      addClass(firstChild, 'rowHeader');\n    }\n  }\n}"],"mappings":"AAAA,OAAOA,YAAY,MAAM,aAAa;AACtC,SAASC,IAAI,QAAQ,mCAAmC;AACxD,SAASC,YAAY,QAAQ,8CAA8C;AAC3E,SAASC,QAAQ,QAAQ,uCAAuC;AAChE,IAAIC,0BAA0B,GAAG,KAAK;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMC,gBAAgB,SAASL,YAAY,CAAC;EACzDM,WAAWA,CAACC,QAAQ,EAAE;IACpB,KAAK,CAAC,IAAI,EAAEA,QAAQ,CAAC,CAAC,CAAC;EACzB;;EAEA;AACF;AACA;EACEC,MAAMA,CAAA,EAAG;IACP,MAAM;MACJC,eAAe;MACfC;IACF,CAAC,GAAG,IAAI,CAACC,KAAK;IACd,MAAMC,kBAAkB,GAAGH,eAAe,GAAGC,eAAe;IAC5D,OAAO,IAAI,CAACG,aAAa,GAAGD,kBAAkB,EAAE;MAC9C,IAAI,CAACL,QAAQ,CAACO,WAAW,CAAC,IAAI,CAACH,KAAK,CAACI,YAAY,CAACC,aAAa,CAAC,KAAK,CAAC,CAAC;MACvE,IAAI,CAACH,aAAa,IAAI,CAAC;IACzB;IACA,OAAO,IAAI,CAACA,aAAa,GAAGD,kBAAkB,EAAE;MAC9C,IAAI,CAACL,QAAQ,CAACU,WAAW,CAAC,IAAI,CAACV,QAAQ,CAACW,SAAS,CAAC;MAClD,IAAI,CAACL,aAAa,IAAI,CAAC;IACzB;EACF;;EAEA;AACF;AACA;EACEM,MAAMA,CAAA,EAAG;IACP,IAAI,CAACX,MAAM,CAAC,CAAC;IACb,MAAM;MACJC,eAAe;MACfC;IACF,CAAC,GAAG,IAAI,CAACC,KAAK;IACd,IAAI,CAACP,0BAA0B,IAAIK,eAAe,GAAG,IAAI,EAAE;MACzDL,0BAA0B,GAAG,IAAI;MACjCH,IAAI,CAACC,YAAY;AACvB;AACA,mDAAmD,CAAC;IAChD;;IAEA;IACA,KAAK,IAAIkB,kBAAkB,GAAG,CAAC,EAAEA,kBAAkB,GAAGV,eAAe,EAAEU,kBAAkB,EAAE,EAAE;MAC3F,MAAMC,iBAAiB,GAAG,IAAI,CAACV,KAAK,CAACW,sBAAsB,CAACF,kBAAkB,CAAC;MAC/E,MAAMG,KAAK,GAAG,IAAI,CAACZ,KAAK,CAACa,WAAW,CAACC,cAAc,CAACJ,iBAAiB,CAAC;MACtE,IAAI,CAACd,QAAQ,CAACmB,UAAU,CAACN,kBAAkB,CAAC,CAACO,KAAK,CAACJ,KAAK,GAAG,GAAGA,KAAK,IAAI;IACzE;;IAEA;IACA,KAAK,IAAIH,kBAAkB,GAAG,CAAC,EAAEA,kBAAkB,GAAGX,eAAe,EAAEW,kBAAkB,EAAE,EAAE;MAC3F,MAAMC,iBAAiB,GAAG,IAAI,CAACV,KAAK,CAACW,sBAAsB,CAACF,kBAAkB,CAAC;MAC/E,MAAMG,KAAK,GAAG,IAAI,CAACZ,KAAK,CAACa,WAAW,CAACI,uBAAuB,CAACP,iBAAiB,CAAC;MAC/E,IAAI,CAACd,QAAQ,CAACmB,UAAU,CAACN,kBAAkB,GAAGV,eAAe,CAAC,CAACiB,KAAK,CAACJ,KAAK,GAAG,GAAGA,KAAK,IAAI;IAC3F;IACA,MAAMM,UAAU,GAAG,IAAI,CAACtB,QAAQ,CAACsB,UAAU;IAC3C,IAAIA,UAAU,EAAE;MACd1B,QAAQ,CAAC0B,UAAU,EAAE,WAAW,CAAC;IACnC;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}