{"ast":null,"code":"import { arrayEach, arrayMap } from \"../../../helpers/array.mjs\";\nimport { stringify } from \"../../../helpers/mixed.mjs\";\nimport BaseType from \"./_base.mjs\";\nconst CHAR_CARRIAGE_RETURN = String.fromCharCode(13);\nconst CHAR_DOUBLE_QUOTES = String.fromCharCode(34);\nconst CHAR_LINE_FEED = String.fromCharCode(10);\n\n/**\n * @private\n */\nclass Csv extends BaseType {\n  /**\n   * Default options for exporting CSV format.\n   *\n   * @returns {object}\n   */\n  static get DEFAULT_OPTIONS() {\n    return {\n      mimeType: 'text/csv',\n      fileExtension: 'csv',\n      bom: true,\n      columnDelimiter: ',',\n      rowDelimiter: '\\r\\n'\n    };\n  }\n\n  /**\n   * Create string body in desired format.\n   *\n   * @returns {string}\n   */\n  export() {\n    const options = this.options;\n    const data = this.dataProvider.getData();\n    let columnHeaders = this.dataProvider.getColumnHeaders();\n    const hasColumnHeaders = columnHeaders.length > 0;\n    const rowHeaders = this.dataProvider.getRowHeaders();\n    const hasRowHeaders = rowHeaders.length > 0;\n    let result = options.bom ? String.fromCharCode(0xFEFF) : '';\n    if (hasColumnHeaders) {\n      columnHeaders = arrayMap(columnHeaders, value => this._escapeCell(value, true));\n      if (hasRowHeaders) {\n        result += options.columnDelimiter;\n      }\n      result += columnHeaders.join(options.columnDelimiter);\n      result += options.rowDelimiter;\n    }\n    arrayEach(data, (value, index) => {\n      if (index > 0) {\n        result += options.rowDelimiter;\n      }\n      if (hasRowHeaders) {\n        result += this._escapeCell(rowHeaders[index]) + options.columnDelimiter;\n      }\n      result += value.map(cellValue => this._escapeCell(cellValue)).join(options.columnDelimiter);\n    });\n    return result;\n  }\n\n  /**\n   * Escape cell value.\n   *\n   * @param {*} value Cell value.\n   * @param {boolean} [force=false] Indicates if cell value will be escaped forcefully.\n   * @returns {string}\n   */\n  _escapeCell(value) {\n    let force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let escapedValue = stringify(value);\n    if (escapedValue !== '' && (force || escapedValue.indexOf(CHAR_CARRIAGE_RETURN) >= 0 || escapedValue.indexOf(CHAR_DOUBLE_QUOTES) >= 0 || escapedValue.indexOf(CHAR_LINE_FEED) >= 0 || escapedValue.indexOf(this.options.columnDelimiter) >= 0)) {\n      escapedValue = escapedValue.replace(new RegExp('\"', 'g'), '\"\"');\n      escapedValue = `\"${escapedValue}\"`;\n    }\n    return escapedValue;\n  }\n}\nexport default Csv;","map":{"version":3,"names":["arrayEach","arrayMap","stringify","BaseType","CHAR_CARRIAGE_RETURN","String","fromCharCode","CHAR_DOUBLE_QUOTES","CHAR_LINE_FEED","Csv","DEFAULT_OPTIONS","mimeType","fileExtension","bom","columnDelimiter","rowDelimiter","export","options","data","dataProvider","getData","columnHeaders","getColumnHeaders","hasColumnHeaders","length","rowHeaders","getRowHeaders","hasRowHeaders","result","value","_escapeCell","join","index","map","cellValue","force","arguments","undefined","escapedValue","indexOf","replace","RegExp"],"sources":["D:/gym-project/frontend/node_modules/handsontable/plugins/exportFile/types/csv.mjs"],"sourcesContent":["import { arrayEach, arrayMap } from \"../../../helpers/array.mjs\";\nimport { stringify } from \"../../../helpers/mixed.mjs\";\nimport BaseType from \"./_base.mjs\";\nconst CHAR_CARRIAGE_RETURN = String.fromCharCode(13);\nconst CHAR_DOUBLE_QUOTES = String.fromCharCode(34);\nconst CHAR_LINE_FEED = String.fromCharCode(10);\n\n/**\n * @private\n */\nclass Csv extends BaseType {\n  /**\n   * Default options for exporting CSV format.\n   *\n   * @returns {object}\n   */\n  static get DEFAULT_OPTIONS() {\n    return {\n      mimeType: 'text/csv',\n      fileExtension: 'csv',\n      bom: true,\n      columnDelimiter: ',',\n      rowDelimiter: '\\r\\n'\n    };\n  }\n\n  /**\n   * Create string body in desired format.\n   *\n   * @returns {string}\n   */\n  export() {\n    const options = this.options;\n    const data = this.dataProvider.getData();\n    let columnHeaders = this.dataProvider.getColumnHeaders();\n    const hasColumnHeaders = columnHeaders.length > 0;\n    const rowHeaders = this.dataProvider.getRowHeaders();\n    const hasRowHeaders = rowHeaders.length > 0;\n    let result = options.bom ? String.fromCharCode(0xFEFF) : '';\n    if (hasColumnHeaders) {\n      columnHeaders = arrayMap(columnHeaders, value => this._escapeCell(value, true));\n      if (hasRowHeaders) {\n        result += options.columnDelimiter;\n      }\n      result += columnHeaders.join(options.columnDelimiter);\n      result += options.rowDelimiter;\n    }\n    arrayEach(data, (value, index) => {\n      if (index > 0) {\n        result += options.rowDelimiter;\n      }\n      if (hasRowHeaders) {\n        result += this._escapeCell(rowHeaders[index]) + options.columnDelimiter;\n      }\n      result += value.map(cellValue => this._escapeCell(cellValue)).join(options.columnDelimiter);\n    });\n    return result;\n  }\n\n  /**\n   * Escape cell value.\n   *\n   * @param {*} value Cell value.\n   * @param {boolean} [force=false] Indicates if cell value will be escaped forcefully.\n   * @returns {string}\n   */\n  _escapeCell(value) {\n    let force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let escapedValue = stringify(value);\n    if (escapedValue !== '' && (force || escapedValue.indexOf(CHAR_CARRIAGE_RETURN) >= 0 || escapedValue.indexOf(CHAR_DOUBLE_QUOTES) >= 0 || escapedValue.indexOf(CHAR_LINE_FEED) >= 0 || escapedValue.indexOf(this.options.columnDelimiter) >= 0)) {\n      escapedValue = escapedValue.replace(new RegExp('\"', 'g'), '\"\"');\n      escapedValue = `\"${escapedValue}\"`;\n    }\n    return escapedValue;\n  }\n}\nexport default Csv;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}