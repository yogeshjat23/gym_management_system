{"ast":null,"code":"function _classPrivateMethodInitSpec(e, a) {\n  _checkPrivateRedeclaration(e, a), a.add(e);\n}\nfunction _checkPrivateRedeclaration(e, t) {\n  if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _assertClassBrand(e, t, n) {\n  if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n;\n  throw new TypeError(\"Private element is not present on this object\");\n}\nimport { addClass, hasClass, removeClass, setAttribute } from \"../../helpers/dom/element.mjs\";\nimport { isUndefined, isDefined } from \"../../helpers/mixed.mjs\";\nimport { isObject } from \"../../helpers/object.mjs\";\nimport { isFunction } from \"../../helpers/function.mjs\";\nimport { arrayMap } from \"../../helpers/array.mjs\";\nimport { BasePlugin } from \"../base/index.mjs\";\nimport { IndexesSequence, PhysicalIndexToValueMap as IndexToValueMap } from \"../../translations/index.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nimport { ColumnStatesManager } from \"./columnStatesManager.mjs\";\nimport { EDITOR_EDIT_GROUP as SHORTCUTS_GROUP_EDITOR } from \"../../shortcutContexts/index.mjs\";\nimport { HEADER_SPAN_CLASS, getNextSortOrder, areValidSortStates, getHeaderSpanElement, isFirstLevelColumnHeader, wasHeaderClickedProperly } from \"./utils.mjs\";\nimport { getClassesToRemove, getClassesToAdd } from \"./domHelpers.mjs\";\nimport { rootComparator } from \"./rootComparator.mjs\";\nimport { registerRootComparator, sort } from \"./sortService/index.mjs\";\nimport { A11Y_SORT } from \"../../helpers/a11y.mjs\";\nexport const PLUGIN_KEY = 'columnSorting';\nexport const PLUGIN_PRIORITY = 50;\nexport const APPEND_COLUMN_CONFIG_STRATEGY = 'append';\nexport const REPLACE_COLUMN_CONFIG_STRATEGY = 'replace';\nconst SHORTCUTS_GROUP = PLUGIN_KEY;\nregisterRootComparator(PLUGIN_KEY, rootComparator);\nHooks.getSingleton().register('beforeColumnSort');\nHooks.getSingleton().register('afterColumnSort');\n\n// DIFF - MultiColumnSorting & ColumnSorting: changed configuration documentation.\n/**\n * @plugin ColumnSorting\n * @class ColumnSorting\n *\n * @description\n * This plugin sorts the view by columns (but does not sort the data source!). To enable the plugin, set the\n * {@link Options#columnSorting} property to the correct value (see the examples below).\n *\n * @example\n * ```js\n * // as boolean\n * columnSorting: true\n *\n * // as an object with initial sort config (sort ascending for column at index 1)\n * columnSorting: {\n *   initialConfig: {\n *     column: 1,\n *     sortOrder: 'asc'\n *   }\n * }\n *\n * // as an object which define specific sorting options for all columns\n * columnSorting: {\n *   sortEmptyCells: true, // true = the table sorts empty cells, false = the table moves all empty cells to the end of the table (by default)\n *   indicator: true, // true = shows indicator for all columns (by default), false = don't show indicator for columns\n *   headerAction: true, // true = allow to click on the headers to sort (by default), false = turn off possibility to click on the headers to sort\n *   compareFunctionFactory: function(sortOrder, columnMeta) {\n *     return function(value, nextValue) {\n *       // Some value comparisons which will return -1, 0 or 1...\n *     }\n *   }\n * }\n *\n * // as an object passed to the `column` property, allows specifying a custom options for the desired column.\n * // please take a look at documentation of `column` property: https://handsontable.com/docs/Options.html#columns\n * columns: [{\n *   columnSorting: {\n *     indicator: false, // disable indicator for the first column,\n *     sortEmptyCells: true,\n *     headerAction: false, // clicks on the first column won't sort\n *     compareFunctionFactory: function(sortOrder, columnMeta) {\n *       return function(value, nextValue) {\n *         return 0; // Custom compare function for the first column (don't sort)\n *       }\n *     }\n *   }\n * }]\n * ```\n */\nvar _ColumnSorting_brand = /*#__PURE__*/new WeakSet();\nexport class ColumnSorting extends BasePlugin {\n  constructor() {\n    super(...arguments);\n    /**\n     * Load saved settings or sort by predefined plugin configuration.\n     */\n    _classPrivateMethodInitSpec(this, _ColumnSorting_brand);\n    /**\n     * Instance of column state manager.\n     *\n     * @private\n     * @type {null|ColumnStatesManager}\n     */\n    _defineProperty(this, \"columnStatesManager\", null);\n    /**\n     * Cached column properties from plugin like i.e. `indicator`, `headerAction`.\n     *\n     * @private\n     * @type {null|PhysicalIndexToValueMap}\n     */\n    _defineProperty(this, \"columnMetaCache\", null);\n    /**\n     * Main settings key designed for the plugin.\n     *\n     * @private\n     * @type {string}\n     */\n    _defineProperty(this, \"pluginKey\", PLUGIN_KEY);\n    /**\n     * Plugin indexes cache.\n     *\n     * @private\n     * @type {null|IndexesSequence}\n     */\n    _defineProperty(this, \"indexesSequenceCache\", null);\n  }\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  /**\n   * Checks if the plugin is enabled in the Handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link ColumnSorting#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return !!this.hot.getSettings()[this.pluginKey];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    var _this = this;\n    if (this.enabled) {\n      return;\n    }\n    this.columnStatesManager = new ColumnStatesManager(this.hot, `${this.pluginKey}.sortingStates`);\n    this.columnMetaCache = new IndexToValueMap(physicalIndex => {\n      let visualIndex = this.hot.toVisualColumn(physicalIndex);\n      if (visualIndex === null) {\n        visualIndex = physicalIndex;\n      }\n      return this.getMergedPluginSettings(visualIndex);\n    });\n    this.hot.columnIndexMapper.registerMap(`${this.pluginKey}.columnMeta`, this.columnMetaCache);\n    this.addHook('afterGetColHeader', (column, TH) => _assertClassBrand(_ColumnSorting_brand, this, _onAfterGetColHeader).call(this, column, TH));\n    this.addHook('beforeOnCellMouseDown', function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return _assertClassBrand(_ColumnSorting_brand, _this, _onBeforeOnCellMouseDown).call(_this, ...args);\n    });\n    this.addHook('afterOnCellMouseDown', (event, target) => this.onAfterOnCellMouseDown(event, target));\n    this.addHook('afterInit', () => _assertClassBrand(_ColumnSorting_brand, this, _loadOrSortBySettings).call(this));\n    this.addHook('afterLoadData', function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      return _assertClassBrand(_ColumnSorting_brand, _this, _onAfterLoadData).call(_this, ...args);\n    });\n\n    // TODO: Workaround? It should be refactored / described.\n    if (this.hot.view) {\n      _assertClassBrand(_ColumnSorting_brand, this, _loadOrSortBySettings).call(this);\n    }\n    this.registerShortcuts();\n    super.enablePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    const clearColHeader = (column, TH) => {\n      const headerSpanElement = getHeaderSpanElement(TH);\n      if (isFirstLevelColumnHeader(column, TH) === false || headerSpanElement === null) {\n        return;\n      }\n      this.updateHeaderClasses(headerSpanElement);\n    };\n\n    // Changing header width and removing indicator.\n    this.hot.addHook('afterGetColHeader', clearColHeader);\n    this.hot.addHookOnce('afterViewRender', () => {\n      this.hot.removeHook('afterGetColHeader', clearColHeader);\n    });\n    this.hot.batchExecution(() => {\n      if (this.indexesSequenceCache !== null) {\n        this.hot.rowIndexMapper.setIndexesSequence(this.indexesSequenceCache.getValues());\n        this.hot.rowIndexMapper.unregisterMap(this.pluginKey);\n        this.indexesSequenceCache = null;\n      }\n    }, true);\n    this.hot.columnIndexMapper.unregisterMap(`${this.pluginKey}.columnMeta`);\n    this.columnStatesManager.destroy();\n    this.columnMetaCache = null;\n    this.columnStatesManager = null;\n    this.unregisterShortcuts();\n    super.disablePlugin();\n  }\n\n  /**\n   * Register shortcuts responsible for toggling column sorting functionality.\n   *\n   * @private\n   */\n  registerShortcuts() {\n    this.hot.getShortcutManager().getContext('grid').addShortcut({\n      keys: [['Enter']],\n      callback: () => {\n        const {\n          highlight\n        } = this.hot.getSelectedRangeLast();\n        this.sort(this.getColumnNextConfig(highlight.col));\n\n        // prevent default Enter behavior (move to the next row within a selection range)\n        return false;\n      },\n      runOnlyIf: () => {\n        var _this$hot$getSelected, _this$hot$getSelected2;\n        const highlight = (_this$hot$getSelected = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected === void 0 ? void 0 : _this$hot$getSelected.highlight;\n        return highlight && ((_this$hot$getSelected2 = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected2 === void 0 ? void 0 : _this$hot$getSelected2.isSingle()) && this.hot.selection.isCellVisible(highlight) && highlight.row === -1 && highlight.col >= 0;\n      },\n      relativeToGroup: SHORTCUTS_GROUP_EDITOR,\n      position: 'before',\n      group: SHORTCUTS_GROUP\n    });\n  }\n\n  /**\n   * Unregister shortcuts responsible for toggling column sorting functionality.\n   *\n   * @private\n   */\n  unregisterShortcuts() {\n    this.hot.getShortcutManager().getContext('grid').removeShortcutsByGroup(SHORTCUTS_GROUP);\n  }\n\n  // DIFF - MultiColumnSorting & ColumnSorting: changed function documentation.\n  /**\n   * Sorts the table by chosen columns and orders.\n   *\n   * @param {undefined|object} sortConfig Single column sort configuration. The configuration object contains `column` and `sortOrder` properties.\n   * First of them contains visual column index, the second one contains sort order (`asc` for ascending, `desc` for descending).\n   *\n   * **Note**: Please keep in mind that every call of `sort` function set an entirely new sort order. Previous sort configs aren't preserved.\n   *\n   * @example\n   * ```js\n   * // sort ascending first visual column\n   * hot.getPlugin('columnSorting').sort({ column: 0, sortOrder: 'asc' });\n   * ```\n   *\n   * @fires Hooks#beforeColumnSort\n   * @fires Hooks#afterColumnSort\n   */\n  sort(sortConfig) {\n    const currentSortConfig = this.getSortConfig();\n\n    // We always pass configs defined as an array to `beforeColumnSort` and `afterColumnSort` hooks.\n    const destinationSortConfigs = this.getNormalizedSortConfigs(sortConfig);\n    const sortPossible = this.areValidSortConfigs(destinationSortConfigs);\n    const allowSort = this.hot.runHooks('beforeColumnSort', currentSortConfig, destinationSortConfigs, sortPossible);\n    if (allowSort === false) {\n      return;\n    }\n    if (currentSortConfig.length === 0 && this.indexesSequenceCache === null) {\n      this.indexesSequenceCache = this.hot.rowIndexMapper.registerMap(this.pluginKey, new IndexesSequence());\n      this.indexesSequenceCache.setValues(this.hot.rowIndexMapper.getIndexesSequence());\n    }\n    if (sortPossible) {\n      this.columnStatesManager.setSortStates(destinationSortConfigs);\n      this.sortByPresetSortStates(destinationSortConfigs);\n      this.saveAllSortSettings(destinationSortConfigs);\n    }\n    this.hot.runHooks('afterColumnSort', currentSortConfig, sortPossible ? destinationSortConfigs : currentSortConfig, sortPossible);\n    if (sortPossible) {\n      this.hot.render();\n      // TODO: Workaround? This triggers fast redraw. One test won't pass after removal.\n      // It should be refactored / described.\n      this.hot.forceFullRender = false;\n      this.hot.view.render();\n    }\n  }\n\n  /**\n   * Clear the sort performed on the table.\n   */\n  clearSort() {\n    this.sort([]);\n  }\n\n  /**\n   * Checks if the table is sorted (any column have to be sorted).\n   *\n   * @returns {boolean}\n   */\n  isSorted() {\n    return this.enabled && !this.columnStatesManager.isListOfSortedColumnsEmpty();\n  }\n\n  /**\n   * Get sort configuration for particular column or for all sorted columns. Objects contain `column` and `sortOrder` properties.\n   *\n   * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key. They are handled by the `sort` function.\n   *\n   * @param {number} [column] Visual column index.\n   * @returns {undefined|object|Array}\n   */\n  getSortConfig(column) {\n    if (isDefined(column)) {\n      return this.columnStatesManager.getColumnSortState(column);\n    }\n    return this.columnStatesManager.getSortStates();\n  }\n\n  /**\n   * @description\n   * Warn: Useful mainly for providing server side sort implementation (see in the example below). It doesn't sort the data set. It just sets sort configuration for all sorted columns.\n   * Note: Please keep in mind that this method doesn't re-render the table.\n   *\n   * @example\n   * ```js\n   * beforeColumnSort: function(currentSortConfig, destinationSortConfigs) {\n   *   const columnSortPlugin = this.getPlugin('columnSorting');\n   *\n   *   columnSortPlugin.setSortConfig(destinationSortConfigs);\n   *\n   *   // const newData = ... // Calculated data set, ie. from an AJAX call.\n   *\n   *   this.loadData(newData); // Load new data set and re-render the table.\n   *\n   *   return false; // The blockade for the default sort action.\n   * }\n   * ```\n   *\n   * @param {undefined|object|Array} sortConfig Single column sort configuration or full sort configuration (for all sorted columns).\n   * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains\n   * sort order (`asc` for ascending, `desc` for descending).\n   */\n  setSortConfig(sortConfig) {\n    // We always set configs defined as an array.\n    const destinationSortConfigs = this.getNormalizedSortConfigs(sortConfig);\n    if (this.areValidSortConfigs(destinationSortConfigs)) {\n      this.columnStatesManager.setSortStates(destinationSortConfigs);\n    }\n  }\n\n  /**\n   * Get normalized sort configs.\n   *\n   * @private\n   * @param {object|Array} [sortConfig=[]] Single column sort configuration or full sort configuration (for all sorted columns).\n   * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains\n   * sort order (`asc` for ascending, `desc` for descending).\n   * @returns {Array}\n   */\n  getNormalizedSortConfigs() {\n    let sortConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    if (Array.isArray(sortConfig)) {\n      return sortConfig.slice(0, 1);\n    }\n    return [sortConfig];\n  }\n\n  /**\n   * Get if sort configs are valid.\n   *\n   * @private\n   * @param {Array} sortConfigs Sort configuration for all sorted columns. Objects contain `column` and `sortOrder` properties.\n   * @returns {boolean}\n   */\n  areValidSortConfigs(sortConfigs) {\n    const numberOfColumns = this.hot.countCols();\n\n    // We don't translate visual indexes to physical indexes.\n    return areValidSortStates(sortConfigs) && sortConfigs.every(_ref => {\n      let {\n        column\n      } = _ref;\n      return column <= numberOfColumns && column >= 0;\n    });\n  }\n\n  /**\n   * Saves all sorting settings. Saving works only when {@link Options#persistentState} option is enabled.\n   *\n   * @param {Array} sortConfigs Sort configuration for all sorted columns. Objects contain `column` and `sortOrder` properties.\n   *\n   * @private\n   * @fires Hooks#persistentStateSave\n   */\n  saveAllSortSettings(sortConfigs) {\n    const allSortSettings = this.columnStatesManager.getAllColumnsProperties();\n    const translateColumnToPhysical = _ref2 => {\n      let {\n        column: visualColumn,\n        ...restOfProperties\n      } = _ref2;\n      return {\n        column: this.hot.toPhysicalColumn(visualColumn),\n        ...restOfProperties\n      };\n    };\n    allSortSettings.initialConfig = arrayMap(sortConfigs, translateColumnToPhysical);\n    this.hot.runHooks('persistentStateSave', 'columnSorting', allSortSettings);\n  }\n\n  /**\n   * Get all saved sorting settings. Loading works only when {@link Options#persistentState} option is enabled.\n   *\n   * @private\n   * @returns {object} Previously saved sort settings.\n   *\n   * @fires Hooks#persistentStateLoad\n   */\n  getAllSavedSortSettings() {\n    const storedAllSortSettings = {};\n    this.hot.runHooks('persistentStateLoad', 'columnSorting', storedAllSortSettings);\n    const allSortSettings = storedAllSortSettings.value;\n    const translateColumnToVisual = _ref3 => {\n      let {\n        column: physicalColumn,\n        ...restOfProperties\n      } = _ref3;\n      return {\n        column: this.hot.toVisualColumn(physicalColumn),\n        ...restOfProperties\n      };\n    };\n    if (isDefined(allSortSettings) && Array.isArray(allSortSettings.initialConfig)) {\n      allSortSettings.initialConfig = arrayMap(allSortSettings.initialConfig, translateColumnToVisual);\n    }\n    return allSortSettings;\n  }\n\n  /**\n   * Get next sort configuration for particular column. Object contain `column` and `sortOrder` properties.\n   *\n   * **Note**: Please keep in mind that returned object expose **visual** column index under the `column` key.\n   *\n   * @private\n   * @param {number} column Visual column index.\n   * @returns {undefined|object}\n   */\n  getColumnNextConfig(column) {\n    const sortOrder = this.columnStatesManager.getSortOrderOfColumn(column);\n    if (isDefined(sortOrder)) {\n      const nextSortOrder = getNextSortOrder(sortOrder);\n      if (isDefined(nextSortOrder)) {\n        return {\n          column,\n          sortOrder: nextSortOrder\n        };\n      }\n      return;\n    }\n    const nrOfColumns = this.hot.countCols();\n    if (Number.isInteger(column) && column >= 0 && column < nrOfColumns) {\n      return {\n        column,\n        sortOrder: getNextSortOrder()\n      };\n    }\n  }\n\n  /**\n   * Get sort configuration with \"next order\" for particular column.\n   *\n   * @private\n   * @param {number} columnToChange Visual column index of column which order will be changed.\n   * @param {string} strategyId ID of strategy. Possible values: 'append' and 'replace'. The first one\n   * change order of particular column and change it's position in the sort queue to the last one. The second one\n   * just change order of particular column.\n   *\n   * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key.\n   *\n   * @returns {Array}\n   */\n  getNextSortConfig(columnToChange) {\n    let strategyId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : APPEND_COLUMN_CONFIG_STRATEGY;\n    const indexOfColumnToChange = this.columnStatesManager.getIndexOfColumnInSortQueue(columnToChange);\n    const isColumnSorted = indexOfColumnToChange !== -1;\n    const currentSortConfig = this.getSortConfig();\n    const nextColumnConfig = this.getColumnNextConfig(columnToChange);\n    if (isColumnSorted) {\n      if (isUndefined(nextColumnConfig)) {\n        return [...currentSortConfig.slice(0, indexOfColumnToChange), ...currentSortConfig.slice(indexOfColumnToChange + 1)];\n      }\n      if (strategyId === APPEND_COLUMN_CONFIG_STRATEGY) {\n        return [...currentSortConfig.slice(0, indexOfColumnToChange), ...currentSortConfig.slice(indexOfColumnToChange + 1), nextColumnConfig];\n      } else if (strategyId === REPLACE_COLUMN_CONFIG_STRATEGY) {\n        return [...currentSortConfig.slice(0, indexOfColumnToChange), nextColumnConfig, ...currentSortConfig.slice(indexOfColumnToChange + 1)];\n      }\n    }\n    if (isDefined(nextColumnConfig)) {\n      return currentSortConfig.concat(nextColumnConfig);\n    }\n    return currentSortConfig;\n  }\n\n  /**\n   * Get plugin's column config for the specified column index.\n   *\n   * @private\n   * @param {object} columnConfig Configuration inside `columns` property for the specified column index.\n   * @returns {object}\n   */\n  getPluginColumnConfig(columnConfig) {\n    if (isObject(columnConfig)) {\n      const pluginColumnConfig = columnConfig[this.pluginKey];\n      if (isObject(pluginColumnConfig)) {\n        return pluginColumnConfig;\n      }\n    }\n    return {};\n  }\n\n  /**\n   * Get plugin settings related properties, properly merged from cascade settings.\n   *\n   * @private\n   * @param {number} column Visual column index.\n   * @returns {object}\n   */\n  getMergedPluginSettings(column) {\n    const pluginMainSettings = this.hot.getSettings()[this.pluginKey];\n    const storedColumnProperties = this.columnStatesManager.getAllColumnsProperties();\n    const cellMeta = this.hot.getCellMeta(0, column);\n    const columnMeta = Object.getPrototypeOf(cellMeta);\n    if (Array.isArray(columnMeta.columns)) {\n      return Object.assign(storedColumnProperties, pluginMainSettings, this.getPluginColumnConfig(columnMeta.columns[column]));\n    } else if (isFunction(columnMeta.columns)) {\n      return Object.assign(storedColumnProperties, pluginMainSettings, this.getPluginColumnConfig(columnMeta.columns(column)));\n    }\n    return Object.assign(storedColumnProperties, pluginMainSettings);\n  }\n\n  /**\n   * Get copy of settings for first cell in the column.\n   *\n   * @private\n   * @param {number} column Visual column index.\n   * @returns {object}\n   */\n  // TODO: Workaround. Inheriting of non-primitive cell meta values doesn't work. Instead of getting properties from column meta we call this function.\n  // TODO: Remove test named: \"should not break the dataset when inserted new row\" (#5431).\n  getFirstCellSettings(column) {\n    const cellMeta = this.hot.getCellMeta(0, column);\n    const cellMetaCopy = Object.create(cellMeta);\n    cellMetaCopy[this.pluginKey] = this.columnMetaCache.getValueAtIndex(this.hot.toPhysicalColumn(column));\n    return cellMetaCopy;\n  }\n\n  /**\n   * Get number of rows which should be sorted.\n   *\n   * @private\n   * @param {number} numberOfRows Total number of displayed rows.\n   * @returns {number}\n   */\n  getNumberOfRowsToSort(numberOfRows) {\n    const settings = this.hot.getSettings();\n\n    // `maxRows` option doesn't take into account `minSpareRows` option in this case.\n    if (settings.maxRows <= numberOfRows) {\n      return settings.maxRows;\n    }\n    return numberOfRows - settings.minSpareRows;\n  }\n\n  /**\n   * Performs the sorting using a stable sort function basing on internal state of sorting.\n   *\n   * @param {Array} sortConfigs Sort configuration for all sorted columns. Objects contain `column` and `sortOrder` properties.\n   * @private\n   */\n  sortByPresetSortStates(sortConfigs) {\n    this.hot.rowIndexMapper.setIndexesSequence(this.indexesSequenceCache.getValues());\n    if (sortConfigs.length === 0) {\n      return;\n    }\n    const indexesWithData = [];\n    const numberOfRows = this.hot.countRows();\n    const getDataForSortedColumns = visualRowIndex => arrayMap(sortConfigs, sortConfig => this.hot.getDataAtCell(visualRowIndex, sortConfig.column));\n    for (let visualRowIndex = 0; visualRowIndex < this.getNumberOfRowsToSort(numberOfRows); visualRowIndex += 1) {\n      indexesWithData.push([this.hot.toPhysicalRow(visualRowIndex)].concat(getDataForSortedColumns(visualRowIndex)));\n    }\n    const indexesBefore = arrayMap(indexesWithData, indexWithData => indexWithData[0]);\n    sort(indexesWithData, this.pluginKey, arrayMap(sortConfigs, sortConfig => sortConfig.sortOrder), arrayMap(sortConfigs, sortConfig => this.getFirstCellSettings(sortConfig.column)));\n\n    // Append spareRows\n    for (let visualRowIndex = indexesWithData.length; visualRowIndex < numberOfRows; visualRowIndex += 1) {\n      indexesWithData.push([visualRowIndex].concat(getDataForSortedColumns(visualRowIndex)));\n    }\n    const indexesAfter = arrayMap(indexesWithData, indexWithData => indexWithData[0]);\n    const indexMapping = new Map(arrayMap(indexesBefore, (indexBefore, indexInsideArray) => [indexBefore, indexesAfter[indexInsideArray]]));\n    const newIndexesSequence = arrayMap(this.hot.rowIndexMapper.getIndexesSequence(), physicalIndex => {\n      if (indexMapping.has(physicalIndex)) {\n        return indexMapping.get(physicalIndex);\n      }\n      return physicalIndex;\n    });\n    this.hot.rowIndexMapper.setIndexesSequence(newIndexesSequence);\n  }\n  /**\n   * Sort the table by provided configuration.\n   *\n   * @private\n   * @param {object} allSortSettings All sort config settings. Object may contain `initialConfig`, `indicator`,\n   * `sortEmptyCells`, `headerAction` and `compareFunctionFactory` properties.\n   */\n  sortBySettings(allSortSettings) {\n    if (isObject(allSortSettings)) {\n      this.columnStatesManager.updateAllColumnsProperties(allSortSettings);\n      const initialConfig = allSortSettings.initialConfig;\n      if (Array.isArray(initialConfig) || isObject(initialConfig)) {\n        this.sort(initialConfig);\n      }\n    } else {\n      // Extra render for headers. Their width may change.\n      this.hot.render();\n    }\n  }\n\n  /**\n   * Callback for the `onAfterGetColHeader` hook. Adds column sorting CSS classes.\n   *\n   * @param {number} column Visual column index.\n   * @param {Element} TH TH HTML element.\n   */\n\n  /**\n   * Update header classes.\n   *\n   * @private\n   * @param {HTMLElement} headerSpanElement Header span element.\n   * @param {...*} args Extra arguments for helpers.\n   */\n  updateHeaderClasses(headerSpanElement) {\n    removeClass(headerSpanElement, getClassesToRemove(headerSpanElement));\n    if (this.enabled !== false) {\n      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n        args[_key3 - 1] = arguments[_key3];\n      }\n      addClass(headerSpanElement, getClassesToAdd(...args));\n    }\n  }\n\n  /**\n   * Overwriting base plugin's `onUpdateSettings` method. Please keep in mind that `onAfterUpdateSettings` isn't called\n   * for `updateSettings` in specific situations.\n   *\n   * @private\n   * @param {object} newSettings New settings object.\n   */\n  onUpdateSettings(newSettings) {\n    super.onUpdateSettings();\n    if (this.columnMetaCache !== null) {\n      // Column meta cache base on settings, thus we should re-init the map.\n      this.columnMetaCache.init(this.hot.columnIndexMapper.getNumberOfIndexes());\n    }\n    if (isDefined(newSettings[this.pluginKey])) {\n      this.sortBySettings(newSettings[this.pluginKey]);\n    }\n  }\n\n  /**\n   * Callback for the `afterLoadData` hook.\n   *\n   * @param {boolean} initialLoad Flag that determines whether the data has been loaded during the initialization.\n   */\n\n  /**\n   * Indicates if clickable header was clicked.\n   *\n   * @private\n   * @param {MouseEvent} event The `mousedown` event.\n   * @param {number} column Visual column index.\n   * @returns {boolean}\n   */\n  wasClickableHeaderClicked(event, column) {\n    const pluginSettingsForColumn = this.getFirstCellSettings(column)[this.pluginKey];\n    const headerActionEnabled = pluginSettingsForColumn.headerAction;\n    return headerActionEnabled && hasClass(event.target, HEADER_SPAN_CLASS);\n  }\n\n  /**\n   * Changes the behavior of selection / dragging.\n   *\n   * @param {MouseEvent} event The `mousedown` event.\n   * @param {CellCoords} coords Visual coordinates.\n   * @param {HTMLElement} TD The cell element.\n   * @param {object} controller An object with properties `row`, `column` and `cell`. Each property contains\n   *                            a boolean value that allows or disallows changing the selection for that particular area.\n   */\n\n  /**\n   * Callback for the `onAfterOnCellMouseDown` hook.\n   *\n   * @private\n   * @param {Event} event Event which are provided by hook.\n   * @param {CellCoords} coords Visual coords of the selected cell.\n   */\n  onAfterOnCellMouseDown(event, coords) {\n    if (wasHeaderClickedProperly(coords.row, coords.col, event) === false) {\n      return;\n    }\n    if (this.wasClickableHeaderClicked(event, coords.col)) {\n      if (this.hot.getShortcutManager().isCtrlPressed()) {\n        this.hot.deselectCell();\n        this.hot.selectColumns(coords.col);\n      }\n      this.sort(this.getColumnNextConfig(coords.col));\n    }\n  }\n\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    var _this$columnStatesMan;\n    // TODO: Probably not supported yet by ESLint: https://github.com/eslint/eslint/issues/11045\n    // eslint-disable-next-line no-unused-expressions\n    (_this$columnStatesMan = this.columnStatesManager) === null || _this$columnStatesMan === void 0 || _this$columnStatesMan.destroy();\n    super.destroy();\n  }\n}\nfunction _loadOrSortBySettings() {\n  const storedAllSortSettings = this.getAllSavedSortSettings();\n  if (isObject(storedAllSortSettings)) {\n    this.sortBySettings(storedAllSortSettings);\n  } else {\n    const allSortSettings = this.hot.getSettings()[this.pluginKey];\n    this.sortBySettings(allSortSettings);\n  }\n}\nfunction _onAfterGetColHeader(column, TH) {\n  const headerSpanElement = getHeaderSpanElement(TH);\n  if (isFirstLevelColumnHeader(column, TH) === false || headerSpanElement === null) {\n    return;\n  }\n  const pluginSettingsForColumn = this.getFirstCellSettings(column)[this.pluginKey];\n  const showSortIndicator = pluginSettingsForColumn.indicator;\n  const headerActionEnabled = pluginSettingsForColumn.headerAction;\n  this.updateHeaderClasses(headerSpanElement, this.columnStatesManager, column, showSortIndicator, headerActionEnabled);\n  if (this.hot.getSettings().ariaTags) {\n    const currentSortState = this.columnStatesManager.getSortOrderOfColumn(column);\n    setAttribute(TH, ...A11Y_SORT(currentSortState ? `${currentSortState}ending` : 'none'));\n  }\n}\nfunction _onAfterLoadData(initialLoad) {\n  if (initialLoad === true) {\n    // TODO: Workaround? It should be refactored / described.\n    if (this.hot.view) {\n      _assertClassBrand(_ColumnSorting_brand, this, _loadOrSortBySettings).call(this);\n    }\n  }\n}\nfunction _onBeforeOnCellMouseDown(event, coords, TD, controller) {\n  if (wasHeaderClickedProperly(coords.row, coords.col, event) === false) {\n    return;\n  }\n  if (this.wasClickableHeaderClicked(event, coords.col) && this.hot.getShortcutManager().isCtrlPressed()) {\n    controller.column = true;\n  }\n}","map":{"version":3,"names":["_classPrivateMethodInitSpec","e","a","_checkPrivateRedeclaration","add","t","has","TypeError","_defineProperty","r","_toPropertyKey","Object","defineProperty","value","enumerable","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","String","Number","_assertClassBrand","n","arguments","length","addClass","hasClass","removeClass","setAttribute","isUndefined","isDefined","isObject","isFunction","arrayMap","BasePlugin","IndexesSequence","PhysicalIndexToValueMap","IndexToValueMap","Hooks","ColumnStatesManager","EDITOR_EDIT_GROUP","SHORTCUTS_GROUP_EDITOR","HEADER_SPAN_CLASS","getNextSortOrder","areValidSortStates","getHeaderSpanElement","isFirstLevelColumnHeader","wasHeaderClickedProperly","getClassesToRemove","getClassesToAdd","rootComparator","registerRootComparator","sort","A11Y_SORT","PLUGIN_KEY","PLUGIN_PRIORITY","APPEND_COLUMN_CONFIG_STRATEGY","REPLACE_COLUMN_CONFIG_STRATEGY","SHORTCUTS_GROUP","getSingleton","register","_ColumnSorting_brand","WeakSet","ColumnSorting","constructor","isEnabled","hot","getSettings","pluginKey","enablePlugin","_this","enabled","columnStatesManager","columnMetaCache","physicalIndex","visualIndex","toVisualColumn","getMergedPluginSettings","columnIndexMapper","registerMap","addHook","column","TH","_onAfterGetColHeader","_len","args","Array","_key","_onBeforeOnCellMouseDown","event","target","onAfterOnCellMouseDown","_loadOrSortBySettings","_len2","_key2","_onAfterLoadData","view","registerShortcuts","disablePlugin","clearColHeader","headerSpanElement","updateHeaderClasses","addHookOnce","removeHook","batchExecution","indexesSequenceCache","rowIndexMapper","setIndexesSequence","getValues","unregisterMap","destroy","unregisterShortcuts","getShortcutManager","getContext","addShortcut","keys","callback","highlight","getSelectedRangeLast","getColumnNextConfig","col","runOnlyIf","_this$hot$getSelected","_this$hot$getSelected2","isSingle","selection","isCellVisible","row","relativeToGroup","position","group","removeShortcutsByGroup","sortConfig","currentSortConfig","getSortConfig","destinationSortConfigs","getNormalizedSortConfigs","sortPossible","areValidSortConfigs","allowSort","runHooks","setValues","getIndexesSequence","setSortStates","sortByPresetSortStates","saveAllSortSettings","render","forceFullRender","clearSort","isSorted","isListOfSortedColumnsEmpty","getColumnSortState","getSortStates","setSortConfig","undefined","isArray","slice","sortConfigs","numberOfColumns","countCols","every","_ref","allSortSettings","getAllColumnsProperties","translateColumnToPhysical","_ref2","visualColumn","restOfProperties","toPhysicalColumn","initialConfig","getAllSavedSortSettings","storedAllSortSettings","translateColumnToVisual","_ref3","physicalColumn","sortOrder","getSortOrderOfColumn","nextSortOrder","nrOfColumns","isInteger","getNextSortConfig","columnToChange","strategyId","indexOfColumnToChange","getIndexOfColumnInSortQueue","isColumnSorted","nextColumnConfig","concat","getPluginColumnConfig","columnConfig","pluginColumnConfig","pluginMainSettings","storedColumnProperties","cellMeta","getCellMeta","columnMeta","getPrototypeOf","columns","assign","getFirstCellSettings","cellMetaCopy","create","getValueAtIndex","getNumberOfRowsToSort","numberOfRows","settings","maxRows","minSpareRows","indexesWithData","countRows","getDataForSortedColumns","visualRowIndex","getDataAtCell","push","toPhysicalRow","indexesBefore","indexWithData","indexesAfter","indexMapping","Map","indexBefore","indexInsideArray","newIndexesSequence","get","sortBySettings","updateAllColumnsProperties","_len3","_key3","onUpdateSettings","newSettings","init","getNumberOfIndexes","wasClickableHeaderClicked","pluginSettingsForColumn","headerActionEnabled","headerAction","coords","isCtrlPressed","deselectCell","selectColumns","_this$columnStatesMan","showSortIndicator","indicator","ariaTags","currentSortState","initialLoad","TD","controller"],"sources":["D:/gym-project/frontend/node_modules/handsontable/plugins/columnSorting/columnSorting.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nfunction _classPrivateMethodInitSpec(e, a) { _checkPrivateRedeclaration(e, a), a.add(e); }\nfunction _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _assertClassBrand(e, t, n) { if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError(\"Private element is not present on this object\"); }\nimport { addClass, hasClass, removeClass, setAttribute } from \"../../helpers/dom/element.mjs\";\nimport { isUndefined, isDefined } from \"../../helpers/mixed.mjs\";\nimport { isObject } from \"../../helpers/object.mjs\";\nimport { isFunction } from \"../../helpers/function.mjs\";\nimport { arrayMap } from \"../../helpers/array.mjs\";\nimport { BasePlugin } from \"../base/index.mjs\";\nimport { IndexesSequence, PhysicalIndexToValueMap as IndexToValueMap } from \"../../translations/index.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nimport { ColumnStatesManager } from \"./columnStatesManager.mjs\";\nimport { EDITOR_EDIT_GROUP as SHORTCUTS_GROUP_EDITOR } from \"../../shortcutContexts/index.mjs\";\nimport { HEADER_SPAN_CLASS, getNextSortOrder, areValidSortStates, getHeaderSpanElement, isFirstLevelColumnHeader, wasHeaderClickedProperly } from \"./utils.mjs\";\nimport { getClassesToRemove, getClassesToAdd } from \"./domHelpers.mjs\";\nimport { rootComparator } from \"./rootComparator.mjs\";\nimport { registerRootComparator, sort } from \"./sortService/index.mjs\";\nimport { A11Y_SORT } from \"../../helpers/a11y.mjs\";\nexport const PLUGIN_KEY = 'columnSorting';\nexport const PLUGIN_PRIORITY = 50;\nexport const APPEND_COLUMN_CONFIG_STRATEGY = 'append';\nexport const REPLACE_COLUMN_CONFIG_STRATEGY = 'replace';\nconst SHORTCUTS_GROUP = PLUGIN_KEY;\nregisterRootComparator(PLUGIN_KEY, rootComparator);\nHooks.getSingleton().register('beforeColumnSort');\nHooks.getSingleton().register('afterColumnSort');\n\n// DIFF - MultiColumnSorting & ColumnSorting: changed configuration documentation.\n/**\n * @plugin ColumnSorting\n * @class ColumnSorting\n *\n * @description\n * This plugin sorts the view by columns (but does not sort the data source!). To enable the plugin, set the\n * {@link Options#columnSorting} property to the correct value (see the examples below).\n *\n * @example\n * ```js\n * // as boolean\n * columnSorting: true\n *\n * // as an object with initial sort config (sort ascending for column at index 1)\n * columnSorting: {\n *   initialConfig: {\n *     column: 1,\n *     sortOrder: 'asc'\n *   }\n * }\n *\n * // as an object which define specific sorting options for all columns\n * columnSorting: {\n *   sortEmptyCells: true, // true = the table sorts empty cells, false = the table moves all empty cells to the end of the table (by default)\n *   indicator: true, // true = shows indicator for all columns (by default), false = don't show indicator for columns\n *   headerAction: true, // true = allow to click on the headers to sort (by default), false = turn off possibility to click on the headers to sort\n *   compareFunctionFactory: function(sortOrder, columnMeta) {\n *     return function(value, nextValue) {\n *       // Some value comparisons which will return -1, 0 or 1...\n *     }\n *   }\n * }\n *\n * // as an object passed to the `column` property, allows specifying a custom options for the desired column.\n * // please take a look at documentation of `column` property: https://handsontable.com/docs/Options.html#columns\n * columns: [{\n *   columnSorting: {\n *     indicator: false, // disable indicator for the first column,\n *     sortEmptyCells: true,\n *     headerAction: false, // clicks on the first column won't sort\n *     compareFunctionFactory: function(sortOrder, columnMeta) {\n *       return function(value, nextValue) {\n *         return 0; // Custom compare function for the first column (don't sort)\n *       }\n *     }\n *   }\n * }]\n * ```\n */\nvar _ColumnSorting_brand = /*#__PURE__*/new WeakSet();\nexport class ColumnSorting extends BasePlugin {\n  constructor() {\n    super(...arguments);\n    /**\n     * Load saved settings or sort by predefined plugin configuration.\n     */\n    _classPrivateMethodInitSpec(this, _ColumnSorting_brand);\n    /**\n     * Instance of column state manager.\n     *\n     * @private\n     * @type {null|ColumnStatesManager}\n     */\n    _defineProperty(this, \"columnStatesManager\", null);\n    /**\n     * Cached column properties from plugin like i.e. `indicator`, `headerAction`.\n     *\n     * @private\n     * @type {null|PhysicalIndexToValueMap}\n     */\n    _defineProperty(this, \"columnMetaCache\", null);\n    /**\n     * Main settings key designed for the plugin.\n     *\n     * @private\n     * @type {string}\n     */\n    _defineProperty(this, \"pluginKey\", PLUGIN_KEY);\n    /**\n     * Plugin indexes cache.\n     *\n     * @private\n     * @type {null|IndexesSequence}\n     */\n    _defineProperty(this, \"indexesSequenceCache\", null);\n  }\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  /**\n   * Checks if the plugin is enabled in the Handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link ColumnSorting#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return !!this.hot.getSettings()[this.pluginKey];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    var _this = this;\n    if (this.enabled) {\n      return;\n    }\n    this.columnStatesManager = new ColumnStatesManager(this.hot, `${this.pluginKey}.sortingStates`);\n    this.columnMetaCache = new IndexToValueMap(physicalIndex => {\n      let visualIndex = this.hot.toVisualColumn(physicalIndex);\n      if (visualIndex === null) {\n        visualIndex = physicalIndex;\n      }\n      return this.getMergedPluginSettings(visualIndex);\n    });\n    this.hot.columnIndexMapper.registerMap(`${this.pluginKey}.columnMeta`, this.columnMetaCache);\n    this.addHook('afterGetColHeader', (column, TH) => _assertClassBrand(_ColumnSorting_brand, this, _onAfterGetColHeader).call(this, column, TH));\n    this.addHook('beforeOnCellMouseDown', function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return _assertClassBrand(_ColumnSorting_brand, _this, _onBeforeOnCellMouseDown).call(_this, ...args);\n    });\n    this.addHook('afterOnCellMouseDown', (event, target) => this.onAfterOnCellMouseDown(event, target));\n    this.addHook('afterInit', () => _assertClassBrand(_ColumnSorting_brand, this, _loadOrSortBySettings).call(this));\n    this.addHook('afterLoadData', function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      return _assertClassBrand(_ColumnSorting_brand, _this, _onAfterLoadData).call(_this, ...args);\n    });\n\n    // TODO: Workaround? It should be refactored / described.\n    if (this.hot.view) {\n      _assertClassBrand(_ColumnSorting_brand, this, _loadOrSortBySettings).call(this);\n    }\n    this.registerShortcuts();\n    super.enablePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    const clearColHeader = (column, TH) => {\n      const headerSpanElement = getHeaderSpanElement(TH);\n      if (isFirstLevelColumnHeader(column, TH) === false || headerSpanElement === null) {\n        return;\n      }\n      this.updateHeaderClasses(headerSpanElement);\n    };\n\n    // Changing header width and removing indicator.\n    this.hot.addHook('afterGetColHeader', clearColHeader);\n    this.hot.addHookOnce('afterViewRender', () => {\n      this.hot.removeHook('afterGetColHeader', clearColHeader);\n    });\n    this.hot.batchExecution(() => {\n      if (this.indexesSequenceCache !== null) {\n        this.hot.rowIndexMapper.setIndexesSequence(this.indexesSequenceCache.getValues());\n        this.hot.rowIndexMapper.unregisterMap(this.pluginKey);\n        this.indexesSequenceCache = null;\n      }\n    }, true);\n    this.hot.columnIndexMapper.unregisterMap(`${this.pluginKey}.columnMeta`);\n    this.columnStatesManager.destroy();\n    this.columnMetaCache = null;\n    this.columnStatesManager = null;\n    this.unregisterShortcuts();\n    super.disablePlugin();\n  }\n\n  /**\n   * Register shortcuts responsible for toggling column sorting functionality.\n   *\n   * @private\n   */\n  registerShortcuts() {\n    this.hot.getShortcutManager().getContext('grid').addShortcut({\n      keys: [['Enter']],\n      callback: () => {\n        const {\n          highlight\n        } = this.hot.getSelectedRangeLast();\n        this.sort(this.getColumnNextConfig(highlight.col));\n\n        // prevent default Enter behavior (move to the next row within a selection range)\n        return false;\n      },\n      runOnlyIf: () => {\n        var _this$hot$getSelected, _this$hot$getSelected2;\n        const highlight = (_this$hot$getSelected = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected === void 0 ? void 0 : _this$hot$getSelected.highlight;\n        return highlight && ((_this$hot$getSelected2 = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected2 === void 0 ? void 0 : _this$hot$getSelected2.isSingle()) && this.hot.selection.isCellVisible(highlight) && highlight.row === -1 && highlight.col >= 0;\n      },\n      relativeToGroup: SHORTCUTS_GROUP_EDITOR,\n      position: 'before',\n      group: SHORTCUTS_GROUP\n    });\n  }\n\n  /**\n   * Unregister shortcuts responsible for toggling column sorting functionality.\n   *\n   * @private\n   */\n  unregisterShortcuts() {\n    this.hot.getShortcutManager().getContext('grid').removeShortcutsByGroup(SHORTCUTS_GROUP);\n  }\n\n  // DIFF - MultiColumnSorting & ColumnSorting: changed function documentation.\n  /**\n   * Sorts the table by chosen columns and orders.\n   *\n   * @param {undefined|object} sortConfig Single column sort configuration. The configuration object contains `column` and `sortOrder` properties.\n   * First of them contains visual column index, the second one contains sort order (`asc` for ascending, `desc` for descending).\n   *\n   * **Note**: Please keep in mind that every call of `sort` function set an entirely new sort order. Previous sort configs aren't preserved.\n   *\n   * @example\n   * ```js\n   * // sort ascending first visual column\n   * hot.getPlugin('columnSorting').sort({ column: 0, sortOrder: 'asc' });\n   * ```\n   *\n   * @fires Hooks#beforeColumnSort\n   * @fires Hooks#afterColumnSort\n   */\n  sort(sortConfig) {\n    const currentSortConfig = this.getSortConfig();\n\n    // We always pass configs defined as an array to `beforeColumnSort` and `afterColumnSort` hooks.\n    const destinationSortConfigs = this.getNormalizedSortConfigs(sortConfig);\n    const sortPossible = this.areValidSortConfigs(destinationSortConfigs);\n    const allowSort = this.hot.runHooks('beforeColumnSort', currentSortConfig, destinationSortConfigs, sortPossible);\n    if (allowSort === false) {\n      return;\n    }\n    if (currentSortConfig.length === 0 && this.indexesSequenceCache === null) {\n      this.indexesSequenceCache = this.hot.rowIndexMapper.registerMap(this.pluginKey, new IndexesSequence());\n      this.indexesSequenceCache.setValues(this.hot.rowIndexMapper.getIndexesSequence());\n    }\n    if (sortPossible) {\n      this.columnStatesManager.setSortStates(destinationSortConfigs);\n      this.sortByPresetSortStates(destinationSortConfigs);\n      this.saveAllSortSettings(destinationSortConfigs);\n    }\n    this.hot.runHooks('afterColumnSort', currentSortConfig, sortPossible ? destinationSortConfigs : currentSortConfig, sortPossible);\n    if (sortPossible) {\n      this.hot.render();\n      // TODO: Workaround? This triggers fast redraw. One test won't pass after removal.\n      // It should be refactored / described.\n      this.hot.forceFullRender = false;\n      this.hot.view.render();\n    }\n  }\n\n  /**\n   * Clear the sort performed on the table.\n   */\n  clearSort() {\n    this.sort([]);\n  }\n\n  /**\n   * Checks if the table is sorted (any column have to be sorted).\n   *\n   * @returns {boolean}\n   */\n  isSorted() {\n    return this.enabled && !this.columnStatesManager.isListOfSortedColumnsEmpty();\n  }\n\n  /**\n   * Get sort configuration for particular column or for all sorted columns. Objects contain `column` and `sortOrder` properties.\n   *\n   * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key. They are handled by the `sort` function.\n   *\n   * @param {number} [column] Visual column index.\n   * @returns {undefined|object|Array}\n   */\n  getSortConfig(column) {\n    if (isDefined(column)) {\n      return this.columnStatesManager.getColumnSortState(column);\n    }\n    return this.columnStatesManager.getSortStates();\n  }\n\n  /**\n   * @description\n   * Warn: Useful mainly for providing server side sort implementation (see in the example below). It doesn't sort the data set. It just sets sort configuration for all sorted columns.\n   * Note: Please keep in mind that this method doesn't re-render the table.\n   *\n   * @example\n   * ```js\n   * beforeColumnSort: function(currentSortConfig, destinationSortConfigs) {\n   *   const columnSortPlugin = this.getPlugin('columnSorting');\n   *\n   *   columnSortPlugin.setSortConfig(destinationSortConfigs);\n   *\n   *   // const newData = ... // Calculated data set, ie. from an AJAX call.\n   *\n   *   this.loadData(newData); // Load new data set and re-render the table.\n   *\n   *   return false; // The blockade for the default sort action.\n   * }\n   * ```\n   *\n   * @param {undefined|object|Array} sortConfig Single column sort configuration or full sort configuration (for all sorted columns).\n   * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains\n   * sort order (`asc` for ascending, `desc` for descending).\n   */\n  setSortConfig(sortConfig) {\n    // We always set configs defined as an array.\n    const destinationSortConfigs = this.getNormalizedSortConfigs(sortConfig);\n    if (this.areValidSortConfigs(destinationSortConfigs)) {\n      this.columnStatesManager.setSortStates(destinationSortConfigs);\n    }\n  }\n\n  /**\n   * Get normalized sort configs.\n   *\n   * @private\n   * @param {object|Array} [sortConfig=[]] Single column sort configuration or full sort configuration (for all sorted columns).\n   * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains\n   * sort order (`asc` for ascending, `desc` for descending).\n   * @returns {Array}\n   */\n  getNormalizedSortConfigs() {\n    let sortConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    if (Array.isArray(sortConfig)) {\n      return sortConfig.slice(0, 1);\n    }\n    return [sortConfig];\n  }\n\n  /**\n   * Get if sort configs are valid.\n   *\n   * @private\n   * @param {Array} sortConfigs Sort configuration for all sorted columns. Objects contain `column` and `sortOrder` properties.\n   * @returns {boolean}\n   */\n  areValidSortConfigs(sortConfigs) {\n    const numberOfColumns = this.hot.countCols();\n\n    // We don't translate visual indexes to physical indexes.\n    return areValidSortStates(sortConfigs) && sortConfigs.every(_ref => {\n      let {\n        column\n      } = _ref;\n      return column <= numberOfColumns && column >= 0;\n    });\n  }\n\n  /**\n   * Saves all sorting settings. Saving works only when {@link Options#persistentState} option is enabled.\n   *\n   * @param {Array} sortConfigs Sort configuration for all sorted columns. Objects contain `column` and `sortOrder` properties.\n   *\n   * @private\n   * @fires Hooks#persistentStateSave\n   */\n  saveAllSortSettings(sortConfigs) {\n    const allSortSettings = this.columnStatesManager.getAllColumnsProperties();\n    const translateColumnToPhysical = _ref2 => {\n      let {\n        column: visualColumn,\n        ...restOfProperties\n      } = _ref2;\n      return {\n        column: this.hot.toPhysicalColumn(visualColumn),\n        ...restOfProperties\n      };\n    };\n    allSortSettings.initialConfig = arrayMap(sortConfigs, translateColumnToPhysical);\n    this.hot.runHooks('persistentStateSave', 'columnSorting', allSortSettings);\n  }\n\n  /**\n   * Get all saved sorting settings. Loading works only when {@link Options#persistentState} option is enabled.\n   *\n   * @private\n   * @returns {object} Previously saved sort settings.\n   *\n   * @fires Hooks#persistentStateLoad\n   */\n  getAllSavedSortSettings() {\n    const storedAllSortSettings = {};\n    this.hot.runHooks('persistentStateLoad', 'columnSorting', storedAllSortSettings);\n    const allSortSettings = storedAllSortSettings.value;\n    const translateColumnToVisual = _ref3 => {\n      let {\n        column: physicalColumn,\n        ...restOfProperties\n      } = _ref3;\n      return {\n        column: this.hot.toVisualColumn(physicalColumn),\n        ...restOfProperties\n      };\n    };\n    if (isDefined(allSortSettings) && Array.isArray(allSortSettings.initialConfig)) {\n      allSortSettings.initialConfig = arrayMap(allSortSettings.initialConfig, translateColumnToVisual);\n    }\n    return allSortSettings;\n  }\n\n  /**\n   * Get next sort configuration for particular column. Object contain `column` and `sortOrder` properties.\n   *\n   * **Note**: Please keep in mind that returned object expose **visual** column index under the `column` key.\n   *\n   * @private\n   * @param {number} column Visual column index.\n   * @returns {undefined|object}\n   */\n  getColumnNextConfig(column) {\n    const sortOrder = this.columnStatesManager.getSortOrderOfColumn(column);\n    if (isDefined(sortOrder)) {\n      const nextSortOrder = getNextSortOrder(sortOrder);\n      if (isDefined(nextSortOrder)) {\n        return {\n          column,\n          sortOrder: nextSortOrder\n        };\n      }\n      return;\n    }\n    const nrOfColumns = this.hot.countCols();\n    if (Number.isInteger(column) && column >= 0 && column < nrOfColumns) {\n      return {\n        column,\n        sortOrder: getNextSortOrder()\n      };\n    }\n  }\n\n  /**\n   * Get sort configuration with \"next order\" for particular column.\n   *\n   * @private\n   * @param {number} columnToChange Visual column index of column which order will be changed.\n   * @param {string} strategyId ID of strategy. Possible values: 'append' and 'replace'. The first one\n   * change order of particular column and change it's position in the sort queue to the last one. The second one\n   * just change order of particular column.\n   *\n   * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key.\n   *\n   * @returns {Array}\n   */\n  getNextSortConfig(columnToChange) {\n    let strategyId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : APPEND_COLUMN_CONFIG_STRATEGY;\n    const indexOfColumnToChange = this.columnStatesManager.getIndexOfColumnInSortQueue(columnToChange);\n    const isColumnSorted = indexOfColumnToChange !== -1;\n    const currentSortConfig = this.getSortConfig();\n    const nextColumnConfig = this.getColumnNextConfig(columnToChange);\n    if (isColumnSorted) {\n      if (isUndefined(nextColumnConfig)) {\n        return [...currentSortConfig.slice(0, indexOfColumnToChange), ...currentSortConfig.slice(indexOfColumnToChange + 1)];\n      }\n      if (strategyId === APPEND_COLUMN_CONFIG_STRATEGY) {\n        return [...currentSortConfig.slice(0, indexOfColumnToChange), ...currentSortConfig.slice(indexOfColumnToChange + 1), nextColumnConfig];\n      } else if (strategyId === REPLACE_COLUMN_CONFIG_STRATEGY) {\n        return [...currentSortConfig.slice(0, indexOfColumnToChange), nextColumnConfig, ...currentSortConfig.slice(indexOfColumnToChange + 1)];\n      }\n    }\n    if (isDefined(nextColumnConfig)) {\n      return currentSortConfig.concat(nextColumnConfig);\n    }\n    return currentSortConfig;\n  }\n\n  /**\n   * Get plugin's column config for the specified column index.\n   *\n   * @private\n   * @param {object} columnConfig Configuration inside `columns` property for the specified column index.\n   * @returns {object}\n   */\n  getPluginColumnConfig(columnConfig) {\n    if (isObject(columnConfig)) {\n      const pluginColumnConfig = columnConfig[this.pluginKey];\n      if (isObject(pluginColumnConfig)) {\n        return pluginColumnConfig;\n      }\n    }\n    return {};\n  }\n\n  /**\n   * Get plugin settings related properties, properly merged from cascade settings.\n   *\n   * @private\n   * @param {number} column Visual column index.\n   * @returns {object}\n   */\n  getMergedPluginSettings(column) {\n    const pluginMainSettings = this.hot.getSettings()[this.pluginKey];\n    const storedColumnProperties = this.columnStatesManager.getAllColumnsProperties();\n    const cellMeta = this.hot.getCellMeta(0, column);\n    const columnMeta = Object.getPrototypeOf(cellMeta);\n    if (Array.isArray(columnMeta.columns)) {\n      return Object.assign(storedColumnProperties, pluginMainSettings, this.getPluginColumnConfig(columnMeta.columns[column]));\n    } else if (isFunction(columnMeta.columns)) {\n      return Object.assign(storedColumnProperties, pluginMainSettings, this.getPluginColumnConfig(columnMeta.columns(column)));\n    }\n    return Object.assign(storedColumnProperties, pluginMainSettings);\n  }\n\n  /**\n   * Get copy of settings for first cell in the column.\n   *\n   * @private\n   * @param {number} column Visual column index.\n   * @returns {object}\n   */\n  // TODO: Workaround. Inheriting of non-primitive cell meta values doesn't work. Instead of getting properties from column meta we call this function.\n  // TODO: Remove test named: \"should not break the dataset when inserted new row\" (#5431).\n  getFirstCellSettings(column) {\n    const cellMeta = this.hot.getCellMeta(0, column);\n    const cellMetaCopy = Object.create(cellMeta);\n    cellMetaCopy[this.pluginKey] = this.columnMetaCache.getValueAtIndex(this.hot.toPhysicalColumn(column));\n    return cellMetaCopy;\n  }\n\n  /**\n   * Get number of rows which should be sorted.\n   *\n   * @private\n   * @param {number} numberOfRows Total number of displayed rows.\n   * @returns {number}\n   */\n  getNumberOfRowsToSort(numberOfRows) {\n    const settings = this.hot.getSettings();\n\n    // `maxRows` option doesn't take into account `minSpareRows` option in this case.\n    if (settings.maxRows <= numberOfRows) {\n      return settings.maxRows;\n    }\n    return numberOfRows - settings.minSpareRows;\n  }\n\n  /**\n   * Performs the sorting using a stable sort function basing on internal state of sorting.\n   *\n   * @param {Array} sortConfigs Sort configuration for all sorted columns. Objects contain `column` and `sortOrder` properties.\n   * @private\n   */\n  sortByPresetSortStates(sortConfigs) {\n    this.hot.rowIndexMapper.setIndexesSequence(this.indexesSequenceCache.getValues());\n    if (sortConfigs.length === 0) {\n      return;\n    }\n    const indexesWithData = [];\n    const numberOfRows = this.hot.countRows();\n    const getDataForSortedColumns = visualRowIndex => arrayMap(sortConfigs, sortConfig => this.hot.getDataAtCell(visualRowIndex, sortConfig.column));\n    for (let visualRowIndex = 0; visualRowIndex < this.getNumberOfRowsToSort(numberOfRows); visualRowIndex += 1) {\n      indexesWithData.push([this.hot.toPhysicalRow(visualRowIndex)].concat(getDataForSortedColumns(visualRowIndex)));\n    }\n    const indexesBefore = arrayMap(indexesWithData, indexWithData => indexWithData[0]);\n    sort(indexesWithData, this.pluginKey, arrayMap(sortConfigs, sortConfig => sortConfig.sortOrder), arrayMap(sortConfigs, sortConfig => this.getFirstCellSettings(sortConfig.column)));\n\n    // Append spareRows\n    for (let visualRowIndex = indexesWithData.length; visualRowIndex < numberOfRows; visualRowIndex += 1) {\n      indexesWithData.push([visualRowIndex].concat(getDataForSortedColumns(visualRowIndex)));\n    }\n    const indexesAfter = arrayMap(indexesWithData, indexWithData => indexWithData[0]);\n    const indexMapping = new Map(arrayMap(indexesBefore, (indexBefore, indexInsideArray) => [indexBefore, indexesAfter[indexInsideArray]]));\n    const newIndexesSequence = arrayMap(this.hot.rowIndexMapper.getIndexesSequence(), physicalIndex => {\n      if (indexMapping.has(physicalIndex)) {\n        return indexMapping.get(physicalIndex);\n      }\n      return physicalIndex;\n    });\n    this.hot.rowIndexMapper.setIndexesSequence(newIndexesSequence);\n  }\n  /**\n   * Sort the table by provided configuration.\n   *\n   * @private\n   * @param {object} allSortSettings All sort config settings. Object may contain `initialConfig`, `indicator`,\n   * `sortEmptyCells`, `headerAction` and `compareFunctionFactory` properties.\n   */\n  sortBySettings(allSortSettings) {\n    if (isObject(allSortSettings)) {\n      this.columnStatesManager.updateAllColumnsProperties(allSortSettings);\n      const initialConfig = allSortSettings.initialConfig;\n      if (Array.isArray(initialConfig) || isObject(initialConfig)) {\n        this.sort(initialConfig);\n      }\n    } else {\n      // Extra render for headers. Their width may change.\n      this.hot.render();\n    }\n  }\n\n  /**\n   * Callback for the `onAfterGetColHeader` hook. Adds column sorting CSS classes.\n   *\n   * @param {number} column Visual column index.\n   * @param {Element} TH TH HTML element.\n   */\n\n  /**\n   * Update header classes.\n   *\n   * @private\n   * @param {HTMLElement} headerSpanElement Header span element.\n   * @param {...*} args Extra arguments for helpers.\n   */\n  updateHeaderClasses(headerSpanElement) {\n    removeClass(headerSpanElement, getClassesToRemove(headerSpanElement));\n    if (this.enabled !== false) {\n      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n        args[_key3 - 1] = arguments[_key3];\n      }\n      addClass(headerSpanElement, getClassesToAdd(...args));\n    }\n  }\n\n  /**\n   * Overwriting base plugin's `onUpdateSettings` method. Please keep in mind that `onAfterUpdateSettings` isn't called\n   * for `updateSettings` in specific situations.\n   *\n   * @private\n   * @param {object} newSettings New settings object.\n   */\n  onUpdateSettings(newSettings) {\n    super.onUpdateSettings();\n    if (this.columnMetaCache !== null) {\n      // Column meta cache base on settings, thus we should re-init the map.\n      this.columnMetaCache.init(this.hot.columnIndexMapper.getNumberOfIndexes());\n    }\n    if (isDefined(newSettings[this.pluginKey])) {\n      this.sortBySettings(newSettings[this.pluginKey]);\n    }\n  }\n\n  /**\n   * Callback for the `afterLoadData` hook.\n   *\n   * @param {boolean} initialLoad Flag that determines whether the data has been loaded during the initialization.\n   */\n\n  /**\n   * Indicates if clickable header was clicked.\n   *\n   * @private\n   * @param {MouseEvent} event The `mousedown` event.\n   * @param {number} column Visual column index.\n   * @returns {boolean}\n   */\n  wasClickableHeaderClicked(event, column) {\n    const pluginSettingsForColumn = this.getFirstCellSettings(column)[this.pluginKey];\n    const headerActionEnabled = pluginSettingsForColumn.headerAction;\n    return headerActionEnabled && hasClass(event.target, HEADER_SPAN_CLASS);\n  }\n\n  /**\n   * Changes the behavior of selection / dragging.\n   *\n   * @param {MouseEvent} event The `mousedown` event.\n   * @param {CellCoords} coords Visual coordinates.\n   * @param {HTMLElement} TD The cell element.\n   * @param {object} controller An object with properties `row`, `column` and `cell`. Each property contains\n   *                            a boolean value that allows or disallows changing the selection for that particular area.\n   */\n\n  /**\n   * Callback for the `onAfterOnCellMouseDown` hook.\n   *\n   * @private\n   * @param {Event} event Event which are provided by hook.\n   * @param {CellCoords} coords Visual coords of the selected cell.\n   */\n  onAfterOnCellMouseDown(event, coords) {\n    if (wasHeaderClickedProperly(coords.row, coords.col, event) === false) {\n      return;\n    }\n    if (this.wasClickableHeaderClicked(event, coords.col)) {\n      if (this.hot.getShortcutManager().isCtrlPressed()) {\n        this.hot.deselectCell();\n        this.hot.selectColumns(coords.col);\n      }\n      this.sort(this.getColumnNextConfig(coords.col));\n    }\n  }\n\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    var _this$columnStatesMan;\n    // TODO: Probably not supported yet by ESLint: https://github.com/eslint/eslint/issues/11045\n    // eslint-disable-next-line no-unused-expressions\n    (_this$columnStatesMan = this.columnStatesManager) === null || _this$columnStatesMan === void 0 || _this$columnStatesMan.destroy();\n    super.destroy();\n  }\n}\nfunction _loadOrSortBySettings() {\n  const storedAllSortSettings = this.getAllSavedSortSettings();\n  if (isObject(storedAllSortSettings)) {\n    this.sortBySettings(storedAllSortSettings);\n  } else {\n    const allSortSettings = this.hot.getSettings()[this.pluginKey];\n    this.sortBySettings(allSortSettings);\n  }\n}\nfunction _onAfterGetColHeader(column, TH) {\n  const headerSpanElement = getHeaderSpanElement(TH);\n  if (isFirstLevelColumnHeader(column, TH) === false || headerSpanElement === null) {\n    return;\n  }\n  const pluginSettingsForColumn = this.getFirstCellSettings(column)[this.pluginKey];\n  const showSortIndicator = pluginSettingsForColumn.indicator;\n  const headerActionEnabled = pluginSettingsForColumn.headerAction;\n  this.updateHeaderClasses(headerSpanElement, this.columnStatesManager, column, showSortIndicator, headerActionEnabled);\n  if (this.hot.getSettings().ariaTags) {\n    const currentSortState = this.columnStatesManager.getSortOrderOfColumn(column);\n    setAttribute(TH, ...A11Y_SORT(currentSortState ? `${currentSortState}ending` : 'none'));\n  }\n}\nfunction _onAfterLoadData(initialLoad) {\n  if (initialLoad === true) {\n    // TODO: Workaround? It should be refactored / described.\n    if (this.hot.view) {\n      _assertClassBrand(_ColumnSorting_brand, this, _loadOrSortBySettings).call(this);\n    }\n  }\n}\nfunction _onBeforeOnCellMouseDown(event, coords, TD, controller) {\n  if (wasHeaderClickedProperly(coords.row, coords.col, event) === false) {\n    return;\n  }\n  if (this.wasClickableHeaderClicked(event, coords.col) && this.hot.getShortcutManager().isCtrlPressed()) {\n    controller.column = true;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}