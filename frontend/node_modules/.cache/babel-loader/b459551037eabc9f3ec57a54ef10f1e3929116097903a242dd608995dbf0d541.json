{"ast":null,"code":"import { arrayReduce } from \"./array.mjs\";\nimport { isDefined } from \"./mixed.mjs\";\n/**\n * Checks if given variable is function.\n *\n * @param {*} func Variable to check.\n * @returns {boolean}\n */\nexport function isFunction(func) {\n  return typeof func === 'function';\n}\n\n/**\n * Creates throttle function that enforces a maximum number of times a function (`func`) can be called over time (`wait`).\n *\n * @param {Function} func Function to invoke.\n * @param {number} wait Delay in miliseconds.\n * @returns {Function}\n */\nexport function throttle(func) {\n  let wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;\n  let lastCalled = 0;\n  const result = {\n    lastCallThrottled: true\n  };\n  let lastTimer = null;\n\n  /**\n   * @param {...*} args The list of arguments passed during the function invocation.\n   * @returns {object}\n   */\n  function _throttle() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    const stamp = Date.now();\n    let needCall = false;\n    result.lastCallThrottled = true;\n    if (!lastCalled) {\n      lastCalled = stamp;\n      needCall = true;\n    }\n    const remaining = wait - (stamp - lastCalled);\n    if (needCall) {\n      result.lastCallThrottled = false;\n      func.apply(this, args);\n    } else {\n      if (lastTimer) {\n        clearTimeout(lastTimer);\n      }\n      lastTimer = setTimeout(() => {\n        result.lastCallThrottled = false;\n        func.apply(this, args);\n        lastCalled = 0;\n        lastTimer = undefined;\n      }, remaining);\n    }\n    return result;\n  }\n  return _throttle;\n}\n\n/**\n * Creates throttle function that enforces a maximum number of times a function (`func`) can be called over\n * time (`wait`) after specified hits.\n *\n * @param {Function} func Function to invoke.\n * @param {number} wait Delay in miliseconds.\n * @param {number} hits Number of hits after throttling will be applied.\n * @returns {Function}\n */\nexport function throttleAfterHits(func) {\n  let wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;\n  let hits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\n  const funcThrottle = throttle(func, wait);\n  let remainHits = hits;\n\n  /**\n   *\n   */\n  function _clearHits() {\n    remainHits = hits;\n  }\n  /**\n   * @param {*} args The list of arguments passed during the function invocation.\n   * @returns {*}\n   */\n  function _throttleAfterHits() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    if (remainHits) {\n      remainHits -= 1;\n      return func.apply(this, args);\n    }\n    return funcThrottle.apply(this, args);\n  }\n  _throttleAfterHits.clearHits = _clearHits;\n  return _throttleAfterHits;\n}\n\n/**\n * Creates debounce function that enforces a function (`func`) not be called again until a certain amount of time (`wait`)\n * has passed without it being called.\n *\n * @param {Function} func Function to invoke.\n * @param {number} wait Delay in milliseconds.\n * @returns {Function}\n */\nexport function debounce(func) {\n  let wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;\n  let lastTimer = null;\n  let result;\n\n  /**\n   * @param {*} args The list of arguments passed during the function invocation.\n   * @returns {*}\n   */\n  function _debounce() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    if (lastTimer) {\n      clearTimeout(lastTimer);\n    }\n    lastTimer = setTimeout(() => {\n      result = func.apply(this, args);\n    }, wait);\n    return result;\n  }\n  return _debounce;\n}\n\n/**\n * Creates the function that returns the result of calling the given functions. Result of the first function is passed to\n * the second as an argument and so on. Only first function in the chain can handle multiple arguments.\n *\n * @param {Function} functions Functions to compose.\n * @returns {Function}\n */\nexport function pipe() {\n  for (var _len4 = arguments.length, functions = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    functions[_key4] = arguments[_key4];\n  }\n  const [firstFunc, ...restFunc] = functions;\n  return function _pipe() {\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n    return arrayReduce(restFunc, (acc, fn) => fn(acc), firstFunc.apply(this, args));\n  };\n}\n\n/**\n * Creates the function that returns the function with cached arguments.\n *\n * @param {Function} func Function to partialization.\n * @param {Array} params Function arguments to cache.\n * @returns {Function}\n */\nexport function partial(func) {\n  for (var _len6 = arguments.length, params = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n    params[_key6 - 1] = arguments[_key6];\n  }\n  return function _partial() {\n    for (var _len7 = arguments.length, restParams = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      restParams[_key7] = arguments[_key7];\n    }\n    return func.apply(this, params.concat(restParams));\n  };\n}\n\n/**\n * Creates the functions that returns the function with cached arguments. If count if passed arguments will be matched\n * to the arguments defined in `func` then function will be invoked.\n * Arguments are added to the stack in direction from the left to the right.\n *\n * @example\n * ```\n * var replace = curry(function(find, replace, string) {\n *   return string.replace(find, replace);\n * });\n *\n * // returns function with bounded first argument\n * var replace = replace('foo')\n *\n * // returns replaced string - all arguments was passed so function was invoked\n * replace('bar', 'Some test with foo...');\n *\n * ```\n *\n * @param {Function} func Function to currying.\n * @returns {Function}\n */\nexport function curry(func) {\n  const argsLength = func.length;\n\n  /**\n   * @param {*} argsSoFar The list of arguments passed during the function invocation.\n   * @returns {Function}\n   */\n  function given(argsSoFar) {\n    return function _curry() {\n      for (var _len8 = arguments.length, params = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n        params[_key8] = arguments[_key8];\n      }\n      const passedArgsSoFar = argsSoFar.concat(params);\n      let result;\n      if (passedArgsSoFar.length >= argsLength) {\n        result = func.apply(this, passedArgsSoFar);\n      } else {\n        result = given(passedArgsSoFar);\n      }\n      return result;\n    };\n  }\n  return given([]);\n}\n\n/**\n * Creates the functions that returns the function with cached arguments. If count if passed arguments will be matched\n * to the arguments defined in `func` then function will be invoked.\n * Arguments are added to the stack in direction from the right to the left.\n *\n * @example\n * ```\n * var replace = curry(function(find, replace, string) {\n *   return string.replace(find, replace);\n * });\n *\n * // returns function with bounded first argument\n * var replace = replace('Some test with foo...')\n *\n * // returns replaced string - all arguments was passed so function was invoked\n * replace('bar', 'foo');\n *\n * ```\n *\n * @param {Function} func Function to currying.\n * @returns {Function}\n */\nexport function curryRight(func) {\n  const argsLength = func.length;\n\n  /**\n   * @param {*} argsSoFar The list of arguments passed during the function invocation.\n   * @returns {Function}\n   */\n  function given(argsSoFar) {\n    return function _curry() {\n      for (var _len9 = arguments.length, params = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n        params[_key9] = arguments[_key9];\n      }\n      const passedArgsSoFar = argsSoFar.concat(params.reverse());\n      let result;\n      if (passedArgsSoFar.length >= argsLength) {\n        result = func.apply(this, passedArgsSoFar);\n      } else {\n        result = given(passedArgsSoFar);\n      }\n      return result;\n    };\n  }\n  return given([]);\n}\n\n/**\n * Calls a function in the quickest way available.\n *\n * In contrast to the `apply()` method that passes arguments as an array,\n * the `call()` method passes arguments directly, to avoid garbage collection costs.\n *\n * @param {Function} func The function to call.\n * @param {*} context The value to use as `this` when calling the `func` function.\n * @param {*} [arg1] An argument passed to the `func` function.\n * @param {*} [arg2] An argument passed to `func` function.\n * @param {*} [arg3] An argument passed to `func` function.\n * @param {*} [arg4] An argument passed to `func` function.\n * @param {*} [arg5] An argument passed to `func` function.\n * @param {*} [arg6] An argument passed to `func` function.\n * @returns {*}\n */\nexport function fastCall(func, context, arg1, arg2, arg3, arg4, arg5, arg6) {\n  if (isDefined(arg6)) {\n    return func.call(context, arg1, arg2, arg3, arg4, arg5, arg6);\n  } else if (isDefined(arg5)) {\n    return func.call(context, arg1, arg2, arg3, arg4, arg5);\n  } else if (isDefined(arg4)) {\n    return func.call(context, arg1, arg2, arg3, arg4);\n  } else if (isDefined(arg3)) {\n    return func.call(context, arg1, arg2, arg3);\n  } else if (isDefined(arg2)) {\n    return func.call(context, arg1, arg2);\n  } else if (isDefined(arg1)) {\n    return func.call(context, arg1);\n  }\n  return func.call(context);\n}","map":{"version":3,"names":["arrayReduce","isDefined","isFunction","func","throttle","wait","arguments","length","undefined","lastCalled","result","lastCallThrottled","lastTimer","_throttle","_len","args","Array","_key","stamp","Date","now","needCall","remaining","apply","clearTimeout","setTimeout","throttleAfterHits","hits","funcThrottle","remainHits","_clearHits","_throttleAfterHits","_len2","_key2","clearHits","debounce","_debounce","_len3","_key3","pipe","_len4","functions","_key4","firstFunc","restFunc","_pipe","_len5","_key5","acc","fn","partial","_len6","params","_key6","_partial","_len7","restParams","_key7","concat","curry","argsLength","given","argsSoFar","_curry","_len8","_key8","passedArgsSoFar","curryRight","_len9","_key9","reverse","fastCall","context","arg1","arg2","arg3","arg4","arg5","arg6","call"],"sources":["D:/gym-project/frontend/node_modules/handsontable/helpers/function.mjs"],"sourcesContent":["import { arrayReduce } from \"./array.mjs\";\nimport { isDefined } from \"./mixed.mjs\";\n/**\n * Checks if given variable is function.\n *\n * @param {*} func Variable to check.\n * @returns {boolean}\n */\nexport function isFunction(func) {\n  return typeof func === 'function';\n}\n\n/**\n * Creates throttle function that enforces a maximum number of times a function (`func`) can be called over time (`wait`).\n *\n * @param {Function} func Function to invoke.\n * @param {number} wait Delay in miliseconds.\n * @returns {Function}\n */\nexport function throttle(func) {\n  let wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;\n  let lastCalled = 0;\n  const result = {\n    lastCallThrottled: true\n  };\n  let lastTimer = null;\n\n  /**\n   * @param {...*} args The list of arguments passed during the function invocation.\n   * @returns {object}\n   */\n  function _throttle() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    const stamp = Date.now();\n    let needCall = false;\n    result.lastCallThrottled = true;\n    if (!lastCalled) {\n      lastCalled = stamp;\n      needCall = true;\n    }\n    const remaining = wait - (stamp - lastCalled);\n    if (needCall) {\n      result.lastCallThrottled = false;\n      func.apply(this, args);\n    } else {\n      if (lastTimer) {\n        clearTimeout(lastTimer);\n      }\n      lastTimer = setTimeout(() => {\n        result.lastCallThrottled = false;\n        func.apply(this, args);\n        lastCalled = 0;\n        lastTimer = undefined;\n      }, remaining);\n    }\n    return result;\n  }\n  return _throttle;\n}\n\n/**\n * Creates throttle function that enforces a maximum number of times a function (`func`) can be called over\n * time (`wait`) after specified hits.\n *\n * @param {Function} func Function to invoke.\n * @param {number} wait Delay in miliseconds.\n * @param {number} hits Number of hits after throttling will be applied.\n * @returns {Function}\n */\nexport function throttleAfterHits(func) {\n  let wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;\n  let hits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\n  const funcThrottle = throttle(func, wait);\n  let remainHits = hits;\n\n  /**\n   *\n   */\n  function _clearHits() {\n    remainHits = hits;\n  }\n  /**\n   * @param {*} args The list of arguments passed during the function invocation.\n   * @returns {*}\n   */\n  function _throttleAfterHits() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    if (remainHits) {\n      remainHits -= 1;\n      return func.apply(this, args);\n    }\n    return funcThrottle.apply(this, args);\n  }\n  _throttleAfterHits.clearHits = _clearHits;\n  return _throttleAfterHits;\n}\n\n/**\n * Creates debounce function that enforces a function (`func`) not be called again until a certain amount of time (`wait`)\n * has passed without it being called.\n *\n * @param {Function} func Function to invoke.\n * @param {number} wait Delay in milliseconds.\n * @returns {Function}\n */\nexport function debounce(func) {\n  let wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;\n  let lastTimer = null;\n  let result;\n\n  /**\n   * @param {*} args The list of arguments passed during the function invocation.\n   * @returns {*}\n   */\n  function _debounce() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    if (lastTimer) {\n      clearTimeout(lastTimer);\n    }\n    lastTimer = setTimeout(() => {\n      result = func.apply(this, args);\n    }, wait);\n    return result;\n  }\n  return _debounce;\n}\n\n/**\n * Creates the function that returns the result of calling the given functions. Result of the first function is passed to\n * the second as an argument and so on. Only first function in the chain can handle multiple arguments.\n *\n * @param {Function} functions Functions to compose.\n * @returns {Function}\n */\nexport function pipe() {\n  for (var _len4 = arguments.length, functions = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    functions[_key4] = arguments[_key4];\n  }\n  const [firstFunc, ...restFunc] = functions;\n  return function _pipe() {\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n    return arrayReduce(restFunc, (acc, fn) => fn(acc), firstFunc.apply(this, args));\n  };\n}\n\n/**\n * Creates the function that returns the function with cached arguments.\n *\n * @param {Function} func Function to partialization.\n * @param {Array} params Function arguments to cache.\n * @returns {Function}\n */\nexport function partial(func) {\n  for (var _len6 = arguments.length, params = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n    params[_key6 - 1] = arguments[_key6];\n  }\n  return function _partial() {\n    for (var _len7 = arguments.length, restParams = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      restParams[_key7] = arguments[_key7];\n    }\n    return func.apply(this, params.concat(restParams));\n  };\n}\n\n/**\n * Creates the functions that returns the function with cached arguments. If count if passed arguments will be matched\n * to the arguments defined in `func` then function will be invoked.\n * Arguments are added to the stack in direction from the left to the right.\n *\n * @example\n * ```\n * var replace = curry(function(find, replace, string) {\n *   return string.replace(find, replace);\n * });\n *\n * // returns function with bounded first argument\n * var replace = replace('foo')\n *\n * // returns replaced string - all arguments was passed so function was invoked\n * replace('bar', 'Some test with foo...');\n *\n * ```\n *\n * @param {Function} func Function to currying.\n * @returns {Function}\n */\nexport function curry(func) {\n  const argsLength = func.length;\n\n  /**\n   * @param {*} argsSoFar The list of arguments passed during the function invocation.\n   * @returns {Function}\n   */\n  function given(argsSoFar) {\n    return function _curry() {\n      for (var _len8 = arguments.length, params = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n        params[_key8] = arguments[_key8];\n      }\n      const passedArgsSoFar = argsSoFar.concat(params);\n      let result;\n      if (passedArgsSoFar.length >= argsLength) {\n        result = func.apply(this, passedArgsSoFar);\n      } else {\n        result = given(passedArgsSoFar);\n      }\n      return result;\n    };\n  }\n  return given([]);\n}\n\n/**\n * Creates the functions that returns the function with cached arguments. If count if passed arguments will be matched\n * to the arguments defined in `func` then function will be invoked.\n * Arguments are added to the stack in direction from the right to the left.\n *\n * @example\n * ```\n * var replace = curry(function(find, replace, string) {\n *   return string.replace(find, replace);\n * });\n *\n * // returns function with bounded first argument\n * var replace = replace('Some test with foo...')\n *\n * // returns replaced string - all arguments was passed so function was invoked\n * replace('bar', 'foo');\n *\n * ```\n *\n * @param {Function} func Function to currying.\n * @returns {Function}\n */\nexport function curryRight(func) {\n  const argsLength = func.length;\n\n  /**\n   * @param {*} argsSoFar The list of arguments passed during the function invocation.\n   * @returns {Function}\n   */\n  function given(argsSoFar) {\n    return function _curry() {\n      for (var _len9 = arguments.length, params = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n        params[_key9] = arguments[_key9];\n      }\n      const passedArgsSoFar = argsSoFar.concat(params.reverse());\n      let result;\n      if (passedArgsSoFar.length >= argsLength) {\n        result = func.apply(this, passedArgsSoFar);\n      } else {\n        result = given(passedArgsSoFar);\n      }\n      return result;\n    };\n  }\n  return given([]);\n}\n\n/**\n * Calls a function in the quickest way available.\n *\n * In contrast to the `apply()` method that passes arguments as an array,\n * the `call()` method passes arguments directly, to avoid garbage collection costs.\n *\n * @param {Function} func The function to call.\n * @param {*} context The value to use as `this` when calling the `func` function.\n * @param {*} [arg1] An argument passed to the `func` function.\n * @param {*} [arg2] An argument passed to `func` function.\n * @param {*} [arg3] An argument passed to `func` function.\n * @param {*} [arg4] An argument passed to `func` function.\n * @param {*} [arg5] An argument passed to `func` function.\n * @param {*} [arg6] An argument passed to `func` function.\n * @returns {*}\n */\nexport function fastCall(func, context, arg1, arg2, arg3, arg4, arg5, arg6) {\n  if (isDefined(arg6)) {\n    return func.call(context, arg1, arg2, arg3, arg4, arg5, arg6);\n  } else if (isDefined(arg5)) {\n    return func.call(context, arg1, arg2, arg3, arg4, arg5);\n  } else if (isDefined(arg4)) {\n    return func.call(context, arg1, arg2, arg3, arg4);\n  } else if (isDefined(arg3)) {\n    return func.call(context, arg1, arg2, arg3);\n  } else if (isDefined(arg2)) {\n    return func.call(context, arg1, arg2);\n  } else if (isDefined(arg1)) {\n    return func.call(context, arg1);\n  }\n  return func.call(context);\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}