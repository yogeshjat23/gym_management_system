{"ast":null,"code":"export const command = {\n  name: 'moveCellSelectionUpByViewportHight',\n  callback(hot) {\n    const {\n      navigableHeaders\n    } = hot.getSettings();\n    const columnHeadersCount = navigableHeaders ? hot.countColHeaders() : 0;\n    const {\n      row\n    } = hot.getSelectedRangeLast().highlight;\n    let rowsStep = -(hot.countVisibleRows() + columnHeadersCount);\n\n    // if the first row is currently selected move the focus to the last row (if autoWrap is enabled)\n    if (row === -columnHeadersCount) {\n      rowsStep = -1;\n\n      // if the next move would move the focus off the table calculate the delta to move the selection to\n      // the first row\n    } else if (row + rowsStep < columnHeadersCount) {\n      rowsStep = -(row + columnHeadersCount);\n    }\n    hot.selection.transformStart(rowsStep, 0);\n    if (hot.getSelectedRangeLast().highlight.row < 0) {\n      hot.scrollViewportTo({\n        row: 0\n      });\n    }\n  }\n};","map":{"version":3,"names":["command","name","callback","hot","navigableHeaders","getSettings","columnHeadersCount","countColHeaders","row","getSelectedRangeLast","highlight","rowsStep","countVisibleRows","selection","transformStart","scrollViewportTo"],"sources":["D:/gym-project/frontend/node_modules/handsontable/shortcutContexts/commands/moveCellSelection/upByViewportHeight.mjs"],"sourcesContent":["export const command = {\n  name: 'moveCellSelectionUpByViewportHight',\n  callback(hot) {\n    const {\n      navigableHeaders\n    } = hot.getSettings();\n    const columnHeadersCount = navigableHeaders ? hot.countColHeaders() : 0;\n    const {\n      row\n    } = hot.getSelectedRangeLast().highlight;\n    let rowsStep = -(hot.countVisibleRows() + columnHeadersCount);\n\n    // if the first row is currently selected move the focus to the last row (if autoWrap is enabled)\n    if (row === -columnHeadersCount) {\n      rowsStep = -1;\n\n      // if the next move would move the focus off the table calculate the delta to move the selection to\n      // the first row\n    } else if (row + rowsStep < columnHeadersCount) {\n      rowsStep = -(row + columnHeadersCount);\n    }\n    hot.selection.transformStart(rowsStep, 0);\n    if (hot.getSelectedRangeLast().highlight.row < 0) {\n      hot.scrollViewportTo({\n        row: 0\n      });\n    }\n  }\n};"],"mappings":"AAAA,OAAO,MAAMA,OAAO,GAAG;EACrBC,IAAI,EAAE,oCAAoC;EAC1CC,QAAQA,CAACC,GAAG,EAAE;IACZ,MAAM;MACJC;IACF,CAAC,GAAGD,GAAG,CAACE,WAAW,CAAC,CAAC;IACrB,MAAMC,kBAAkB,GAAGF,gBAAgB,GAAGD,GAAG,CAACI,eAAe,CAAC,CAAC,GAAG,CAAC;IACvE,MAAM;MACJC;IACF,CAAC,GAAGL,GAAG,CAACM,oBAAoB,CAAC,CAAC,CAACC,SAAS;IACxC,IAAIC,QAAQ,GAAG,EAAER,GAAG,CAACS,gBAAgB,CAAC,CAAC,GAAGN,kBAAkB,CAAC;;IAE7D;IACA,IAAIE,GAAG,KAAK,CAACF,kBAAkB,EAAE;MAC/BK,QAAQ,GAAG,CAAC,CAAC;;MAEb;MACA;IACF,CAAC,MAAM,IAAIH,GAAG,GAAGG,QAAQ,GAAGL,kBAAkB,EAAE;MAC9CK,QAAQ,GAAG,EAAEH,GAAG,GAAGF,kBAAkB,CAAC;IACxC;IACAH,GAAG,CAACU,SAAS,CAACC,cAAc,CAACH,QAAQ,EAAE,CAAC,CAAC;IACzC,IAAIR,GAAG,CAACM,oBAAoB,CAAC,CAAC,CAACC,SAAS,CAACF,GAAG,GAAG,CAAC,EAAE;MAChDL,GAAG,CAACY,gBAAgB,CAAC;QACnBP,GAAG,EAAE;MACP,CAAC,CAAC;IACJ;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}