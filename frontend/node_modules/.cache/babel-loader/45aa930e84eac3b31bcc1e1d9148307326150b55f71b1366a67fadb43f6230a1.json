{"ast":null,"code":"import * as C from \"../../../i18n/constants.mjs\";\nimport { registerOperation } from \"../logicalOperationRegisterer.mjs\";\nexport const OPERATION_ID = 'disjunction';\nexport const SHORT_NAME_FOR_COMPONENT = C.FILTERS_LABELS_DISJUNCTION;\n// (p OR q OR w OR x OR...) === TRUE?\n\n/**\n * @param {Array} conditions An array with values to check.\n * @param {*} value The comparable value.\n * @returns {boolean}\n */\nexport function operationResult(conditions, value) {\n  return conditions.some(condition => condition.func(value));\n}\nregisterOperation(OPERATION_ID, SHORT_NAME_FOR_COMPONENT, operationResult);","map":{"version":3,"names":["C","registerOperation","OPERATION_ID","SHORT_NAME_FOR_COMPONENT","FILTERS_LABELS_DISJUNCTION","operationResult","conditions","value","some","condition","func"],"sources":["D:/gym-project/frontend/node_modules/handsontable/plugins/filters/logicalOperations/disjunction.mjs"],"sourcesContent":["import * as C from \"../../../i18n/constants.mjs\";\nimport { registerOperation } from \"../logicalOperationRegisterer.mjs\";\nexport const OPERATION_ID = 'disjunction';\nexport const SHORT_NAME_FOR_COMPONENT = C.FILTERS_LABELS_DISJUNCTION;\n// (p OR q OR w OR x OR...) === TRUE?\n\n/**\n * @param {Array} conditions An array with values to check.\n * @param {*} value The comparable value.\n * @returns {boolean}\n */\nexport function operationResult(conditions, value) {\n  return conditions.some(condition => condition.func(value));\n}\nregisterOperation(OPERATION_ID, SHORT_NAME_FOR_COMPONENT, operationResult);"],"mappings":"AAAA,OAAO,KAAKA,CAAC,MAAM,6BAA6B;AAChD,SAASC,iBAAiB,QAAQ,mCAAmC;AACrE,OAAO,MAAMC,YAAY,GAAG,aAAa;AACzC,OAAO,MAAMC,wBAAwB,GAAGH,CAAC,CAACI,0BAA0B;AACpE;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAeA,CAACC,UAAU,EAAEC,KAAK,EAAE;EACjD,OAAOD,UAAU,CAACE,IAAI,CAACC,SAAS,IAAIA,SAAS,CAACC,IAAI,CAACH,KAAK,CAAC,CAAC;AAC5D;AACAN,iBAAiB,CAACC,YAAY,EAAEC,wBAAwB,EAAEE,eAAe,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}