{"ast":null,"code":"import * as C from \"../../../i18n/constants.mjs\";\nimport { registerCondition, getCondition } from \"../conditionRegisterer.mjs\";\nimport { CONDITION_NAME as CONDITION_DATE_AFTER } from \"./date/after.mjs\";\nimport { CONDITION_NAME as CONDITION_DATE_BEFORE } from \"./date/before.mjs\";\nexport const CONDITION_NAME = 'between';\n\n/**\n * @param {object} dataRow The object which holds and describes the single cell value.\n * @param {Array} inputValues An array of values to compare with.\n * @param {number} inputValues.\"0\" The minimum value of the range.\n * @param {number} inputValues.\"1\" The maximum value of the range.\n * @returns {boolean}\n */\nexport function condition(dataRow, _ref) {\n  let [from, to] = _ref;\n  let fromValue = from;\n  let toValue = to;\n  if (dataRow.meta.type === 'numeric') {\n    const _from = parseFloat(fromValue, 10);\n    const _to = parseFloat(toValue, 10);\n    fromValue = Math.min(_from, _to);\n    toValue = Math.max(_from, _to);\n  } else if (dataRow.meta.type === 'date') {\n    const dateBefore = getCondition(CONDITION_DATE_BEFORE, [toValue]);\n    const dateAfter = getCondition(CONDITION_DATE_AFTER, [fromValue]);\n    return dateBefore(dataRow) && dateAfter(dataRow);\n  }\n  return dataRow.value >= fromValue && dataRow.value <= toValue;\n}\nregisterCondition(CONDITION_NAME, condition, {\n  name: C.FILTERS_CONDITIONS_BETWEEN,\n  inputsCount: 2,\n  showOperators: true\n});","map":{"version":3,"names":["C","registerCondition","getCondition","CONDITION_NAME","CONDITION_DATE_AFTER","CONDITION_DATE_BEFORE","condition","dataRow","_ref","from","to","fromValue","toValue","meta","type","_from","parseFloat","_to","Math","min","max","dateBefore","dateAfter","value","name","FILTERS_CONDITIONS_BETWEEN","inputsCount","showOperators"],"sources":["D:/gym-project/frontend/node_modules/handsontable/plugins/filters/condition/between.mjs"],"sourcesContent":["import * as C from \"../../../i18n/constants.mjs\";\nimport { registerCondition, getCondition } from \"../conditionRegisterer.mjs\";\nimport { CONDITION_NAME as CONDITION_DATE_AFTER } from \"./date/after.mjs\";\nimport { CONDITION_NAME as CONDITION_DATE_BEFORE } from \"./date/before.mjs\";\nexport const CONDITION_NAME = 'between';\n\n/**\n * @param {object} dataRow The object which holds and describes the single cell value.\n * @param {Array} inputValues An array of values to compare with.\n * @param {number} inputValues.\"0\" The minimum value of the range.\n * @param {number} inputValues.\"1\" The maximum value of the range.\n * @returns {boolean}\n */\nexport function condition(dataRow, _ref) {\n  let [from, to] = _ref;\n  let fromValue = from;\n  let toValue = to;\n  if (dataRow.meta.type === 'numeric') {\n    const _from = parseFloat(fromValue, 10);\n    const _to = parseFloat(toValue, 10);\n    fromValue = Math.min(_from, _to);\n    toValue = Math.max(_from, _to);\n  } else if (dataRow.meta.type === 'date') {\n    const dateBefore = getCondition(CONDITION_DATE_BEFORE, [toValue]);\n    const dateAfter = getCondition(CONDITION_DATE_AFTER, [fromValue]);\n    return dateBefore(dataRow) && dateAfter(dataRow);\n  }\n  return dataRow.value >= fromValue && dataRow.value <= toValue;\n}\nregisterCondition(CONDITION_NAME, condition, {\n  name: C.FILTERS_CONDITIONS_BETWEEN,\n  inputsCount: 2,\n  showOperators: true\n});"],"mappings":"AAAA,OAAO,KAAKA,CAAC,MAAM,6BAA6B;AAChD,SAASC,iBAAiB,EAAEC,YAAY,QAAQ,4BAA4B;AAC5E,SAASC,cAAc,IAAIC,oBAAoB,QAAQ,kBAAkB;AACzE,SAASD,cAAc,IAAIE,qBAAqB,QAAQ,mBAAmB;AAC3E,OAAO,MAAMF,cAAc,GAAG,SAAS;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,SAASA,CAACC,OAAO,EAAEC,IAAI,EAAE;EACvC,IAAI,CAACC,IAAI,EAAEC,EAAE,CAAC,GAAGF,IAAI;EACrB,IAAIG,SAAS,GAAGF,IAAI;EACpB,IAAIG,OAAO,GAAGF,EAAE;EAChB,IAAIH,OAAO,CAACM,IAAI,CAACC,IAAI,KAAK,SAAS,EAAE;IACnC,MAAMC,KAAK,GAAGC,UAAU,CAACL,SAAS,EAAE,EAAE,CAAC;IACvC,MAAMM,GAAG,GAAGD,UAAU,CAACJ,OAAO,EAAE,EAAE,CAAC;IACnCD,SAAS,GAAGO,IAAI,CAACC,GAAG,CAACJ,KAAK,EAAEE,GAAG,CAAC;IAChCL,OAAO,GAAGM,IAAI,CAACE,GAAG,CAACL,KAAK,EAAEE,GAAG,CAAC;EAChC,CAAC,MAAM,IAAIV,OAAO,CAACM,IAAI,CAACC,IAAI,KAAK,MAAM,EAAE;IACvC,MAAMO,UAAU,GAAGnB,YAAY,CAACG,qBAAqB,EAAE,CAACO,OAAO,CAAC,CAAC;IACjE,MAAMU,SAAS,GAAGpB,YAAY,CAACE,oBAAoB,EAAE,CAACO,SAAS,CAAC,CAAC;IACjE,OAAOU,UAAU,CAACd,OAAO,CAAC,IAAIe,SAAS,CAACf,OAAO,CAAC;EAClD;EACA,OAAOA,OAAO,CAACgB,KAAK,IAAIZ,SAAS,IAAIJ,OAAO,CAACgB,KAAK,IAAIX,OAAO;AAC/D;AACAX,iBAAiB,CAACE,cAAc,EAAEG,SAAS,EAAE;EAC3CkB,IAAI,EAAExB,CAAC,CAACyB,0BAA0B;EAClCC,WAAW,EAAE,CAAC;EACdC,aAAa,EAAE;AACjB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}