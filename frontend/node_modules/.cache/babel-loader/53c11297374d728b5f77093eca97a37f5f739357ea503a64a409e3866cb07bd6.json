{"ast":null,"code":"function _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport { fastInnerText } from \"../../../helpers/dom/element.mjs\";\nimport { objectEach } from \"../../../helpers/object.mjs\";\n/**\n * @todo Describe options.\n * @typedef SettingsPure\n *\n * @property {Option} facade @todo desc.\n * @property {Option} ariaTags Option `ariaTags`.\n * @property {Option} cellRenderer Option `cellRenderer`.\n * @property {Option} columnHeaders Option `columnHeaders`.\n * @property {Option} columnWidth Option `columnWidth`.\n * @property {Option} currentRowClassName Option `currentRowClassName`.\n * @property {Option} data Option `data`.\n * @property {Option} defaultColumnWidth Option `defaultColumnWidth`.\n * @property {Option} defaultRowHeight Option `defaultRowHeight`.\n * @property {Option} externalRowCalculator Option `externalRowCalculator`.\n * @property {Option} fixedColumnsStart Option `fixedColumnsStart`.\n * @property {Option} fixedRowsBottom Option `fixedRowsBottom`.\n * @property {Option} fixedRowsTop Option `fixedRowsTop`.\n * @property {Option} freezeOverlays Option `freezeOverlays`.\n * @property {Option} groups Option `groups`.\n * @property {Option} hideBorderOnMouseDownOver Option `hideBorderOnMouseDownOver`.\n * @property {Option} isRtl Option `isRtl`.\n * @property {Option} isDataViewInstance Option `isDataViewInstance`.\n * @property {Option} minSpareRows Option `minSpareRows`.\n * @property {Option} onBeforeHighlightingColumnHeader Option `onBeforeHighlightingColumnHeader`.\n * @property {Option} onBeforeHighlightingRowHeader Option `onBeforeHighlightingRowHeader`.\n * @property {Option} onBeforeRemoveCellClassNames Option `onBeforeRemoveCellClassNames`.\n * @property {Option} onBeforeStretchingColumnWidth Option `onBeforeStretchingColumnWidth`.\n * @property {Option} preventOverflow Option `preventOverflow`.\n * @property {Option} preventWheel Option `preventWheel`.\n * @property {Option} renderAllColumns Option `renderAllColumns`.\n * @property {Option} renderAllRows Option `renderAllRows`.\n * @property {Option} rowHeaders Option `rowHeaders`.\n * @property {Option} rowHeightOption `rowHeight`.\n * @property {Option} rowHeightByOverlayName Option `rowHeightByOverlayName`.\n * @property {Option} shouldRenderBottomOverlay Option `shouldRenderBottomOverlay`.\n * @property {Option} shouldRenderInlineStartOverlay Option `shouldRenderInlineStartOverlay`.\n * @property {Option} shouldRenderTopOverlay Option `shouldRenderTopOverlay`.\n * @property {Option} stretchH Option `stretchH`.\n * @property {Option} table Option `table`.\n * @property {Option} totalColumns Option `totalColumns`.\n * @property {Option} totalRows Option `totalRows`.\n * @property {?Option} beforeDraw Option `beforeDraw`.\n * @property {?Option} columnHeaderHeight Option `columnHeaderHeight`.\n * @property {?Option} currentColumnClassName Option `currentColumnClassName`.\n * @property {?Option} headerClassName Option `headerClassName`.\n * @property {?Option} onAfterDrawSelection Option `onAfterDrawSelection`.\n * @property {?Option} onAfterMomentumScroll Option `onAfterMomentumScroll`.\n * @property {?Option} onBeforeDrawBorders Option `onBeforeDrawBorders`.\n * @property {?Option} onBeforeTouchScroll Option `onBeforeTouchScroll`.\n * @property {?Option} onCellContextMenu Option `onCellContextMenu`.\n * @property {?Option} onCellCornerDblClick Option `onCellCornerDblClick`.\n * @property {?Option} onCellCornerMouseDown Option `onCellCornerMouseDown`.\n * @property {?Option} onCellDblClick Option `onCellDblClick`.\n * @property {?Option} onCellMouseDown Option `onCellMouseDown`.\n * @property {?Option} onCellMouseOut Option `onCellMouseOut`.\n * @property {?Option} onCellMouseOver Option `onCellMouseOver`.\n * @property {?Option} onCellMouseUp Option `onCellMouseUp`.\n * @property {?Option} onDraw Option `onDraw`.\n * @property {?Option} onModifyGetCellCoords Option `onModifyGetCellCoords`.\n * @property {?Option} onModifyRowHeaderWidth Option `onModifyRowHeaderWidth`.\n * @property {?Option} onBeforeViewportScrollHorizontally Option `onBeforeViewportScrollHorizontally`.\n * @property {?Option} onBeforeViewportScrollVertically Option `onBeforeViewportScrollVertically`.\n * @property {?Option} onScrollHorizontally Option `onScrollHorizontally`.\n * @property {?Option} onScrollVertically Option `onScrollVertically`.\n * @property {?Option} onWindowResize Option `onWindowResize`.\n * @property {?Option} rowHeaderWidth Option `rowHeaderWidth`.\n * @property {?Option} selections Option `selections`.\n * @property {?Option} viewportColumnCalculatorOverride Option `viewportColumnCalculatorOverride`.\n * @property {?Option} viewportRowCalculatorOverride Option `viewportRowCalculatorOverride`.\n */\n/**\n * @template TValue.\n * @typedef { TValue | Array.<TValue> | (function(...*): TValue) } Option\n */\n/**\n * @class Settings\n */\nexport default class Settings {\n  /**\n   * @param {SettingsPure} settings The user defined settings.\n   */\n  constructor(settings) {\n    /**\n     * Reference to settings.\n     *\n     * @protected\n     * @type {SettingsPure}\n     */\n    _defineProperty(this, \"settings\", {});\n    /**\n     * The defaults values of settings.\n     * Void 0 means it is required, null means it can be empty.\n     *\n     * @public\n     * @type {Readonly<SettingsPure>}\n     */\n    _defineProperty(this, \"defaults\", Object.freeze(this.getDefaults()));\n    objectEach(this.defaults, (value, key) => {\n      if (settings[key] !== undefined) {\n        this.settings[key] = settings[key];\n      } else if (value === undefined) {\n        throw new Error(`A required setting \"${key}\" was not provided`);\n      } else {\n        this.settings[key] = value;\n      }\n    });\n  }\n\n  /**\n   * Generate defaults for a settings.\n   * Void 0 means it is required, null means it can be empty.\n   *\n   * @private\n   * @returns {SettingsPure}\n   */\n  getDefaults() {\n    return {\n      facade: undefined,\n      table: undefined,\n      // Determines whether the Walkontable instance is used as dataset viewer. When its instance is used as\n      // a context menu, autocomplete list, etc, the returned value is `false`.\n      isDataViewInstance: true,\n      // presentation mode\n      externalRowCalculator: false,\n      stretchH: 'none',\n      // values: all, last, none\n      currentRowClassName: null,\n      currentColumnClassName: null,\n      preventOverflow() {\n        return false;\n      },\n      preventWheel: false,\n      // data source\n      data: undefined,\n      freezeOverlays: false,\n      // Number of renderable columns for the left overlay.\n      fixedColumnsStart: 0,\n      // Number of renderable rows for the top overlay.\n      fixedRowsTop: 0,\n      // Number of renderable rows for the bottom overlay.\n      fixedRowsBottom: 0,\n      // Enable the inline start overlay when conditions are met (left for LTR and right for RTL document mode).\n      shouldRenderInlineStartOverlay: () => {\n        return this.getSetting('fixedColumnsStart') > 0 || this.getSetting('rowHeaders').length > 0;\n      },\n      // Enable the top overlay when conditions are met.\n      shouldRenderTopOverlay: () => {\n        return this.getSetting('fixedRowsTop') > 0 || this.getSetting('columnHeaders').length > 0;\n      },\n      // Enable the bottom overlay when conditions are met.\n      shouldRenderBottomOverlay: () => {\n        return this.getSetting('fixedRowsBottom') > 0;\n      },\n      minSpareRows: 0,\n      // this must be array of functions: [function (row, TH) {}]\n      rowHeaders() {\n        return [];\n      },\n      // this must be array of functions: [function (column, TH) {}]\n      columnHeaders() {\n        return [];\n      },\n      totalRows: undefined,\n      totalColumns: undefined,\n      cellRenderer: (row, column, TD) => {\n        const cellData = this.getSetting('data', row, column);\n        fastInnerText(TD, cellData === undefined || cellData === null ? '' : cellData);\n      },\n      // columnWidth: 50,\n      columnWidth() {\n        // return undefined means use default size for the rendered cell content\n      },\n      rowHeight() {\n        // return undefined means use default size for the rendered cell content\n      },\n      rowHeightByOverlayName() {\n        // return undefined means use default size for the rendered cell content\n      },\n      defaultRowHeight: 23,\n      defaultColumnWidth: 50,\n      selections: null,\n      hideBorderOnMouseDownOver: false,\n      viewportRowCalculatorOverride: null,\n      viewportColumnCalculatorOverride: null,\n      // callbacks\n      onCellMouseDown: null,\n      onCellContextMenu: null,\n      onCellMouseOver: null,\n      onCellMouseOut: null,\n      onCellMouseUp: null,\n      // onCellMouseOut: null,\n      onCellDblClick: null,\n      onCellCornerMouseDown: null,\n      onCellCornerDblClick: null,\n      beforeDraw: null,\n      onDraw: null,\n      onBeforeRemoveCellClassNames: null,\n      onAfterDrawSelection: null,\n      onBeforeDrawBorders: null,\n      // viewport scroll hooks\n      onBeforeViewportScrollHorizontally: column => column,\n      onBeforeViewportScrollVertically: row => row,\n      // native scroll hooks\n      onScrollHorizontally: null,\n      onScrollVertically: null,\n      //\n      onBeforeTouchScroll: null,\n      onAfterMomentumScroll: null,\n      onBeforeStretchingColumnWidth: width => width,\n      onModifyRowHeaderWidth: null,\n      onModifyGetCellCoords: null,\n      onBeforeHighlightingRowHeader: sourceRow => sourceRow,\n      onBeforeHighlightingColumnHeader: sourceCol => sourceCol,\n      onWindowResize: null,\n      onContainerElementResize: null,\n      renderAllColumns: false,\n      renderAllRows: false,\n      groups: false,\n      rowHeaderWidth: null,\n      columnHeaderHeight: null,\n      headerClassName: null,\n      rtlMode: false,\n      ariaTags: true\n    };\n  }\n\n  /**\n   * Update settings.\n   *\n   * @param {object|string} settings The singular settings to update or if passed as object to merge with.\n   * @param {*} value The value to set if the first argument is passed as string.\n   * @returns {Settings}\n   */\n  update(settings, value) {\n    if (value === undefined) {\n      // settings is object\n      objectEach(settings, (settingValue, key) => {\n        this.settings[key] = settingValue;\n      });\n    } else {\n      // if value is defined then settings is the key\n      this.settings[settings] = value;\n    }\n    return this;\n  }\n\n  /**\n   * Get setting by name.\n   *\n   * @param {$Keys<SettingsPure>} key The settings key to retrieve.\n   * @param {*} [param1] Additional parameter passed to the options defined as function.\n   * @param {*} [param2] Additional parameter passed to the options defined as function.\n   * @param {*} [param3] Additional parameter passed to the options defined as function.\n   * @param {*} [param4] Additional parameter passed to the options defined as function.\n   * @returns {*}\n   */\n  getSetting(key, param1, param2, param3, param4) {\n    if (typeof this.settings[key] === 'function') {\n      return this.settings[key](param1, param2, param3, param4);\n    } else if (param1 !== undefined && Array.isArray(this.settings[key])) {\n      return this.settings[key][param1];\n    }\n    return this.settings[key];\n  }\n\n  /**\n   * Get a setting value without any evaluation.\n   *\n   * @param {string} key The settings key to retrieve.\n   * @returns {*}\n   */\n  getSettingPure(key) {\n    return this.settings[key];\n  }\n\n  /**\n   * Checks if setting exists.\n   *\n   * @param {boolean} key The settings key to check.\n   * @returns {boolean}\n   */\n  has(key) {\n    return !!this.settings[key];\n  }\n}","map":{"version":3,"names":["_defineProperty","e","r","t","_toPropertyKey","Object","defineProperty","value","enumerable","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","fastInnerText","objectEach","Settings","constructor","settings","freeze","getDefaults","defaults","key","undefined","Error","facade","table","isDataViewInstance","externalRowCalculator","stretchH","currentRowClassName","currentColumnClassName","preventOverflow","preventWheel","data","freezeOverlays","fixedColumnsStart","fixedRowsTop","fixedRowsBottom","shouldRenderInlineStartOverlay","getSetting","length","shouldRenderTopOverlay","shouldRenderBottomOverlay","minSpareRows","rowHeaders","columnHeaders","totalRows","totalColumns","cellRenderer","row","column","TD","cellData","columnWidth","rowHeight","rowHeightByOverlayName","defaultRowHeight","defaultColumnWidth","selections","hideBorderOnMouseDownOver","viewportRowCalculatorOverride","viewportColumnCalculatorOverride","onCellMouseDown","onCellContextMenu","onCellMouseOver","onCellMouseOut","onCellMouseUp","onCellDblClick","onCellCornerMouseDown","onCellCornerDblClick","beforeDraw","onDraw","onBeforeRemoveCellClassNames","onAfterDrawSelection","onBeforeDrawBorders","onBeforeViewportScrollHorizontally","onBeforeViewportScrollVertically","onScrollHorizontally","onScrollVertically","onBeforeTouchScroll","onAfterMomentumScroll","onBeforeStretchingColumnWidth","width","onModifyRowHeaderWidth","onModifyGetCellCoords","onBeforeHighlightingRowHeader","sourceRow","onBeforeHighlightingColumnHeader","sourceCol","onWindowResize","onContainerElementResize","renderAllColumns","renderAllRows","groups","rowHeaderWidth","columnHeaderHeight","headerClassName","rtlMode","ariaTags","update","settingValue","param1","param2","param3","param4","Array","isArray","getSettingPure","has"],"sources":["D:/gym-project/frontend/node_modules/handsontable/3rdparty/walkontable/src/settings.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport { fastInnerText } from \"../../../helpers/dom/element.mjs\";\nimport { objectEach } from \"../../../helpers/object.mjs\";\n/**\n * @todo Describe options.\n * @typedef SettingsPure\n *\n * @property {Option} facade @todo desc.\n * @property {Option} ariaTags Option `ariaTags`.\n * @property {Option} cellRenderer Option `cellRenderer`.\n * @property {Option} columnHeaders Option `columnHeaders`.\n * @property {Option} columnWidth Option `columnWidth`.\n * @property {Option} currentRowClassName Option `currentRowClassName`.\n * @property {Option} data Option `data`.\n * @property {Option} defaultColumnWidth Option `defaultColumnWidth`.\n * @property {Option} defaultRowHeight Option `defaultRowHeight`.\n * @property {Option} externalRowCalculator Option `externalRowCalculator`.\n * @property {Option} fixedColumnsStart Option `fixedColumnsStart`.\n * @property {Option} fixedRowsBottom Option `fixedRowsBottom`.\n * @property {Option} fixedRowsTop Option `fixedRowsTop`.\n * @property {Option} freezeOverlays Option `freezeOverlays`.\n * @property {Option} groups Option `groups`.\n * @property {Option} hideBorderOnMouseDownOver Option `hideBorderOnMouseDownOver`.\n * @property {Option} isRtl Option `isRtl`.\n * @property {Option} isDataViewInstance Option `isDataViewInstance`.\n * @property {Option} minSpareRows Option `minSpareRows`.\n * @property {Option} onBeforeHighlightingColumnHeader Option `onBeforeHighlightingColumnHeader`.\n * @property {Option} onBeforeHighlightingRowHeader Option `onBeforeHighlightingRowHeader`.\n * @property {Option} onBeforeRemoveCellClassNames Option `onBeforeRemoveCellClassNames`.\n * @property {Option} onBeforeStretchingColumnWidth Option `onBeforeStretchingColumnWidth`.\n * @property {Option} preventOverflow Option `preventOverflow`.\n * @property {Option} preventWheel Option `preventWheel`.\n * @property {Option} renderAllColumns Option `renderAllColumns`.\n * @property {Option} renderAllRows Option `renderAllRows`.\n * @property {Option} rowHeaders Option `rowHeaders`.\n * @property {Option} rowHeightOption `rowHeight`.\n * @property {Option} rowHeightByOverlayName Option `rowHeightByOverlayName`.\n * @property {Option} shouldRenderBottomOverlay Option `shouldRenderBottomOverlay`.\n * @property {Option} shouldRenderInlineStartOverlay Option `shouldRenderInlineStartOverlay`.\n * @property {Option} shouldRenderTopOverlay Option `shouldRenderTopOverlay`.\n * @property {Option} stretchH Option `stretchH`.\n * @property {Option} table Option `table`.\n * @property {Option} totalColumns Option `totalColumns`.\n * @property {Option} totalRows Option `totalRows`.\n * @property {?Option} beforeDraw Option `beforeDraw`.\n * @property {?Option} columnHeaderHeight Option `columnHeaderHeight`.\n * @property {?Option} currentColumnClassName Option `currentColumnClassName`.\n * @property {?Option} headerClassName Option `headerClassName`.\n * @property {?Option} onAfterDrawSelection Option `onAfterDrawSelection`.\n * @property {?Option} onAfterMomentumScroll Option `onAfterMomentumScroll`.\n * @property {?Option} onBeforeDrawBorders Option `onBeforeDrawBorders`.\n * @property {?Option} onBeforeTouchScroll Option `onBeforeTouchScroll`.\n * @property {?Option} onCellContextMenu Option `onCellContextMenu`.\n * @property {?Option} onCellCornerDblClick Option `onCellCornerDblClick`.\n * @property {?Option} onCellCornerMouseDown Option `onCellCornerMouseDown`.\n * @property {?Option} onCellDblClick Option `onCellDblClick`.\n * @property {?Option} onCellMouseDown Option `onCellMouseDown`.\n * @property {?Option} onCellMouseOut Option `onCellMouseOut`.\n * @property {?Option} onCellMouseOver Option `onCellMouseOver`.\n * @property {?Option} onCellMouseUp Option `onCellMouseUp`.\n * @property {?Option} onDraw Option `onDraw`.\n * @property {?Option} onModifyGetCellCoords Option `onModifyGetCellCoords`.\n * @property {?Option} onModifyRowHeaderWidth Option `onModifyRowHeaderWidth`.\n * @property {?Option} onBeforeViewportScrollHorizontally Option `onBeforeViewportScrollHorizontally`.\n * @property {?Option} onBeforeViewportScrollVertically Option `onBeforeViewportScrollVertically`.\n * @property {?Option} onScrollHorizontally Option `onScrollHorizontally`.\n * @property {?Option} onScrollVertically Option `onScrollVertically`.\n * @property {?Option} onWindowResize Option `onWindowResize`.\n * @property {?Option} rowHeaderWidth Option `rowHeaderWidth`.\n * @property {?Option} selections Option `selections`.\n * @property {?Option} viewportColumnCalculatorOverride Option `viewportColumnCalculatorOverride`.\n * @property {?Option} viewportRowCalculatorOverride Option `viewportRowCalculatorOverride`.\n */\n/**\n * @template TValue.\n * @typedef { TValue | Array.<TValue> | (function(...*): TValue) } Option\n */\n/**\n * @class Settings\n */\nexport default class Settings {\n  /**\n   * @param {SettingsPure} settings The user defined settings.\n   */\n  constructor(settings) {\n    /**\n     * Reference to settings.\n     *\n     * @protected\n     * @type {SettingsPure}\n     */\n    _defineProperty(this, \"settings\", {});\n    /**\n     * The defaults values of settings.\n     * Void 0 means it is required, null means it can be empty.\n     *\n     * @public\n     * @type {Readonly<SettingsPure>}\n     */\n    _defineProperty(this, \"defaults\", Object.freeze(this.getDefaults()));\n    objectEach(this.defaults, (value, key) => {\n      if (settings[key] !== undefined) {\n        this.settings[key] = settings[key];\n      } else if (value === undefined) {\n        throw new Error(`A required setting \"${key}\" was not provided`);\n      } else {\n        this.settings[key] = value;\n      }\n    });\n  }\n\n  /**\n   * Generate defaults for a settings.\n   * Void 0 means it is required, null means it can be empty.\n   *\n   * @private\n   * @returns {SettingsPure}\n   */\n  getDefaults() {\n    return {\n      facade: undefined,\n      table: undefined,\n      // Determines whether the Walkontable instance is used as dataset viewer. When its instance is used as\n      // a context menu, autocomplete list, etc, the returned value is `false`.\n      isDataViewInstance: true,\n      // presentation mode\n      externalRowCalculator: false,\n      stretchH: 'none',\n      // values: all, last, none\n      currentRowClassName: null,\n      currentColumnClassName: null,\n      preventOverflow() {\n        return false;\n      },\n      preventWheel: false,\n      // data source\n      data: undefined,\n      freezeOverlays: false,\n      // Number of renderable columns for the left overlay.\n      fixedColumnsStart: 0,\n      // Number of renderable rows for the top overlay.\n      fixedRowsTop: 0,\n      // Number of renderable rows for the bottom overlay.\n      fixedRowsBottom: 0,\n      // Enable the inline start overlay when conditions are met (left for LTR and right for RTL document mode).\n      shouldRenderInlineStartOverlay: () => {\n        return this.getSetting('fixedColumnsStart') > 0 || this.getSetting('rowHeaders').length > 0;\n      },\n      // Enable the top overlay when conditions are met.\n      shouldRenderTopOverlay: () => {\n        return this.getSetting('fixedRowsTop') > 0 || this.getSetting('columnHeaders').length > 0;\n      },\n      // Enable the bottom overlay when conditions are met.\n      shouldRenderBottomOverlay: () => {\n        return this.getSetting('fixedRowsBottom') > 0;\n      },\n      minSpareRows: 0,\n      // this must be array of functions: [function (row, TH) {}]\n      rowHeaders() {\n        return [];\n      },\n      // this must be array of functions: [function (column, TH) {}]\n      columnHeaders() {\n        return [];\n      },\n      totalRows: undefined,\n      totalColumns: undefined,\n      cellRenderer: (row, column, TD) => {\n        const cellData = this.getSetting('data', row, column);\n        fastInnerText(TD, cellData === undefined || cellData === null ? '' : cellData);\n      },\n      // columnWidth: 50,\n      columnWidth() {\n        // return undefined means use default size for the rendered cell content\n      },\n      rowHeight() {\n        // return undefined means use default size for the rendered cell content\n      },\n      rowHeightByOverlayName() {\n        // return undefined means use default size for the rendered cell content\n      },\n      defaultRowHeight: 23,\n      defaultColumnWidth: 50,\n      selections: null,\n      hideBorderOnMouseDownOver: false,\n      viewportRowCalculatorOverride: null,\n      viewportColumnCalculatorOverride: null,\n      // callbacks\n      onCellMouseDown: null,\n      onCellContextMenu: null,\n      onCellMouseOver: null,\n      onCellMouseOut: null,\n      onCellMouseUp: null,\n      // onCellMouseOut: null,\n      onCellDblClick: null,\n      onCellCornerMouseDown: null,\n      onCellCornerDblClick: null,\n      beforeDraw: null,\n      onDraw: null,\n      onBeforeRemoveCellClassNames: null,\n      onAfterDrawSelection: null,\n      onBeforeDrawBorders: null,\n      // viewport scroll hooks\n      onBeforeViewportScrollHorizontally: column => column,\n      onBeforeViewportScrollVertically: row => row,\n      // native scroll hooks\n      onScrollHorizontally: null,\n      onScrollVertically: null,\n      //\n      onBeforeTouchScroll: null,\n      onAfterMomentumScroll: null,\n      onBeforeStretchingColumnWidth: width => width,\n      onModifyRowHeaderWidth: null,\n      onModifyGetCellCoords: null,\n      onBeforeHighlightingRowHeader: sourceRow => sourceRow,\n      onBeforeHighlightingColumnHeader: sourceCol => sourceCol,\n      onWindowResize: null,\n      onContainerElementResize: null,\n      renderAllColumns: false,\n      renderAllRows: false,\n      groups: false,\n      rowHeaderWidth: null,\n      columnHeaderHeight: null,\n      headerClassName: null,\n      rtlMode: false,\n      ariaTags: true\n    };\n  }\n\n  /**\n   * Update settings.\n   *\n   * @param {object|string} settings The singular settings to update or if passed as object to merge with.\n   * @param {*} value The value to set if the first argument is passed as string.\n   * @returns {Settings}\n   */\n  update(settings, value) {\n    if (value === undefined) {\n      // settings is object\n      objectEach(settings, (settingValue, key) => {\n        this.settings[key] = settingValue;\n      });\n    } else {\n      // if value is defined then settings is the key\n      this.settings[settings] = value;\n    }\n    return this;\n  }\n\n  /**\n   * Get setting by name.\n   *\n   * @param {$Keys<SettingsPure>} key The settings key to retrieve.\n   * @param {*} [param1] Additional parameter passed to the options defined as function.\n   * @param {*} [param2] Additional parameter passed to the options defined as function.\n   * @param {*} [param3] Additional parameter passed to the options defined as function.\n   * @param {*} [param4] Additional parameter passed to the options defined as function.\n   * @returns {*}\n   */\n  getSetting(key, param1, param2, param3, param4) {\n    if (typeof this.settings[key] === 'function') {\n      return this.settings[key](param1, param2, param3, param4);\n    } else if (param1 !== undefined && Array.isArray(this.settings[key])) {\n      return this.settings[key][param1];\n    }\n    return this.settings[key];\n  }\n\n  /**\n   * Get a setting value without any evaluation.\n   *\n   * @param {string} key The settings key to retrieve.\n   * @returns {*}\n   */\n  getSettingPure(key) {\n    return this.settings[key];\n  }\n\n  /**\n   * Checks if setting exists.\n   *\n   * @param {boolean} key The settings key to check.\n   * @returns {boolean}\n   */\n  has(key) {\n    return !!this.settings[key];\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}