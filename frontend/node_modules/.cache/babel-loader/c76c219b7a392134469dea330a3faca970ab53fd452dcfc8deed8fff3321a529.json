{"ast":null,"code":"import Core from \"./core.mjs\";\nimport { rootInstanceSymbol } from \"./utils/rootInstance.mjs\";\nimport { metaSchemaFactory } from \"./dataMap/index.mjs\";\nimport Hooks from \"./pluginHooks.mjs\"; // FIXME: Bug in eslint-plugin-import: https://github.com/benmosher/eslint-plugin-import/issues/1883\n/* eslint-disable import/named */\nimport { dictionaryKeys, getTranslatedPhrase, registerLanguageDictionary, getLanguagesDictionaries, getLanguageDictionary } from \"./i18n/registry.mjs\";\n/* eslint-enable import/named */\nimport { registerCellType } from \"./cellTypes/registry.mjs\";\nimport { TextCellType } from \"./cellTypes/textType/index.mjs\";\nimport { BaseEditor } from \"./editors/baseEditor/index.mjs\";\nimport { CellCoords, CellRange } from \"./3rdparty/walkontable/src/index.mjs\"; // register default mandatory cell type for the Base package\nregisterCellType(TextCellType);\n\n// export the `BaseEditor` class to the Handsontable global namespace\nHandsontable.editors = {\n  BaseEditor\n};\n\n/**\n * @param {HTMLElement} rootElement The element to which the Handsontable instance is injected.\n * @param {object} userSettings The user defined options.\n * @returns {Core}\n */\nfunction Handsontable(rootElement, userSettings) {\n  const instance = new Core(rootElement, userSettings || {}, rootInstanceSymbol);\n  instance.init();\n  return instance;\n}\nHandsontable.Core = function (rootElement) {\n  let userSettings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Core(rootElement, userSettings, rootInstanceSymbol);\n};\nHandsontable.DefaultSettings = metaSchemaFactory();\nHandsontable.hooks = Hooks.getSingleton();\nHandsontable.CellCoords = CellCoords;\nHandsontable.CellRange = CellRange;\nHandsontable.packageName = 'handsontable';\nHandsontable.buildDate = \"30/07/2024 11:21:58\";\nHandsontable.version = \"14.5.0\";\nHandsontable.languages = {\n  dictionaryKeys,\n  getLanguageDictionary,\n  getLanguagesDictionaries,\n  registerLanguageDictionary,\n  getTranslatedPhrase\n};\nexport { CellCoords, CellRange };\nexport default Handsontable;","map":{"version":3,"names":["Core","rootInstanceSymbol","metaSchemaFactory","Hooks","dictionaryKeys","getTranslatedPhrase","registerLanguageDictionary","getLanguagesDictionaries","getLanguageDictionary","registerCellType","TextCellType","BaseEditor","CellCoords","CellRange","Handsontable","editors","rootElement","userSettings","instance","init","arguments","length","undefined","DefaultSettings","hooks","getSingleton","packageName","buildDate","version","languages"],"sources":["D:/gym-project/frontend/node_modules/handsontable/base.mjs"],"sourcesContent":["import Core from \"./core.mjs\";\nimport { rootInstanceSymbol } from \"./utils/rootInstance.mjs\";\nimport { metaSchemaFactory } from \"./dataMap/index.mjs\";\nimport Hooks from \"./pluginHooks.mjs\"; // FIXME: Bug in eslint-plugin-import: https://github.com/benmosher/eslint-plugin-import/issues/1883\n/* eslint-disable import/named */\nimport { dictionaryKeys, getTranslatedPhrase, registerLanguageDictionary, getLanguagesDictionaries, getLanguageDictionary } from \"./i18n/registry.mjs\";\n/* eslint-enable import/named */\nimport { registerCellType } from \"./cellTypes/registry.mjs\";\nimport { TextCellType } from \"./cellTypes/textType/index.mjs\";\nimport { BaseEditor } from \"./editors/baseEditor/index.mjs\";\nimport { CellCoords, CellRange } from \"./3rdparty/walkontable/src/index.mjs\"; // register default mandatory cell type for the Base package\nregisterCellType(TextCellType);\n\n// export the `BaseEditor` class to the Handsontable global namespace\nHandsontable.editors = {\n  BaseEditor\n};\n\n/**\n * @param {HTMLElement} rootElement The element to which the Handsontable instance is injected.\n * @param {object} userSettings The user defined options.\n * @returns {Core}\n */\nfunction Handsontable(rootElement, userSettings) {\n  const instance = new Core(rootElement, userSettings || {}, rootInstanceSymbol);\n  instance.init();\n  return instance;\n}\nHandsontable.Core = function (rootElement) {\n  let userSettings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Core(rootElement, userSettings, rootInstanceSymbol);\n};\nHandsontable.DefaultSettings = metaSchemaFactory();\nHandsontable.hooks = Hooks.getSingleton();\nHandsontable.CellCoords = CellCoords;\nHandsontable.CellRange = CellRange;\nHandsontable.packageName = 'handsontable';\nHandsontable.buildDate = \"30/07/2024 11:21:58\";\nHandsontable.version = \"14.5.0\";\nHandsontable.languages = {\n  dictionaryKeys,\n  getLanguageDictionary,\n  getLanguagesDictionaries,\n  registerLanguageDictionary,\n  getTranslatedPhrase\n};\nexport { CellCoords, CellRange };\nexport default Handsontable;"],"mappings":"AAAA,OAAOA,IAAI,MAAM,YAAY;AAC7B,SAASC,kBAAkB,QAAQ,0BAA0B;AAC7D,SAASC,iBAAiB,QAAQ,qBAAqB;AACvD,OAAOC,KAAK,MAAM,mBAAmB,CAAC,CAAC;AACvC;AACA,SAASC,cAAc,EAAEC,mBAAmB,EAAEC,0BAA0B,EAAEC,wBAAwB,EAAEC,qBAAqB,QAAQ,qBAAqB;AACtJ;AACA,SAASC,gBAAgB,QAAQ,0BAA0B;AAC3D,SAASC,YAAY,QAAQ,gCAAgC;AAC7D,SAASC,UAAU,QAAQ,gCAAgC;AAC3D,SAASC,UAAU,EAAEC,SAAS,QAAQ,sCAAsC,CAAC,CAAC;AAC9EJ,gBAAgB,CAACC,YAAY,CAAC;;AAE9B;AACAI,YAAY,CAACC,OAAO,GAAG;EACrBJ;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,SAASG,YAAYA,CAACE,WAAW,EAAEC,YAAY,EAAE;EAC/C,MAAMC,QAAQ,GAAG,IAAIlB,IAAI,CAACgB,WAAW,EAAEC,YAAY,IAAI,CAAC,CAAC,EAAEhB,kBAAkB,CAAC;EAC9EiB,QAAQ,CAACC,IAAI,CAAC,CAAC;EACf,OAAOD,QAAQ;AACjB;AACAJ,YAAY,CAACd,IAAI,GAAG,UAAUgB,WAAW,EAAE;EACzC,IAAIC,YAAY,GAAGG,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACzF,OAAO,IAAIpB,IAAI,CAACgB,WAAW,EAAEC,YAAY,EAAEhB,kBAAkB,CAAC;AAChE,CAAC;AACDa,YAAY,CAACS,eAAe,GAAGrB,iBAAiB,CAAC,CAAC;AAClDY,YAAY,CAACU,KAAK,GAAGrB,KAAK,CAACsB,YAAY,CAAC,CAAC;AACzCX,YAAY,CAACF,UAAU,GAAGA,UAAU;AACpCE,YAAY,CAACD,SAAS,GAAGA,SAAS;AAClCC,YAAY,CAACY,WAAW,GAAG,cAAc;AACzCZ,YAAY,CAACa,SAAS,GAAG,qBAAqB;AAC9Cb,YAAY,CAACc,OAAO,GAAG,QAAQ;AAC/Bd,YAAY,CAACe,SAAS,GAAG;EACvBzB,cAAc;EACdI,qBAAqB;EACrBD,wBAAwB;EACxBD,0BAA0B;EAC1BD;AACF,CAAC;AACD,SAASO,UAAU,EAAEC,SAAS;AAC9B,eAAeC,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}