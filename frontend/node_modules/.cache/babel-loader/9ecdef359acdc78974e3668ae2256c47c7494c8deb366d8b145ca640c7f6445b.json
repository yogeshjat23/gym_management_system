{"ast":null,"code":"import { createKeysObserver } from \"./keyObserver.mjs\";\nimport { normalizeEventKey } from \"./utils.mjs\";\nimport { isImmediatePropagationStopped } from \"../helpers/dom/event.mjs\";\nimport { getParentWindow } from \"../helpers/dom/element.mjs\";\nimport { isMacOS } from \"../helpers/browser.mjs\";\nconst MODIFIER_KEYS = ['meta', 'alt', 'shift', 'control'];\nconst modifierKeysObserver = createKeysObserver();\nconst modKeyListeners = [];\nlet instanceCounter = 0;\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * A key recorder, used for tracking key events.\n *\n * @param {EventTarget} ownerWindow A starting `window` element\n * @param {Function} handleEvent A condition on which event is handled.\n * @param {Function} beforeKeyDown A hook fired before the `keydown` event is handled.\n * @param {Function} afterKeyDown A hook fired after the `keydown` event is handled\n * @param {Function} callback `KeyEvent`'s listener's callback function\n * @returns {object}\n */\nexport function useRecorder(ownerWindow, handleEvent, beforeKeyDown, afterKeyDown, callback) {\n  /**\n   * Check if a pressed key is tracked or not.\n   *\n   * @param {string} pressedKey A pressed key\n   * @returns {boolean}\n   */\n  const isModifierKey = pressedKey => {\n    return MODIFIER_KEYS.includes(pressedKey);\n  };\n\n  /**\n   * Get every pressed modifier key from the performed `KeyboardEvent`.\n   *\n   * @private\n   * @param {KeyboardEvent} event The event object.\n   * @param {boolean} [mergeMetaKeys=false] If `true,` the function will return the \"control\" and \"meta\"\n   *                                        modifiers keys as the \"control/meta\" name. This allows creating\n   *                                        keyboard shortcuts with modifier key that trigger the shortcut\n   *                                        actions depend on the OS keyboard layout (the Meta key for macOS\n   *                                        and Control for non macOS system).\n   * @returns {string[]}\n   */\n  const getPressedModifierKeys = function (event) {\n    let mergeMetaKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const pressedModifierKeys = [];\n    if (event.altKey) {\n      pressedModifierKeys.push('alt');\n    }\n    if (mergeMetaKeys && (event.ctrlKey || event.metaKey)) {\n      pressedModifierKeys.push('control/meta');\n    } else {\n      if (event.ctrlKey) {\n        pressedModifierKeys.push('control');\n      }\n      if (event.metaKey) {\n        pressedModifierKeys.push('meta');\n      }\n    }\n    if (event.shiftKey) {\n      pressedModifierKeys.push('shift');\n    }\n    return pressedModifierKeys;\n  };\n\n  /**\n   * `KeyboardEvent`'s callback function\n   *\n   * @private\n   * @param {KeyboardEvent} event The event object\n   */\n  const onkeydown = event => {\n    if (handleEvent(event) === false) {\n      return;\n    }\n    const result = beforeKeyDown(event);\n\n    // keyCode 229 aka 'uninitialized' doesn't take into account with editors. This key code is\n    // produced when unfinished character is entering using the IME editor. It is fired on macOS,\n    // Windows and linux (ubuntu) with installed ibus-pinyin package.\n    if (event.keyCode === 229 || result === false || isImmediatePropagationStopped(event)) {\n      return;\n    }\n    const pressedKey = normalizeEventKey(event);\n    let extraModifierKeys = [];\n    if (!isModifierKey(pressedKey)) {\n      extraModifierKeys = getPressedModifierKeys(event);\n    }\n    const pressedKeys = [pressedKey].concat(extraModifierKeys);\n    const isExecutionCancelled = callback(event, pressedKeys);\n    if (!isExecutionCancelled && (isMacOS() && extraModifierKeys.includes('meta') || !isMacOS() && extraModifierKeys.includes('control'))) {\n      // Trigger the callback for the virtual OS-dependent \"control/meta\" key\n      callback(event, [pressedKey].concat(getPressedModifierKeys(event, true)));\n    }\n    afterKeyDown(event);\n  };\n\n  /**\n   * `KeyboardEvent`'s callback function for observing the pressed state of the mod keys.\n   *\n   * @private\n   * @param {KeyboardEvent} event The event object\n   */\n  const onkeydownForModKeys = event => {\n    if (event.key) {\n      const pressedKey = normalizeEventKey(event);\n      if (isModifierKey(pressedKey)) {\n        modifierKeysObserver.press(pressedKey);\n      }\n    }\n  };\n\n  /**\n   * `KeyboardEvent`'s callback function for observing the pressed state of the mod keys.\n   *\n   * @private\n   * @param {KeyboardEvent} event The event object\n   */\n  const onkeyupForModKeys = event => {\n    if (event.key) {\n      const pressedKey = normalizeEventKey(event);\n      if (isModifierKey(pressedKey)) {\n        modifierKeysObserver.release(pressedKey);\n      }\n    }\n  };\n\n  /**\n   * `FocusEvent`'s callback function\n   *\n   * @private\n   */\n  const onblur = () => {\n    modifierKeysObserver.releaseAll();\n  };\n\n  /**\n   * Add event listeners to the starting window and its parents' windows.\n   */\n  const mount = () => {\n    let eventTarget = ownerWindow;\n    instanceCounter += 1;\n    while (eventTarget) {\n      if (instanceCounter === 1) {\n        eventTarget.document.documentElement.addEventListener('keydown', onkeydownForModKeys);\n        modKeyListeners.push({\n          event: 'keydown',\n          listener: onkeydownForModKeys\n        });\n        eventTarget.document.documentElement.addEventListener('keyup', onkeyupForModKeys);\n        modKeyListeners.push({\n          event: 'keyup',\n          listener: onkeyupForModKeys\n        });\n      }\n      eventTarget.document.documentElement.addEventListener('keydown', onkeydown);\n      eventTarget.document.documentElement.addEventListener('blur', onblur);\n      eventTarget = getParentWindow(eventTarget);\n    }\n  };\n\n  /**\n   * Remove event listeners from the starting window and its parents' windows.\n   */\n  const unmount = () => {\n    let eventTarget = ownerWindow;\n    instanceCounter -= 1;\n    while (eventTarget) {\n      if (instanceCounter === 0) {\n        for (let i = 0; i < modKeyListeners.length; i++) {\n          const {\n            event,\n            listener\n          } = modKeyListeners[i];\n          eventTarget.document.documentElement.removeEventListener(event, listener);\n        }\n        modKeyListeners.length = 0;\n      }\n      eventTarget.document.documentElement.removeEventListener('keydown', onkeydown);\n      eventTarget.document.documentElement.removeEventListener('blur', onblur);\n      eventTarget = getParentWindow(eventTarget);\n    }\n  };\n  return {\n    mount,\n    unmount,\n    isPressed: key => modifierKeysObserver.isPressed(key),\n    releasePressedKeys: () => modifierKeysObserver.releaseAll()\n  };\n}","map":{"version":3,"names":["createKeysObserver","normalizeEventKey","isImmediatePropagationStopped","getParentWindow","isMacOS","MODIFIER_KEYS","modifierKeysObserver","modKeyListeners","instanceCounter","useRecorder","ownerWindow","handleEvent","beforeKeyDown","afterKeyDown","callback","isModifierKey","pressedKey","includes","getPressedModifierKeys","event","mergeMetaKeys","arguments","length","undefined","pressedModifierKeys","altKey","push","ctrlKey","metaKey","shiftKey","onkeydown","result","keyCode","extraModifierKeys","pressedKeys","concat","isExecutionCancelled","onkeydownForModKeys","key","press","onkeyupForModKeys","release","onblur","releaseAll","mount","eventTarget","document","documentElement","addEventListener","listener","unmount","i","removeEventListener","isPressed","releasePressedKeys"],"sources":["D:/gym-project/frontend/node_modules/handsontable/shortcuts/recorder.mjs"],"sourcesContent":["import \"core-js/modules/es.array.push.js\";\nimport { createKeysObserver } from \"./keyObserver.mjs\";\nimport { normalizeEventKey } from \"./utils.mjs\";\nimport { isImmediatePropagationStopped } from \"../helpers/dom/event.mjs\";\nimport { getParentWindow } from \"../helpers/dom/element.mjs\";\nimport { isMacOS } from \"../helpers/browser.mjs\";\nconst MODIFIER_KEYS = ['meta', 'alt', 'shift', 'control'];\nconst modifierKeysObserver = createKeysObserver();\nconst modKeyListeners = [];\nlet instanceCounter = 0;\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * A key recorder, used for tracking key events.\n *\n * @param {EventTarget} ownerWindow A starting `window` element\n * @param {Function} handleEvent A condition on which event is handled.\n * @param {Function} beforeKeyDown A hook fired before the `keydown` event is handled.\n * @param {Function} afterKeyDown A hook fired after the `keydown` event is handled\n * @param {Function} callback `KeyEvent`'s listener's callback function\n * @returns {object}\n */\nexport function useRecorder(ownerWindow, handleEvent, beforeKeyDown, afterKeyDown, callback) {\n  /**\n   * Check if a pressed key is tracked or not.\n   *\n   * @param {string} pressedKey A pressed key\n   * @returns {boolean}\n   */\n  const isModifierKey = pressedKey => {\n    return MODIFIER_KEYS.includes(pressedKey);\n  };\n\n  /**\n   * Get every pressed modifier key from the performed `KeyboardEvent`.\n   *\n   * @private\n   * @param {KeyboardEvent} event The event object.\n   * @param {boolean} [mergeMetaKeys=false] If `true,` the function will return the \"control\" and \"meta\"\n   *                                        modifiers keys as the \"control/meta\" name. This allows creating\n   *                                        keyboard shortcuts with modifier key that trigger the shortcut\n   *                                        actions depend on the OS keyboard layout (the Meta key for macOS\n   *                                        and Control for non macOS system).\n   * @returns {string[]}\n   */\n  const getPressedModifierKeys = function (event) {\n    let mergeMetaKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const pressedModifierKeys = [];\n    if (event.altKey) {\n      pressedModifierKeys.push('alt');\n    }\n    if (mergeMetaKeys && (event.ctrlKey || event.metaKey)) {\n      pressedModifierKeys.push('control/meta');\n    } else {\n      if (event.ctrlKey) {\n        pressedModifierKeys.push('control');\n      }\n      if (event.metaKey) {\n        pressedModifierKeys.push('meta');\n      }\n    }\n    if (event.shiftKey) {\n      pressedModifierKeys.push('shift');\n    }\n    return pressedModifierKeys;\n  };\n\n  /**\n   * `KeyboardEvent`'s callback function\n   *\n   * @private\n   * @param {KeyboardEvent} event The event object\n   */\n  const onkeydown = event => {\n    if (handleEvent(event) === false) {\n      return;\n    }\n    const result = beforeKeyDown(event);\n\n    // keyCode 229 aka 'uninitialized' doesn't take into account with editors. This key code is\n    // produced when unfinished character is entering using the IME editor. It is fired on macOS,\n    // Windows and linux (ubuntu) with installed ibus-pinyin package.\n    if (event.keyCode === 229 || result === false || isImmediatePropagationStopped(event)) {\n      return;\n    }\n    const pressedKey = normalizeEventKey(event);\n    let extraModifierKeys = [];\n    if (!isModifierKey(pressedKey)) {\n      extraModifierKeys = getPressedModifierKeys(event);\n    }\n    const pressedKeys = [pressedKey].concat(extraModifierKeys);\n    const isExecutionCancelled = callback(event, pressedKeys);\n    if (!isExecutionCancelled && (isMacOS() && extraModifierKeys.includes('meta') || !isMacOS() && extraModifierKeys.includes('control'))) {\n      // Trigger the callback for the virtual OS-dependent \"control/meta\" key\n      callback(event, [pressedKey].concat(getPressedModifierKeys(event, true)));\n    }\n    afterKeyDown(event);\n  };\n\n  /**\n   * `KeyboardEvent`'s callback function for observing the pressed state of the mod keys.\n   *\n   * @private\n   * @param {KeyboardEvent} event The event object\n   */\n  const onkeydownForModKeys = event => {\n    if (event.key) {\n      const pressedKey = normalizeEventKey(event);\n      if (isModifierKey(pressedKey)) {\n        modifierKeysObserver.press(pressedKey);\n      }\n    }\n  };\n\n  /**\n   * `KeyboardEvent`'s callback function for observing the pressed state of the mod keys.\n   *\n   * @private\n   * @param {KeyboardEvent} event The event object\n   */\n  const onkeyupForModKeys = event => {\n    if (event.key) {\n      const pressedKey = normalizeEventKey(event);\n      if (isModifierKey(pressedKey)) {\n        modifierKeysObserver.release(pressedKey);\n      }\n    }\n  };\n\n  /**\n   * `FocusEvent`'s callback function\n   *\n   * @private\n   */\n  const onblur = () => {\n    modifierKeysObserver.releaseAll();\n  };\n\n  /**\n   * Add event listeners to the starting window and its parents' windows.\n   */\n  const mount = () => {\n    let eventTarget = ownerWindow;\n    instanceCounter += 1;\n    while (eventTarget) {\n      if (instanceCounter === 1) {\n        eventTarget.document.documentElement.addEventListener('keydown', onkeydownForModKeys);\n        modKeyListeners.push({\n          event: 'keydown',\n          listener: onkeydownForModKeys\n        });\n        eventTarget.document.documentElement.addEventListener('keyup', onkeyupForModKeys);\n        modKeyListeners.push({\n          event: 'keyup',\n          listener: onkeyupForModKeys\n        });\n      }\n      eventTarget.document.documentElement.addEventListener('keydown', onkeydown);\n      eventTarget.document.documentElement.addEventListener('blur', onblur);\n      eventTarget = getParentWindow(eventTarget);\n    }\n  };\n\n  /**\n   * Remove event listeners from the starting window and its parents' windows.\n   */\n  const unmount = () => {\n    let eventTarget = ownerWindow;\n    instanceCounter -= 1;\n    while (eventTarget) {\n      if (instanceCounter === 0) {\n        for (let i = 0; i < modKeyListeners.length; i++) {\n          const {\n            event,\n            listener\n          } = modKeyListeners[i];\n          eventTarget.document.documentElement.removeEventListener(event, listener);\n        }\n        modKeyListeners.length = 0;\n      }\n      eventTarget.document.documentElement.removeEventListener('keydown', onkeydown);\n      eventTarget.document.documentElement.removeEventListener('blur', onblur);\n      eventTarget = getParentWindow(eventTarget);\n    }\n  };\n  return {\n    mount,\n    unmount,\n    isPressed: key => modifierKeysObserver.isPressed(key),\n    releasePressedKeys: () => modifierKeysObserver.releaseAll()\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}