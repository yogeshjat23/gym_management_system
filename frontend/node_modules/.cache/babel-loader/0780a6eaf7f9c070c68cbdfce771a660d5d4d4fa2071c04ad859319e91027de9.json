{"ast":null,"code":"function _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport { ViewportBaseCalculator } from \"./viewportBase.mjs\";\nexport const DEFAULT_HEIGHT = 23;\n\n/**\n * @typedef {object} ViewportRowsCalculatorOptions\n * @property {Map<string, ViewportBaseCalculator>} calculationTypes The calculation types to be performed.\n * @property {number} viewportHeight Height of the viewport.\n * @property {number} scrollOffset Current vertical scroll position of the viewport.\n * @property {number} totalRows Total number of rows.\n * @property {Function} rowHeightFn Function that returns the height of the row at a given index (in px).\n * @property {Function} overrideFn Function that allows to adjust the `startRow` and `endRow` parameters.\n * @property {number} horizontalScrollbarHeight The scrollbar height.\n */\n/**\n * Calculates indexes of rows to render OR rows that are visible OR partially visible in the viewport.\n *\n * @class ViewportRowsCalculator\n */\nexport class ViewportRowsCalculator extends ViewportBaseCalculator {\n  /**\n   * @param {ViewportRowsCalculatorOptions} options Object with all options specified for row viewport calculation.\n   */\n  constructor(_ref) {\n    let {\n      calculationTypes,\n      viewportHeight,\n      scrollOffset,\n      totalRows,\n      rowHeightFn,\n      overrideFn,\n      horizontalScrollbarHeight\n    } = _ref;\n    super(calculationTypes);\n    _defineProperty(this, \"viewportHeight\", 0);\n    _defineProperty(this, \"scrollOffset\", 0);\n    _defineProperty(this, \"zeroBasedScrollOffset\", 0);\n    _defineProperty(this, \"totalRows\", 0);\n    _defineProperty(this, \"rowHeightFn\", null);\n    _defineProperty(this, \"rowHeight\", 0);\n    _defineProperty(this, \"overrideFn\", null);\n    _defineProperty(this, \"horizontalScrollbarHeight\", 0);\n    _defineProperty(this, \"innerViewportHeight\", 0);\n    _defineProperty(this, \"totalCalculatedHeight\", 0);\n    _defineProperty(this, \"startPositions\", []);\n    _defineProperty(this, \"needReverse\", true);\n    this.viewportHeight = viewportHeight;\n    this.scrollOffset = scrollOffset;\n    this.zeroBasedScrollOffset = Math.max(scrollOffset, 0);\n    this.totalRows = totalRows;\n    this.rowHeightFn = rowHeightFn;\n    this.overrideFn = overrideFn;\n    this.horizontalScrollbarHeight = horizontalScrollbarHeight !== null && horizontalScrollbarHeight !== void 0 ? horizontalScrollbarHeight : 0;\n    this.innerViewportHeight = this.zeroBasedScrollOffset + this.viewportHeight - this.horizontalScrollbarHeight;\n    this.calculate();\n  }\n\n  /**\n   * Calculates viewport.\n   */\n  calculate() {\n    this._initialize(this);\n    for (let row = 0; row < this.totalRows; row++) {\n      this.rowHeight = this.getRowHeight(row);\n      this._process(row, this);\n      this.startPositions.push(this.totalCalculatedHeight);\n      this.totalCalculatedHeight += this.rowHeight;\n      if (this.totalCalculatedHeight >= this.innerViewportHeight) {\n        this.needReverse = false;\n        break;\n      }\n    }\n    this._finalize(this);\n  }\n\n  /**\n   * Gets the row height at the specified row index.\n   *\n   * @param {number} row Row index.\n   * @returns {number}\n   */\n  getRowHeight(row) {\n    const rowHeight = this.rowHeightFn(row);\n    if (isNaN(rowHeight)) {\n      return DEFAULT_HEIGHT;\n    }\n    return rowHeight;\n  }\n}","map":{"version":3,"names":["_defineProperty","e","r","t","_toPropertyKey","Object","defineProperty","value","enumerable","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","ViewportBaseCalculator","DEFAULT_HEIGHT","ViewportRowsCalculator","constructor","_ref","calculationTypes","viewportHeight","scrollOffset","totalRows","rowHeightFn","overrideFn","horizontalScrollbarHeight","zeroBasedScrollOffset","Math","max","innerViewportHeight","calculate","_initialize","row","rowHeight","getRowHeight","_process","startPositions","push","totalCalculatedHeight","needReverse","_finalize","isNaN"],"sources":["D:/gym-project/frontend/node_modules/handsontable/3rdparty/walkontable/src/calculator/viewportRows.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport { ViewportBaseCalculator } from \"./viewportBase.mjs\";\nexport const DEFAULT_HEIGHT = 23;\n\n/**\n * @typedef {object} ViewportRowsCalculatorOptions\n * @property {Map<string, ViewportBaseCalculator>} calculationTypes The calculation types to be performed.\n * @property {number} viewportHeight Height of the viewport.\n * @property {number} scrollOffset Current vertical scroll position of the viewport.\n * @property {number} totalRows Total number of rows.\n * @property {Function} rowHeightFn Function that returns the height of the row at a given index (in px).\n * @property {Function} overrideFn Function that allows to adjust the `startRow` and `endRow` parameters.\n * @property {number} horizontalScrollbarHeight The scrollbar height.\n */\n/**\n * Calculates indexes of rows to render OR rows that are visible OR partially visible in the viewport.\n *\n * @class ViewportRowsCalculator\n */\nexport class ViewportRowsCalculator extends ViewportBaseCalculator {\n  /**\n   * @param {ViewportRowsCalculatorOptions} options Object with all options specified for row viewport calculation.\n   */\n  constructor(_ref) {\n    let {\n      calculationTypes,\n      viewportHeight,\n      scrollOffset,\n      totalRows,\n      rowHeightFn,\n      overrideFn,\n      horizontalScrollbarHeight\n    } = _ref;\n    super(calculationTypes);\n    _defineProperty(this, \"viewportHeight\", 0);\n    _defineProperty(this, \"scrollOffset\", 0);\n    _defineProperty(this, \"zeroBasedScrollOffset\", 0);\n    _defineProperty(this, \"totalRows\", 0);\n    _defineProperty(this, \"rowHeightFn\", null);\n    _defineProperty(this, \"rowHeight\", 0);\n    _defineProperty(this, \"overrideFn\", null);\n    _defineProperty(this, \"horizontalScrollbarHeight\", 0);\n    _defineProperty(this, \"innerViewportHeight\", 0);\n    _defineProperty(this, \"totalCalculatedHeight\", 0);\n    _defineProperty(this, \"startPositions\", []);\n    _defineProperty(this, \"needReverse\", true);\n    this.viewportHeight = viewportHeight;\n    this.scrollOffset = scrollOffset;\n    this.zeroBasedScrollOffset = Math.max(scrollOffset, 0);\n    this.totalRows = totalRows;\n    this.rowHeightFn = rowHeightFn;\n    this.overrideFn = overrideFn;\n    this.horizontalScrollbarHeight = horizontalScrollbarHeight !== null && horizontalScrollbarHeight !== void 0 ? horizontalScrollbarHeight : 0;\n    this.innerViewportHeight = this.zeroBasedScrollOffset + this.viewportHeight - this.horizontalScrollbarHeight;\n    this.calculate();\n  }\n\n  /**\n   * Calculates viewport.\n   */\n  calculate() {\n    this._initialize(this);\n    for (let row = 0; row < this.totalRows; row++) {\n      this.rowHeight = this.getRowHeight(row);\n      this._process(row, this);\n      this.startPositions.push(this.totalCalculatedHeight);\n      this.totalCalculatedHeight += this.rowHeight;\n      if (this.totalCalculatedHeight >= this.innerViewportHeight) {\n        this.needReverse = false;\n        break;\n      }\n    }\n    this._finalize(this);\n  }\n\n  /**\n   * Gets the row height at the specified row index.\n   *\n   * @param {number} row Row index.\n   * @returns {number}\n   */\n  getRowHeight(row) {\n    const rowHeight = this.rowHeightFn(row);\n    if (isNaN(rowHeight)) {\n      return DEFAULT_HEIGHT;\n    }\n    return rowHeight;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}