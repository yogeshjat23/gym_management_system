{"ast":null,"code":"function _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport { BasePlugin } from \"../base/index.mjs\";\nimport Storage from \"./storage.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nHooks.getSingleton().register('persistentStateSave');\nHooks.getSingleton().register('persistentStateLoad');\nHooks.getSingleton().register('persistentStateReset');\nexport const PLUGIN_KEY = 'persistentState';\nexport const PLUGIN_PRIORITY = 0;\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @plugin PersistentState\n * @class PersistentState\n *\n * @description\n * Save the state of column sorting, column positions and column sizes in local storage to preserve table state\n * between page reloads.\n *\n * In order to enable data storage mechanism, {@link Options#persistentState} option must be set to `true`.\n *\n * When persistentState is enabled it exposes 3 hooks:\n * - {@link Hooks#persistentStateSave} - Saves value under given key in browser local storage.\n * - {@link Hooks#persistentStateLoad} - Loads value, saved under given key, from browser local storage. The loaded\n * value will be saved in `saveTo.value`.\n * - {@link Hooks#persistentStateReset} - Clears the value saved under key. If no key is given, all values associated\n * with table will be cleared.\n *\n * __Note:__ The main reason behind using `persistentState` hooks rather than regular LocalStorage API is that it\n * ensures separation of data stored by multiple Handsontable instances. In other words, if you have two (or more)\n * instances of Handsontable on one page, data saved by one instance won't be accessible by the second instance.\n * Those two instances can store data under the same key and no data would be overwritten.\n *\n * __Important:__ In order for the data separation to work properly, make sure that each instance of Handsontable has a unique `id`.\n *\n */\nexport class PersistentState extends BasePlugin {\n  constructor() {\n    super(...arguments);\n    /**\n     * Instance of {@link Storage}.\n     *\n     * @private\n     * @type {Storage}\n     */\n    _defineProperty(this, \"storage\", void 0);\n  }\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link PersistentState#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return !!this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    if (this.enabled) {\n      return;\n    }\n    if (!this.storage) {\n      this.storage = new Storage(this.hot.rootElement.id, this.hot.rootWindow);\n    }\n    this.addHook('persistentStateSave', (key, value) => this.saveValue(key, value));\n    this.addHook('persistentStateLoad', (key, saveTo) => this.loadValue(key, saveTo));\n    this.addHook('persistentStateReset', () => this.resetValue());\n    super.enablePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    this.storage = undefined;\n    super.disablePlugin();\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:\n   *  - [`persistentState`](@/api/options.md#persistentstate)\n   */\n  updatePlugin() {\n    this.disablePlugin();\n    this.enablePlugin();\n    super.updatePlugin();\n  }\n\n  /**\n   * Loads the value from local storage.\n   *\n   * @param {string} key Storage key.\n   * @param {object} saveTo Saved value from local storage.\n   */\n  loadValue(key, saveTo) {\n    saveTo.value = this.storage.loadValue(key);\n  }\n\n  /**\n   * Saves the data to local storage.\n   *\n   * @param {string} key Storage key.\n   * @param {Mixed} value Value to save.\n   */\n  saveValue(key, value) {\n    this.storage.saveValue(key, value);\n  }\n\n  /**\n   * Resets the data or all data from local storage.\n   *\n   * @param {string} key [optional] Storage key.\n   */\n  resetValue(key) {\n    if (typeof key === 'undefined') {\n      this.storage.resetAll();\n    } else {\n      this.storage.reset(key);\n    }\n  }\n\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    super.destroy();\n  }\n}","map":{"version":3,"names":["_defineProperty","e","r","t","_toPropertyKey","Object","defineProperty","value","enumerable","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","BasePlugin","Storage","Hooks","getSingleton","register","PLUGIN_KEY","PLUGIN_PRIORITY","PersistentState","constructor","arguments","isEnabled","hot","getSettings","enablePlugin","enabled","storage","rootElement","id","rootWindow","addHook","key","saveValue","saveTo","loadValue","resetValue","disablePlugin","undefined","updatePlugin","resetAll","reset","destroy"],"sources":["D:/gym-project/frontend/node_modules/handsontable/plugins/persistentState/persistentState.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport { BasePlugin } from \"../base/index.mjs\";\nimport Storage from \"./storage.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nHooks.getSingleton().register('persistentStateSave');\nHooks.getSingleton().register('persistentStateLoad');\nHooks.getSingleton().register('persistentStateReset');\nexport const PLUGIN_KEY = 'persistentState';\nexport const PLUGIN_PRIORITY = 0;\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @plugin PersistentState\n * @class PersistentState\n *\n * @description\n * Save the state of column sorting, column positions and column sizes in local storage to preserve table state\n * between page reloads.\n *\n * In order to enable data storage mechanism, {@link Options#persistentState} option must be set to `true`.\n *\n * When persistentState is enabled it exposes 3 hooks:\n * - {@link Hooks#persistentStateSave} - Saves value under given key in browser local storage.\n * - {@link Hooks#persistentStateLoad} - Loads value, saved under given key, from browser local storage. The loaded\n * value will be saved in `saveTo.value`.\n * - {@link Hooks#persistentStateReset} - Clears the value saved under key. If no key is given, all values associated\n * with table will be cleared.\n *\n * __Note:__ The main reason behind using `persistentState` hooks rather than regular LocalStorage API is that it\n * ensures separation of data stored by multiple Handsontable instances. In other words, if you have two (or more)\n * instances of Handsontable on one page, data saved by one instance won't be accessible by the second instance.\n * Those two instances can store data under the same key and no data would be overwritten.\n *\n * __Important:__ In order for the data separation to work properly, make sure that each instance of Handsontable has a unique `id`.\n *\n */\nexport class PersistentState extends BasePlugin {\n  constructor() {\n    super(...arguments);\n    /**\n     * Instance of {@link Storage}.\n     *\n     * @private\n     * @type {Storage}\n     */\n    _defineProperty(this, \"storage\", void 0);\n  }\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link PersistentState#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return !!this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    if (this.enabled) {\n      return;\n    }\n    if (!this.storage) {\n      this.storage = new Storage(this.hot.rootElement.id, this.hot.rootWindow);\n    }\n    this.addHook('persistentStateSave', (key, value) => this.saveValue(key, value));\n    this.addHook('persistentStateLoad', (key, saveTo) => this.loadValue(key, saveTo));\n    this.addHook('persistentStateReset', () => this.resetValue());\n    super.enablePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    this.storage = undefined;\n    super.disablePlugin();\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:\n   *  - [`persistentState`](@/api/options.md#persistentstate)\n   */\n  updatePlugin() {\n    this.disablePlugin();\n    this.enablePlugin();\n    super.updatePlugin();\n  }\n\n  /**\n   * Loads the value from local storage.\n   *\n   * @param {string} key Storage key.\n   * @param {object} saveTo Saved value from local storage.\n   */\n  loadValue(key, saveTo) {\n    saveTo.value = this.storage.loadValue(key);\n  }\n\n  /**\n   * Saves the data to local storage.\n   *\n   * @param {string} key Storage key.\n   * @param {Mixed} value Value to save.\n   */\n  saveValue(key, value) {\n    this.storage.saveValue(key, value);\n  }\n\n  /**\n   * Resets the data or all data from local storage.\n   *\n   * @param {string} key [optional] Storage key.\n   */\n  resetValue(key) {\n    if (typeof key === 'undefined') {\n      this.storage.resetAll();\n    } else {\n      this.storage.reset(key);\n    }\n  }\n\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    super.destroy();\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}