{"ast":null,"code":"import { deepObjectSize, isObject } from \"./object.mjs\";\nconst COLUMN_LABEL_BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nconst COLUMN_LABEL_BASE_LENGTH = COLUMN_LABEL_BASE.length;\n\n/**\n * Generates spreadsheet-like column names: A, B, C, ..., Z, AA, AB, etc.\n *\n * @param {number} index Column index.\n * @returns {string}\n */\nexport function spreadsheetColumnLabel(index) {\n  let dividend = index + 1;\n  let columnLabel = '';\n  let modulo;\n  while (dividend > 0) {\n    modulo = (dividend - 1) % COLUMN_LABEL_BASE_LENGTH;\n    columnLabel = String.fromCharCode(65 + modulo) + columnLabel;\n    dividend = parseInt((dividend - modulo) / COLUMN_LABEL_BASE_LENGTH, 10);\n  }\n  return columnLabel;\n}\n\n/**\n * Generates spreadsheet-like column index from theirs labels: A, B, C ...., Z, AA, AB, etc.\n *\n * @param {string} label Column label.\n * @returns {number}\n */\nexport function spreadsheetColumnIndex(label) {\n  let result = 0;\n  if (label) {\n    for (let i = 0, j = label.length - 1; i < label.length; i += 1, j -= 1) {\n      result += COLUMN_LABEL_BASE_LENGTH ** j * (COLUMN_LABEL_BASE.indexOf(label[i]) + 1);\n    }\n  }\n  result -= 1;\n  return result;\n}\n\n/**\n * Creates 2D array of Excel-like values \"A1\", \"A2\", ...\n *\n * @param {number} rows Number of rows to generate.\n * @param {number} columns Number of columns to generate.\n * @returns {Array}\n */\nexport function createSpreadsheetData() {\n  let rows = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n  let columns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  const _rows = [];\n  let i;\n  let j;\n  for (i = 0; i < rows; i++) {\n    const row = [];\n    for (j = 0; j < columns; j++) {\n      row.push(spreadsheetColumnLabel(j) + (i + 1));\n    }\n    _rows.push(row);\n  }\n  return _rows;\n}\n\n/**\n * Creates 2D array of Excel-like values \"A1\", \"A2\", as an array of objects.\n *\n * @param {number} rows Number of rows to generate.\n * @param {number} colCount Number of columns to generate.\n * @returns {Array}\n */\nexport function createSpreadsheetObjectData() {\n  let rows = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n  let colCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  const _rows = [];\n  let i;\n  let j;\n  for (i = 0; i < rows; i++) {\n    const row = {};\n    for (j = 0; j < colCount; j++) {\n      row[`prop${j}`] = spreadsheetColumnLabel(j) + (i + 1);\n    }\n    _rows.push(row);\n  }\n  return _rows;\n}\n\n/**\n * Generates an empty data object.\n *\n * @param {number} rows Number of rows to generate.\n * @param {number} columns Number of columns to generate.\n * @returns {Array}\n */\nexport function createEmptySpreadsheetData(rows, columns) {\n  const data = [];\n  let row;\n  for (let i = 0; i < rows; i++) {\n    row = [];\n    for (let j = 0; j < columns; j++) {\n      row.push('');\n    }\n    data.push(row);\n  }\n  return data;\n}\n\n/**\n * Transform a data row (either an array or an object) or an array of data rows to array of changes in a form of `[row,\n * prop/col, value]`. Convenient to use with `setDataAtRowProp` and `setSourceDataAtCell` methods.\n *\n * @param {Array|object} dataRow Object of row data, array of row data or an array of either.\n * @param {number} rowOffset Row offset to be passed to the resulting change list. Defaults to `0`.\n * @returns {Array} Array of changes (in a form of an array).\n */\nexport function dataRowToChangesArray(dataRow) {\n  let rowOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let dataRows = dataRow;\n  const changesArray = [];\n  if (!Array.isArray(dataRow) || !Array.isArray(dataRow[0])) {\n    dataRows = [dataRow];\n  }\n  dataRows.forEach((row, rowIndex) => {\n    if (Array.isArray(row)) {\n      row.forEach((value, column) => {\n        changesArray.push([rowIndex + rowOffset, column, value]);\n      });\n    } else {\n      Object.keys(row).forEach(propName => {\n        changesArray.push([rowIndex + rowOffset, propName, row[propName]]);\n      });\n    }\n  });\n  return changesArray;\n}\n\n/**\n * Count the number of keys (or, basically, columns when the data is an array or arrays) in the first row of the\n * provided dataset.\n *\n * @param {Array} data The dataset.\n * @returns {number} Number of keys in the first row of the dataset.\n */\nexport function countFirstRowKeys(data) {\n  let result = 0;\n  if (Array.isArray(data)) {\n    if (data[0] && Array.isArray(data[0])) {\n      result = data[0].length;\n    } else if (data[0] && isObject(data[0])) {\n      result = deepObjectSize(data[0]);\n    }\n  }\n  return result;\n}\n\n/**\n * Check whether the provided dataset is a *non-empty* array of arrays.\n *\n * @param {Array} data Dataset to be checked.\n * @returns {boolean} `true` if data is an array of arrays, `false` otherwise.\n */\nexport function isArrayOfArrays(data) {\n  return !!(Array.isArray(data) && data.length && data.every(el => Array.isArray(el)));\n}\n\n/**\n * Check whether the provided dataset is a *non-empty* array of objects.\n *\n * @param {Array} data Dataset to be checked.\n * @returns {boolean} `true` if data is an array of objects, `false` otherwise.\n */\nexport function isArrayOfObjects(data) {\n  return !!(Array.isArray(data) && data.length && data.every(el => typeof el === 'object' && !Array.isArray(el) && el !== null));\n}","map":{"version":3,"names":["deepObjectSize","isObject","COLUMN_LABEL_BASE","COLUMN_LABEL_BASE_LENGTH","length","spreadsheetColumnLabel","index","dividend","columnLabel","modulo","String","fromCharCode","parseInt","spreadsheetColumnIndex","label","result","i","j","indexOf","createSpreadsheetData","rows","arguments","undefined","columns","_rows","row","push","createSpreadsheetObjectData","colCount","createEmptySpreadsheetData","data","dataRowToChangesArray","dataRow","rowOffset","dataRows","changesArray","Array","isArray","forEach","rowIndex","value","column","Object","keys","propName","countFirstRowKeys","isArrayOfArrays","every","el","isArrayOfObjects"],"sources":["D:/gym-project/frontend/node_modules/handsontable/helpers/data.mjs"],"sourcesContent":["import \"core-js/modules/es.array.push.js\";\nimport { deepObjectSize, isObject } from \"./object.mjs\";\nconst COLUMN_LABEL_BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nconst COLUMN_LABEL_BASE_LENGTH = COLUMN_LABEL_BASE.length;\n\n/**\n * Generates spreadsheet-like column names: A, B, C, ..., Z, AA, AB, etc.\n *\n * @param {number} index Column index.\n * @returns {string}\n */\nexport function spreadsheetColumnLabel(index) {\n  let dividend = index + 1;\n  let columnLabel = '';\n  let modulo;\n  while (dividend > 0) {\n    modulo = (dividend - 1) % COLUMN_LABEL_BASE_LENGTH;\n    columnLabel = String.fromCharCode(65 + modulo) + columnLabel;\n    dividend = parseInt((dividend - modulo) / COLUMN_LABEL_BASE_LENGTH, 10);\n  }\n  return columnLabel;\n}\n\n/**\n * Generates spreadsheet-like column index from theirs labels: A, B, C ...., Z, AA, AB, etc.\n *\n * @param {string} label Column label.\n * @returns {number}\n */\nexport function spreadsheetColumnIndex(label) {\n  let result = 0;\n  if (label) {\n    for (let i = 0, j = label.length - 1; i < label.length; i += 1, j -= 1) {\n      result += COLUMN_LABEL_BASE_LENGTH ** j * (COLUMN_LABEL_BASE.indexOf(label[i]) + 1);\n    }\n  }\n  result -= 1;\n  return result;\n}\n\n/**\n * Creates 2D array of Excel-like values \"A1\", \"A2\", ...\n *\n * @param {number} rows Number of rows to generate.\n * @param {number} columns Number of columns to generate.\n * @returns {Array}\n */\nexport function createSpreadsheetData() {\n  let rows = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n  let columns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  const _rows = [];\n  let i;\n  let j;\n  for (i = 0; i < rows; i++) {\n    const row = [];\n    for (j = 0; j < columns; j++) {\n      row.push(spreadsheetColumnLabel(j) + (i + 1));\n    }\n    _rows.push(row);\n  }\n  return _rows;\n}\n\n/**\n * Creates 2D array of Excel-like values \"A1\", \"A2\", as an array of objects.\n *\n * @param {number} rows Number of rows to generate.\n * @param {number} colCount Number of columns to generate.\n * @returns {Array}\n */\nexport function createSpreadsheetObjectData() {\n  let rows = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n  let colCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  const _rows = [];\n  let i;\n  let j;\n  for (i = 0; i < rows; i++) {\n    const row = {};\n    for (j = 0; j < colCount; j++) {\n      row[`prop${j}`] = spreadsheetColumnLabel(j) + (i + 1);\n    }\n    _rows.push(row);\n  }\n  return _rows;\n}\n\n/**\n * Generates an empty data object.\n *\n * @param {number} rows Number of rows to generate.\n * @param {number} columns Number of columns to generate.\n * @returns {Array}\n */\nexport function createEmptySpreadsheetData(rows, columns) {\n  const data = [];\n  let row;\n  for (let i = 0; i < rows; i++) {\n    row = [];\n    for (let j = 0; j < columns; j++) {\n      row.push('');\n    }\n    data.push(row);\n  }\n  return data;\n}\n\n/**\n * Transform a data row (either an array or an object) or an array of data rows to array of changes in a form of `[row,\n * prop/col, value]`. Convenient to use with `setDataAtRowProp` and `setSourceDataAtCell` methods.\n *\n * @param {Array|object} dataRow Object of row data, array of row data or an array of either.\n * @param {number} rowOffset Row offset to be passed to the resulting change list. Defaults to `0`.\n * @returns {Array} Array of changes (in a form of an array).\n */\nexport function dataRowToChangesArray(dataRow) {\n  let rowOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let dataRows = dataRow;\n  const changesArray = [];\n  if (!Array.isArray(dataRow) || !Array.isArray(dataRow[0])) {\n    dataRows = [dataRow];\n  }\n  dataRows.forEach((row, rowIndex) => {\n    if (Array.isArray(row)) {\n      row.forEach((value, column) => {\n        changesArray.push([rowIndex + rowOffset, column, value]);\n      });\n    } else {\n      Object.keys(row).forEach(propName => {\n        changesArray.push([rowIndex + rowOffset, propName, row[propName]]);\n      });\n    }\n  });\n  return changesArray;\n}\n\n/**\n * Count the number of keys (or, basically, columns when the data is an array or arrays) in the first row of the\n * provided dataset.\n *\n * @param {Array} data The dataset.\n * @returns {number} Number of keys in the first row of the dataset.\n */\nexport function countFirstRowKeys(data) {\n  let result = 0;\n  if (Array.isArray(data)) {\n    if (data[0] && Array.isArray(data[0])) {\n      result = data[0].length;\n    } else if (data[0] && isObject(data[0])) {\n      result = deepObjectSize(data[0]);\n    }\n  }\n  return result;\n}\n\n/**\n * Check whether the provided dataset is a *non-empty* array of arrays.\n *\n * @param {Array} data Dataset to be checked.\n * @returns {boolean} `true` if data is an array of arrays, `false` otherwise.\n */\nexport function isArrayOfArrays(data) {\n  return !!(Array.isArray(data) && data.length && data.every(el => Array.isArray(el)));\n}\n\n/**\n * Check whether the provided dataset is a *non-empty* array of objects.\n *\n * @param {Array} data Dataset to be checked.\n * @returns {boolean} `true` if data is an array of objects, `false` otherwise.\n */\nexport function isArrayOfObjects(data) {\n  return !!(Array.isArray(data) && data.length && data.every(el => typeof el === 'object' && !Array.isArray(el) && el !== null));\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}