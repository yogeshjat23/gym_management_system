{"ast":null,"code":"!function (e) {\n  if (\"object\" == typeof exports && \"undefined\" != typeof module) module.exports = e();else if (\"function\" == typeof define && define.amd) define([], e);else {\n    (\"undefined\" != typeof window ? window : \"undefined\" != typeof global ? global : \"undefined\" != typeof self ? self : this).numbro = e();\n  }\n}(function () {\n  return function a(o, u, c) {\n    function s(t, e) {\n      if (!u[t]) {\n        if (!o[t]) {\n          var r = \"function\" == typeof require && require;\n          if (!e && r) return r(t, !0);\n          if (l) return l(t, !0);\n          var n = new Error(\"Cannot find module '\" + t + \"'\");\n          throw n.code = \"MODULE_NOT_FOUND\", n;\n        }\n        var i = u[t] = {\n          exports: {}\n        };\n        o[t][0].call(i.exports, function (e) {\n          return s(o[t][1][e] || e);\n        }, i, i.exports, a, o, u, c);\n      }\n      return u[t].exports;\n    }\n    for (var l = \"function\" == typeof require && require, e = 0; e < c.length; e++) s(c[e]);\n    return s;\n  }({\n    1: [function (e, r, t) {\n      !function (e) {\n        \"use strict\";\n\n        var t,\n          k = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\n          _ = Math.ceil,\n          L = Math.floor,\n          T = \"[BigNumber Error] \",\n          P = T + \"Number primitive has more than 15 significant digits: \",\n          U = 1e14,\n          j = 14,\n          C = 9007199254740991,\n          R = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\n          I = 1e7,\n          $ = 1e9;\n        function G(e) {\n          var t = 0 | e;\n          return 0 < e || e === t ? t : t - 1;\n        }\n        function V(e) {\n          for (var t, r, n = 1, i = e.length, a = e[0] + \"\"; n < i;) {\n            for (t = e[n++] + \"\", r = j - t.length; r--; t = \"0\" + t);\n            a += t;\n          }\n          for (i = a.length; 48 === a.charCodeAt(--i););\n          return a.slice(0, i + 1 || 1);\n        }\n        function q(e, t) {\n          var r,\n            n,\n            i = e.c,\n            a = t.c,\n            o = e.s,\n            u = t.s,\n            c = e.e,\n            s = t.e;\n          if (!o || !u) return null;\n          if (r = i && !i[0], n = a && !a[0], r || n) return r ? n ? 0 : -u : o;\n          if (o != u) return o;\n          if (r = o < 0, n = c == s, !i || !a) return n ? 0 : !i ^ r ? 1 : -1;\n          if (!n) return s < c ^ r ? 1 : -1;\n          for (u = (c = i.length) < (s = a.length) ? c : s, o = 0; o < u; o++) if (i[o] != a[o]) return i[o] > a[o] ^ r ? 1 : -1;\n          return c == s ? 0 : s < c ^ r ? 1 : -1;\n        }\n        function Z(e, t, r, n) {\n          if (e < t || r < e || e !== (e < 0 ? _(e) : L(e))) throw Error(T + (n || \"Argument\") + (\"number\" == typeof e ? e < t || r < e ? \" out of range: \" : \" not an integer: \" : \" not a primitive number: \") + String(e));\n        }\n        function z(e) {\n          var t = e.c.length - 1;\n          return G(e.e / j) == t && e.c[t] % 2 != 0;\n        }\n        function W(e, t) {\n          return (1 < e.length ? e.charAt(0) + \".\" + e.slice(1) : e) + (t < 0 ? \"e\" : \"e+\") + t;\n        }\n        function H(e, t, r) {\n          var n, i;\n          if (t < 0) {\n            for (i = r + \".\"; ++t; i += r);\n            e = i + e;\n          } else if (++t > (n = e.length)) {\n            for (i = r, t -= n; --t; i += r);\n            e += i;\n          } else t < n && (e = e.slice(0, t) + \".\" + e.slice(t));\n          return e;\n        }\n        (t = function e(t) {\n          var y,\n            f,\n            p,\n            r,\n            s,\n            o,\n            u,\n            c,\n            l,\n            g,\n            n = A.prototype = {\n              constructor: A,\n              toString: null,\n              valueOf: null\n            },\n            d = new A(1),\n            b = 20,\n            w = 4,\n            h = -7,\n            v = 21,\n            m = -1e7,\n            O = 1e7,\n            x = !1,\n            a = 1,\n            S = 0,\n            N = {\n              prefix: \"\",\n              groupSize: 3,\n              secondaryGroupSize: 0,\n              groupSeparator: \",\",\n              decimalSeparator: \".\",\n              fractionGroupSize: 0,\n              fractionGroupSeparator: \"Â \",\n              suffix: \"\"\n            },\n            M = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n          function A(e, t) {\n            var r,\n              n,\n              i,\n              a,\n              o,\n              u,\n              c,\n              s,\n              l = this;\n            if (!(l instanceof A)) return new A(e, t);\n            if (null == t) {\n              if (e instanceof A) return l.s = e.s, l.e = e.e, void (l.c = (e = e.c) ? e.slice() : e);\n              if ((u = \"number\" == typeof e) && 0 * e == 0) {\n                if (l.s = 1 / e < 0 ? (e = -e, -1) : 1, e === ~~e) {\n                  for (a = 0, o = e; 10 <= o; o /= 10, a++);\n                  return l.e = a, void (l.c = [e]);\n                }\n                s = String(e);\n              } else {\n                if (s = String(e), !k.test(s)) return p(l, s, u);\n                l.s = 45 == s.charCodeAt(0) ? (s = s.slice(1), -1) : 1;\n              }\n              -1 < (a = s.indexOf(\".\")) && (s = s.replace(\".\", \"\")), 0 < (o = s.search(/e/i)) ? (a < 0 && (a = o), a += +s.slice(o + 1), s = s.substring(0, o)) : a < 0 && (a = s.length);\n            } else {\n              if (Z(t, 2, M.length, \"Base\"), s = String(e), 10 == t) return E(l = new A(e instanceof A ? e : s), b + l.e + 1, w);\n              if (u = \"number\" == typeof e) {\n                if (0 * e != 0) return p(l, s, u, t);\n                if (l.s = 1 / e < 0 ? (s = s.slice(1), -1) : 1, A.DEBUG && 15 < s.replace(/^0\\.0*|\\./, \"\").length) throw Error(P + e);\n                u = !1;\n              } else l.s = 45 === s.charCodeAt(0) ? (s = s.slice(1), -1) : 1;\n              for (r = M.slice(0, t), a = o = 0, c = s.length; o < c; o++) if (r.indexOf(n = s.charAt(o)) < 0) {\n                if (\".\" == n) {\n                  if (a < o) {\n                    a = c;\n                    continue;\n                  }\n                } else if (!i && (s == s.toUpperCase() && (s = s.toLowerCase()) || s == s.toLowerCase() && (s = s.toUpperCase()))) {\n                  i = !0, o = -1, a = 0;\n                  continue;\n                }\n                return p(l, String(e), u, t);\n              }\n              -1 < (a = (s = f(s, t, 10, l.s)).indexOf(\".\")) ? s = s.replace(\".\", \"\") : a = s.length;\n            }\n            for (o = 0; 48 === s.charCodeAt(o); o++);\n            for (c = s.length; 48 === s.charCodeAt(--c););\n            if (s = s.slice(o, ++c)) {\n              if (c -= o, u && A.DEBUG && 15 < c && (C < e || e !== L(e))) throw Error(P + l.s * e);\n              if (O < (a = a - o - 1)) l.c = l.e = null;else if (a < m) l.c = [l.e = 0];else {\n                if (l.e = a, l.c = [], o = (a + 1) % j, a < 0 && (o += j), o < c) {\n                  for (o && l.c.push(+s.slice(0, o)), c -= j; o < c;) l.c.push(+s.slice(o, o += j));\n                  s = s.slice(o), o = j - s.length;\n                } else o -= c;\n                for (; o--; s += \"0\");\n                l.c.push(+s);\n              }\n            } else l.c = [l.e = 0];\n          }\n          function i(e, t, r, n) {\n            var i, a, o, u, c;\n            if (null == r ? r = w : Z(r, 0, 8), !e.c) return e.toString();\n            if (i = e.c[0], o = e.e, null == t) c = V(e.c), c = 1 == n || 2 == n && (o <= h || v <= o) ? W(c, o) : H(c, o, \"0\");else if (a = (e = E(new A(e), t, r)).e, u = (c = V(e.c)).length, 1 == n || 2 == n && (t <= a || a <= h)) {\n              for (; u < t; c += \"0\", u++);\n              c = W(c, a);\n            } else if (t -= o, c = H(c, a, \"0\"), u < a + 1) {\n              if (0 < --t) for (c += \".\"; t--; c += \"0\");\n            } else if (0 < (t += a - u)) for (a + 1 == u && (c += \".\"); t--; c += \"0\");\n            return e.s < 0 && i ? \"-\" + c : c;\n          }\n          function B(e, t) {\n            for (var r, n = 1, i = new A(e[0]); n < e.length; n++) {\n              if (!(r = new A(e[n])).s) {\n                i = r;\n                break;\n              }\n              t.call(i, r) && (i = r);\n            }\n            return i;\n          }\n          function D(e, t, r) {\n            for (var n = 1, i = t.length; !t[--i]; t.pop());\n            for (i = t[0]; 10 <= i; i /= 10, n++);\n            return (r = n + r * j - 1) > O ? e.c = e.e = null : e.c = r < m ? [e.e = 0] : (e.e = r, t), e;\n          }\n          function E(e, t, r, n) {\n            var i,\n              a,\n              o,\n              u,\n              c,\n              s,\n              l,\n              f = e.c,\n              p = R;\n            if (f) {\n              e: {\n                for (i = 1, u = f[0]; 10 <= u; u /= 10, i++);\n                if ((a = t - i) < 0) a += j, o = t, l = (c = f[s = 0]) / p[i - o - 1] % 10 | 0;else if ((s = _((a + 1) / j)) >= f.length) {\n                  if (!n) break e;\n                  for (; f.length <= s; f.push(0));\n                  c = l = 0, o = (a %= j) - j + (i = 1);\n                } else {\n                  for (c = u = f[s], i = 1; 10 <= u; u /= 10, i++);\n                  l = (o = (a %= j) - j + i) < 0 ? 0 : c / p[i - o - 1] % 10 | 0;\n                }\n                if (n = n || t < 0 || null != f[s + 1] || (o < 0 ? c : c % p[i - o - 1]), n = r < 4 ? (l || n) && (0 == r || r == (e.s < 0 ? 3 : 2)) : 5 < l || 5 == l && (4 == r || n || 6 == r && (0 < a ? 0 < o ? c / p[i - o] : 0 : f[s - 1]) % 10 & 1 || r == (e.s < 0 ? 8 : 7)), t < 1 || !f[0]) return f.length = 0, n ? (t -= e.e + 1, f[0] = p[(j - t % j) % j], e.e = -t || 0) : f[0] = e.e = 0, e;\n                if (0 == a ? (f.length = s, u = 1, s--) : (f.length = s + 1, u = p[j - a], f[s] = 0 < o ? L(c / p[i - o] % p[o]) * u : 0), n) for (;;) {\n                  if (0 == s) {\n                    for (a = 1, o = f[0]; 10 <= o; o /= 10, a++);\n                    for (o = f[0] += u, u = 1; 10 <= o; o /= 10, u++);\n                    a != u && (e.e++, f[0] == U && (f[0] = 1));\n                    break;\n                  }\n                  if (f[s] += u, f[s] != U) break;\n                  f[s--] = 0, u = 1;\n                }\n                for (a = f.length; 0 === f[--a]; f.pop());\n              }\n              e.e > O ? e.c = e.e = null : e.e < m && (e.c = [e.e = 0]);\n            }\n            return e;\n          }\n          function F(e) {\n            var t,\n              r = e.e;\n            return null === r ? e.toString() : (t = V(e.c), t = r <= h || v <= r ? W(t, r) : H(t, r, \"0\"), e.s < 0 ? \"-\" + t : t);\n          }\n          return A.clone = e, A.ROUND_UP = 0, A.ROUND_DOWN = 1, A.ROUND_CEIL = 2, A.ROUND_FLOOR = 3, A.ROUND_HALF_UP = 4, A.ROUND_HALF_DOWN = 5, A.ROUND_HALF_EVEN = 6, A.ROUND_HALF_CEIL = 7, A.ROUND_HALF_FLOOR = 8, A.EUCLID = 9, A.config = A.set = function (e) {\n            var t, r;\n            if (null != e) {\n              if (\"object\" != typeof e) throw Error(T + \"Object expected: \" + e);\n              if (e.hasOwnProperty(t = \"DECIMAL_PLACES\") && (Z(r = e[t], 0, $, t), b = r), e.hasOwnProperty(t = \"ROUNDING_MODE\") && (Z(r = e[t], 0, 8, t), w = r), e.hasOwnProperty(t = \"EXPONENTIAL_AT\") && ((r = e[t]) && r.pop ? (Z(r[0], -$, 0, t), Z(r[1], 0, $, t), h = r[0], v = r[1]) : (Z(r, -$, $, t), h = -(v = r < 0 ? -r : r))), e.hasOwnProperty(t = \"RANGE\")) if ((r = e[t]) && r.pop) Z(r[0], -$, -1, t), Z(r[1], 1, $, t), m = r[0], O = r[1];else {\n                if (Z(r, -$, $, t), !r) throw Error(T + t + \" cannot be zero: \" + r);\n                m = -(O = r < 0 ? -r : r);\n              }\n              if (e.hasOwnProperty(t = \"CRYPTO\")) {\n                if ((r = e[t]) !== !!r) throw Error(T + t + \" not true or false: \" + r);\n                if (r) {\n                  if (\"undefined\" == typeof crypto || !crypto || !crypto.getRandomValues && !crypto.randomBytes) throw x = !r, Error(T + \"crypto unavailable\");\n                  x = r;\n                } else x = r;\n              }\n              if (e.hasOwnProperty(t = \"MODULO_MODE\") && (Z(r = e[t], 0, 9, t), a = r), e.hasOwnProperty(t = \"POW_PRECISION\") && (Z(r = e[t], 0, $, t), S = r), e.hasOwnProperty(t = \"FORMAT\")) {\n                if (\"object\" != typeof (r = e[t])) throw Error(T + t + \" not an object: \" + r);\n                N = r;\n              }\n              if (e.hasOwnProperty(t = \"ALPHABET\")) {\n                if (\"string\" != typeof (r = e[t]) || /^.$|[+-.\\s]|(.).*\\1/.test(r)) throw Error(T + t + \" invalid: \" + r);\n                M = r;\n              }\n            }\n            return {\n              DECIMAL_PLACES: b,\n              ROUNDING_MODE: w,\n              EXPONENTIAL_AT: [h, v],\n              RANGE: [m, O],\n              CRYPTO: x,\n              MODULO_MODE: a,\n              POW_PRECISION: S,\n              FORMAT: N,\n              ALPHABET: M\n            };\n          }, A.isBigNumber = function (e) {\n            return e instanceof A || e && !0 === e._isBigNumber || !1;\n          }, A.maximum = A.max = function () {\n            return B(arguments, n.lt);\n          }, A.minimum = A.min = function () {\n            return B(arguments, n.gt);\n          }, A.random = (r = 9007199254740992, s = Math.random() * r & 2097151 ? function () {\n            return L(Math.random() * r);\n          } : function () {\n            return 8388608 * (1073741824 * Math.random() | 0) + (8388608 * Math.random() | 0);\n          }, function (e) {\n            var t,\n              r,\n              n,\n              i,\n              a,\n              o = 0,\n              u = [],\n              c = new A(d);\n            if (null == e ? e = b : Z(e, 0, $), i = _(e / j), x) if (crypto.getRandomValues) {\n              for (t = crypto.getRandomValues(new Uint32Array(i *= 2)); o < i;) 9e15 <= (a = 131072 * t[o] + (t[o + 1] >>> 11)) ? (r = crypto.getRandomValues(new Uint32Array(2)), t[o] = r[0], t[o + 1] = r[1]) : (u.push(a % 1e14), o += 2);\n              o = i / 2;\n            } else {\n              if (!crypto.randomBytes) throw x = !1, Error(T + \"crypto unavailable\");\n              for (t = crypto.randomBytes(i *= 7); o < i;) 9e15 <= (a = 281474976710656 * (31 & t[o]) + 1099511627776 * t[o + 1] + 4294967296 * t[o + 2] + 16777216 * t[o + 3] + (t[o + 4] << 16) + (t[o + 5] << 8) + t[o + 6]) ? crypto.randomBytes(7).copy(t, o) : (u.push(a % 1e14), o += 7);\n              o = i / 7;\n            }\n            if (!x) for (; o < i;) (a = s()) < 9e15 && (u[o++] = a % 1e14);\n            for (i = u[--o], e %= j, i && e && (a = R[j - e], u[o] = L(i / a) * a); 0 === u[o]; u.pop(), o--);\n            if (o < 0) u = [n = 0];else {\n              for (n = -1; 0 === u[0]; u.splice(0, 1), n -= j);\n              for (o = 1, a = u[0]; 10 <= a; a /= 10, o++);\n              o < j && (n -= j - o);\n            }\n            return c.e = n, c.c = u, c;\n          }), A.sum = function () {\n            for (var e = 1, t = arguments, r = new A(t[0]); e < t.length;) r = r.plus(t[e++]);\n            return r;\n          }, f = function () {\n            var v = \"0123456789\";\n            function m(e, t, r, n) {\n              for (var i, a, o = [0], u = 0, c = e.length; u < c;) {\n                for (a = o.length; a--; o[a] *= t);\n                for (o[0] += n.indexOf(e.charAt(u++)), i = 0; i < o.length; i++) o[i] > r - 1 && (null == o[i + 1] && (o[i + 1] = 0), o[i + 1] += o[i] / r | 0, o[i] %= r);\n              }\n              return o.reverse();\n            }\n            return function (e, t, r, n, i) {\n              var a,\n                o,\n                u,\n                c,\n                s,\n                l,\n                f,\n                p,\n                g = e.indexOf(\".\"),\n                h = b,\n                d = w;\n              for (0 <= g && (c = S, S = 0, e = e.replace(\".\", \"\"), l = (p = new A(t)).pow(e.length - g), S = c, p.c = m(H(V(l.c), l.e, \"0\"), 10, r, v), p.e = p.c.length), u = c = (f = m(e, t, r, i ? (a = M, v) : (a = v, M))).length; 0 == f[--c]; f.pop());\n              if (!f[0]) return a.charAt(0);\n              if (g < 0 ? --u : (l.c = f, l.e = u, l.s = n, f = (l = y(l, p, h, d, r)).c, s = l.r, u = l.e), g = f[o = u + h + 1], c = r / 2, s = s || o < 0 || null != f[o + 1], s = d < 4 ? (null != g || s) && (0 == d || d == (l.s < 0 ? 3 : 2)) : c < g || g == c && (4 == d || s || 6 == d && 1 & f[o - 1] || d == (l.s < 0 ? 8 : 7)), o < 1 || !f[0]) e = s ? H(a.charAt(1), -h, a.charAt(0)) : a.charAt(0);else {\n                if (f.length = o, s) for (--r; ++f[--o] > r;) f[o] = 0, o || (++u, f = [1].concat(f));\n                for (c = f.length; !f[--c];);\n                for (g = 0, e = \"\"; g <= c; e += a.charAt(f[g++]));\n                e = H(e, u, a.charAt(0));\n              }\n              return e;\n            };\n          }(), y = function () {\n            function M(e, t, r) {\n              var n,\n                i,\n                a,\n                o,\n                u = 0,\n                c = e.length,\n                s = t % I,\n                l = t / I | 0;\n              for (e = e.slice(); c--;) u = ((i = s * (a = e[c] % I) + (n = l * a + (o = e[c] / I | 0) * s) % I * I + u) / r | 0) + (n / I | 0) + l * o, e[c] = i % r;\n              return u && (e = [u].concat(e)), e;\n            }\n            function B(e, t, r, n) {\n              var i, a;\n              if (r != n) a = n < r ? 1 : -1;else for (i = a = 0; i < r; i++) if (e[i] != t[i]) {\n                a = e[i] > t[i] ? 1 : -1;\n                break;\n              }\n              return a;\n            }\n            function D(e, t, r, n) {\n              for (var i = 0; r--;) e[r] -= i, i = e[r] < t[r] ? 1 : 0, e[r] = i * n + e[r] - t[r];\n              for (; !e[0] && 1 < e.length; e.splice(0, 1));\n            }\n            return function (e, t, r, n, i) {\n              var a,\n                o,\n                u,\n                c,\n                s,\n                l,\n                f,\n                p,\n                g,\n                h,\n                d,\n                v,\n                m,\n                y,\n                b,\n                w,\n                O,\n                x = e.s == t.s ? 1 : -1,\n                S = e.c,\n                N = t.c;\n              if (!(S && S[0] && N && N[0])) return new A(e.s && t.s && (S ? !N || S[0] != N[0] : N) ? S && 0 == S[0] || !N ? 0 * x : x / 0 : NaN);\n              for (g = (p = new A(x)).c = [], x = r + (o = e.e - t.e) + 1, i || (i = U, o = G(e.e / j) - G(t.e / j), x = x / j | 0), u = 0; N[u] == (S[u] || 0); u++);\n              if (N[u] > (S[u] || 0) && o--, x < 0) g.push(1), c = !0;else {\n                for (y = S.length, w = N.length, x += 2, 1 < (s = L(i / (N[u = 0] + 1))) && (N = M(N, s, i), S = M(S, s, i), w = N.length, y = S.length), m = w, d = (h = S.slice(0, w)).length; d < w; h[d++] = 0);\n                O = N.slice(), O = [0].concat(O), b = N[0], N[1] >= i / 2 && b++;\n                do {\n                  if (s = 0, (a = B(N, h, w, d)) < 0) {\n                    if (v = h[0], w != d && (v = v * i + (h[1] || 0)), 1 < (s = L(v / b))) for (i <= s && (s = i - 1), f = (l = M(N, s, i)).length, d = h.length; 1 == B(l, h, f, d);) s--, D(l, w < f ? O : N, f, i), f = l.length, a = 1;else 0 == s && (a = s = 1), f = (l = N.slice()).length;\n                    if (f < d && (l = [0].concat(l)), D(h, l, d, i), d = h.length, -1 == a) for (; B(N, h, w, d) < 1;) s++, D(h, w < d ? O : N, d, i), d = h.length;\n                  } else 0 === a && (s++, h = [0]);\n                  g[u++] = s, h[0] ? h[d++] = S[m] || 0 : (h = [S[m]], d = 1);\n                } while ((m++ < y || null != h[0]) && x--);\n                c = null != h[0], g[0] || g.splice(0, 1);\n              }\n              if (i == U) {\n                for (u = 1, x = g[0]; 10 <= x; x /= 10, u++);\n                E(p, r + (p.e = u + o * j - 1) + 1, n, c);\n              } else p.e = o, p.r = +c;\n              return p;\n            };\n          }(), o = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i, u = /^([^.]+)\\.$/, c = /^\\.([^.]+)$/, l = /^-?(Infinity|NaN)$/, g = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g, p = function (e, t, r, n) {\n            var i,\n              a = r ? t : t.replace(g, \"\");\n            if (l.test(a)) e.s = isNaN(a) ? null : a < 0 ? -1 : 1, e.c = e.e = null;else {\n              if (!r && (a = a.replace(o, function (e, t, r) {\n                return i = \"x\" == (r = r.toLowerCase()) ? 16 : \"b\" == r ? 2 : 8, n && n != i ? e : t;\n              }), n && (i = n, a = a.replace(u, \"$1\").replace(c, \"0.$1\")), t != a)) return new A(a, i);\n              if (A.DEBUG) throw Error(T + \"Not a\" + (n ? \" base \" + n : \"\") + \" number: \" + t);\n              e.c = e.e = e.s = null;\n            }\n          }, n.absoluteValue = n.abs = function () {\n            var e = new A(this);\n            return e.s < 0 && (e.s = 1), e;\n          }, n.comparedTo = function (e, t) {\n            return q(this, new A(e, t));\n          }, n.decimalPlaces = n.dp = function (e, t) {\n            var r, n, i;\n            if (null != e) return Z(e, 0, $), null == t ? t = w : Z(t, 0, 8), E(new A(this), e + this.e + 1, t);\n            if (!(r = this.c)) return null;\n            if (n = ((i = r.length - 1) - G(this.e / j)) * j, i = r[i]) for (; i % 10 == 0; i /= 10, n--);\n            return n < 0 && (n = 0), n;\n          }, n.dividedBy = n.div = function (e, t) {\n            return y(this, new A(e, t), b, w);\n          }, n.dividedToIntegerBy = n.idiv = function (e, t) {\n            return y(this, new A(e, t), 0, 1);\n          }, n.exponentiatedBy = n.pow = function (e, t) {\n            var r,\n              n,\n              i,\n              a,\n              o,\n              u,\n              c,\n              s,\n              l = this;\n            if ((e = new A(e)).c && !e.isInteger()) throw Error(T + \"Exponent not an integer: \" + F(e));\n            if (null != t && (t = new A(t)), o = 14 < e.e, !l.c || !l.c[0] || 1 == l.c[0] && !l.e && 1 == l.c.length || !e.c || !e.c[0]) return s = new A(Math.pow(+F(l), o ? 2 - z(e) : +F(e))), t ? s.mod(t) : s;\n            if (u = e.s < 0, t) {\n              if (t.c ? !t.c[0] : !t.s) return new A(NaN);\n              (n = !u && l.isInteger() && t.isInteger()) && (l = l.mod(t));\n            } else {\n              if (9 < e.e && (0 < l.e || l.e < -1 || (0 == l.e ? 1 < l.c[0] || o && 24e7 <= l.c[1] : l.c[0] < 8e13 || o && l.c[0] <= 9999975e7))) return a = l.s < 0 && z(e) ? -0 : 0, -1 < l.e && (a = 1 / a), new A(u ? 1 / a : a);\n              S && (a = _(S / j + 2));\n            }\n            for (c = o ? (r = new A(.5), u && (e.s = 1), z(e)) : (i = Math.abs(+F(e))) % 2, s = new A(d);;) {\n              if (c) {\n                if (!(s = s.times(l)).c) break;\n                a ? s.c.length > a && (s.c.length = a) : n && (s = s.mod(t));\n              }\n              if (i) {\n                if (0 === (i = L(i / 2))) break;\n                c = i % 2;\n              } else if (E(e = e.times(r), e.e + 1, 1), 14 < e.e) c = z(e);else {\n                if (0 == (i = +F(e))) break;\n                c = i % 2;\n              }\n              l = l.times(l), a ? l.c && l.c.length > a && (l.c.length = a) : n && (l = l.mod(t));\n            }\n            return n ? s : (u && (s = d.div(s)), t ? s.mod(t) : a ? E(s, S, w, void 0) : s);\n          }, n.integerValue = function (e) {\n            var t = new A(this);\n            return null == e ? e = w : Z(e, 0, 8), E(t, t.e + 1, e);\n          }, n.isEqualTo = n.eq = function (e, t) {\n            return 0 === q(this, new A(e, t));\n          }, n.isFinite = function () {\n            return !!this.c;\n          }, n.isGreaterThan = n.gt = function (e, t) {\n            return 0 < q(this, new A(e, t));\n          }, n.isGreaterThanOrEqualTo = n.gte = function (e, t) {\n            return 1 === (t = q(this, new A(e, t))) || 0 === t;\n          }, n.isInteger = function () {\n            return !!this.c && G(this.e / j) > this.c.length - 2;\n          }, n.isLessThan = n.lt = function (e, t) {\n            return q(this, new A(e, t)) < 0;\n          }, n.isLessThanOrEqualTo = n.lte = function (e, t) {\n            return -1 === (t = q(this, new A(e, t))) || 0 === t;\n          }, n.isNaN = function () {\n            return !this.s;\n          }, n.isNegative = function () {\n            return this.s < 0;\n          }, n.isPositive = function () {\n            return 0 < this.s;\n          }, n.isZero = function () {\n            return !!this.c && 0 == this.c[0];\n          }, n.minus = function (e, t) {\n            var r,\n              n,\n              i,\n              a,\n              o = this,\n              u = o.s;\n            if (t = (e = new A(e, t)).s, !u || !t) return new A(NaN);\n            if (u != t) return e.s = -t, o.plus(e);\n            var c = o.e / j,\n              s = e.e / j,\n              l = o.c,\n              f = e.c;\n            if (!c || !s) {\n              if (!l || !f) return l ? (e.s = -t, e) : new A(f ? o : NaN);\n              if (!l[0] || !f[0]) return f[0] ? (e.s = -t, e) : new A(l[0] ? o : 3 == w ? -0 : 0);\n            }\n            if (c = G(c), s = G(s), l = l.slice(), u = c - s) {\n              for ((i = (a = u < 0) ? (u = -u, l) : (s = c, f)).reverse(), t = u; t--; i.push(0));\n              i.reverse();\n            } else for (n = (a = (u = l.length) < (t = f.length)) ? u : t, u = t = 0; t < n; t++) if (l[t] != f[t]) {\n              a = l[t] < f[t];\n              break;\n            }\n            if (a && (i = l, l = f, f = i, e.s = -e.s), 0 < (t = (n = f.length) - (r = l.length))) for (; t--; l[r++] = 0);\n            for (t = U - 1; u < n;) {\n              if (l[--n] < f[n]) {\n                for (r = n; r && !l[--r]; l[r] = t);\n                --l[r], l[n] += U;\n              }\n              l[n] -= f[n];\n            }\n            for (; 0 == l[0]; l.splice(0, 1), --s);\n            return l[0] ? D(e, l, s) : (e.s = 3 == w ? -1 : 1, e.c = [e.e = 0], e);\n          }, n.modulo = n.mod = function (e, t) {\n            var r,\n              n,\n              i = this;\n            return e = new A(e, t), !i.c || !e.s || e.c && !e.c[0] ? new A(NaN) : !e.c || i.c && !i.c[0] ? new A(i) : (9 == a ? (n = e.s, e.s = 1, r = y(i, e, 0, 3), e.s = n, r.s *= n) : r = y(i, e, 0, a), (e = i.minus(r.times(e))).c[0] || 1 != a || (e.s = i.s), e);\n          }, n.multipliedBy = n.times = function (e, t) {\n            var r,\n              n,\n              i,\n              a,\n              o,\n              u,\n              c,\n              s,\n              l,\n              f,\n              p,\n              g,\n              h,\n              d,\n              v,\n              m = this,\n              y = m.c,\n              b = (e = new A(e, t)).c;\n            if (!(y && b && y[0] && b[0])) return !m.s || !e.s || y && !y[0] && !b || b && !b[0] && !y ? e.c = e.e = e.s = null : (e.s *= m.s, y && b ? (e.c = [0], e.e = 0) : e.c = e.e = null), e;\n            for (n = G(m.e / j) + G(e.e / j), e.s *= m.s, (c = y.length) < (f = b.length) && (h = y, y = b, b = h, i = c, c = f, f = i), i = c + f, h = []; i--; h.push(0));\n            for (d = U, v = I, i = f; 0 <= --i;) {\n              for (r = 0, p = b[i] % v, g = b[i] / v | 0, a = i + (o = c); i < a;) r = ((s = p * (s = y[--o] % v) + (u = g * s + (l = y[o] / v | 0) * p) % v * v + h[a] + r) / d | 0) + (u / v | 0) + g * l, h[a--] = s % d;\n              h[a] = r;\n            }\n            return r ? ++n : h.splice(0, 1), D(e, h, n);\n          }, n.negated = function () {\n            var e = new A(this);\n            return e.s = -e.s || null, e;\n          }, n.plus = function (e, t) {\n            var r,\n              n = this,\n              i = n.s;\n            if (t = (e = new A(e, t)).s, !i || !t) return new A(NaN);\n            if (i != t) return e.s = -t, n.minus(e);\n            var a = n.e / j,\n              o = e.e / j,\n              u = n.c,\n              c = e.c;\n            if (!a || !o) {\n              if (!u || !c) return new A(i / 0);\n              if (!u[0] || !c[0]) return c[0] ? e : new A(u[0] ? n : 0 * i);\n            }\n            if (a = G(a), o = G(o), u = u.slice(), i = a - o) {\n              for ((r = 0 < i ? (o = a, c) : (i = -i, u)).reverse(); i--; r.push(0));\n              r.reverse();\n            }\n            for ((i = u.length) - (t = c.length) < 0 && (r = c, c = u, u = r, t = i), i = 0; t;) i = (u[--t] = u[t] + c[t] + i) / U | 0, u[t] = U === u[t] ? 0 : u[t] % U;\n            return i && (u = [i].concat(u), ++o), D(e, u, o);\n          }, n.precision = n.sd = function (e, t) {\n            var r, n, i;\n            if (null != e && e !== !!e) return Z(e, 1, $), null == t ? t = w : Z(t, 0, 8), E(new A(this), e, t);\n            if (!(r = this.c)) return null;\n            if (n = (i = r.length - 1) * j + 1, i = r[i]) {\n              for (; i % 10 == 0; i /= 10, n--);\n              for (i = r[0]; 10 <= i; i /= 10, n++);\n            }\n            return e && this.e + 1 > n && (n = this.e + 1), n;\n          }, n.shiftedBy = function (e) {\n            return Z(e, -C, C), this.times(\"1e\" + e);\n          }, n.squareRoot = n.sqrt = function () {\n            var e,\n              t,\n              r,\n              n,\n              i,\n              a = this,\n              o = a.c,\n              u = a.s,\n              c = a.e,\n              s = b + 4,\n              l = new A(\"0.5\");\n            if (1 !== u || !o || !o[0]) return new A(!u || u < 0 && (!o || o[0]) ? NaN : o ? a : 1 / 0);\n            if ((r = 0 == (u = Math.sqrt(+F(a))) || u == 1 / 0 ? (((t = V(o)).length + c) % 2 == 0 && (t += \"0\"), u = Math.sqrt(+t), c = G((c + 1) / 2) - (c < 0 || c % 2), new A(t = u == 1 / 0 ? \"1e\" + c : (t = u.toExponential()).slice(0, t.indexOf(\"e\") + 1) + c)) : new A(u + \"\")).c[0]) for ((u = (c = r.e) + s) < 3 && (u = 0);;) if (i = r, r = l.times(i.plus(y(a, i, s, 1))), V(i.c).slice(0, u) === (t = V(r.c)).slice(0, u)) {\n              if (r.e < c && --u, \"9999\" != (t = t.slice(u - 3, u + 1)) && (n || \"4999\" != t)) {\n                +t && (+t.slice(1) || \"5\" != t.charAt(0)) || (E(r, r.e + b + 2, 1), e = !r.times(r).eq(a));\n                break;\n              }\n              if (!n && (E(i, i.e + b + 2, 0), i.times(i).eq(a))) {\n                r = i;\n                break;\n              }\n              s += 4, u += 4, n = 1;\n            }\n            return E(r, r.e + b + 1, w, e);\n          }, n.toExponential = function (e, t) {\n            return null != e && (Z(e, 0, $), e++), i(this, e, t, 1);\n          }, n.toFixed = function (e, t) {\n            return null != e && (Z(e, 0, $), e = e + this.e + 1), i(this, e, t);\n          }, n.toFormat = function (e, t, r) {\n            var n;\n            if (null == r) null != e && t && \"object\" == typeof t ? (r = t, t = null) : e && \"object\" == typeof e ? (r = e, e = t = null) : r = N;else if (\"object\" != typeof r) throw Error(T + \"Argument not an object: \" + r);\n            if (n = this.toFixed(e, t), this.c) {\n              var i,\n                a = n.split(\".\"),\n                o = +r.groupSize,\n                u = +r.secondaryGroupSize,\n                c = r.groupSeparator || \"\",\n                s = a[0],\n                l = a[1],\n                f = this.s < 0,\n                p = f ? s.slice(1) : s,\n                g = p.length;\n              if (u && (i = o, o = u, g -= u = i), 0 < o && 0 < g) {\n                for (i = g % o || o, s = p.substr(0, i); i < g; i += o) s += c + p.substr(i, o);\n                0 < u && (s += c + p.slice(i)), f && (s = \"-\" + s);\n              }\n              n = l ? s + (r.decimalSeparator || \"\") + ((u = +r.fractionGroupSize) ? l.replace(new RegExp(\"\\\\d{\" + u + \"}\\\\B\", \"g\"), \"$&\" + (r.fractionGroupSeparator || \"\")) : l) : s;\n            }\n            return (r.prefix || \"\") + n + (r.suffix || \"\");\n          }, n.toFraction = function (e) {\n            var t,\n              r,\n              n,\n              i,\n              a,\n              o,\n              u,\n              c,\n              s,\n              l,\n              f,\n              p,\n              g = this,\n              h = g.c;\n            if (null != e && (!(u = new A(e)).isInteger() && (u.c || 1 !== u.s) || u.lt(d))) throw Error(T + \"Argument \" + (u.isInteger() ? \"out of range: \" : \"not an integer: \") + F(u));\n            if (!h) return new A(g);\n            for (t = new A(d), s = r = new A(d), n = c = new A(d), p = V(h), a = t.e = p.length - g.e - 1, t.c[0] = R[(o = a % j) < 0 ? j + o : o], e = !e || 0 < u.comparedTo(t) ? 0 < a ? t : s : u, o = O, O = 1 / 0, u = new A(p), c.c[0] = 0; l = y(u, t, 0, 1), 1 != (i = r.plus(l.times(n))).comparedTo(e);) r = n, n = i, s = c.plus(l.times(i = s)), c = i, t = u.minus(l.times(i = t)), u = i;\n            return i = y(e.minus(r), n, 0, 1), c = c.plus(i.times(s)), r = r.plus(i.times(n)), c.s = s.s = g.s, f = y(s, n, a *= 2, w).minus(g).abs().comparedTo(y(c, r, a, w).minus(g).abs()) < 1 ? [s, n] : [c, r], O = o, f;\n          }, n.toNumber = function () {\n            return +F(this);\n          }, n.toPrecision = function (e, t) {\n            return null != e && Z(e, 1, $), i(this, e, t, 2);\n          }, n.toString = function (e) {\n            var t,\n              r = this,\n              n = r.s,\n              i = r.e;\n            return null === i ? n ? (t = \"Infinity\", n < 0 && (t = \"-\" + t)) : t = \"NaN\" : (t = null == e ? i <= h || v <= i ? W(V(r.c), i) : H(V(r.c), i, \"0\") : 10 === e ? H(V((r = E(new A(r), b + i + 1, w)).c), r.e, \"0\") : (Z(e, 2, M.length, \"Base\"), f(H(V(r.c), i, \"0\"), 10, e, n, !0)), n < 0 && r.c[0] && (t = \"-\" + t)), t;\n          }, n.valueOf = n.toJSON = function () {\n            return F(this);\n          }, n._isBigNumber = !0, \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator && (n[Symbol.toStringTag] = \"BigNumber\", n[Symbol.for(\"nodejs.util.inspect.custom\")] = n.valueOf), null != t && A.set(t), A;\n        }()).default = t.BigNumber = t, void 0 !== r && r.exports ? r.exports = t : (e || (e = \"undefined\" != typeof self && self ? self : window), e.BigNumber = t);\n      }(this);\n    }, {}],\n    2: [function (e, t, r) {\n      \"use strict\";\n\n      t.exports = {\n        languageTag: \"en-US\",\n        delimiters: {\n          thousands: \",\",\n          decimal: \".\"\n        },\n        abbreviations: {\n          thousand: \"k\",\n          million: \"m\",\n          billion: \"b\",\n          trillion: \"t\"\n        },\n        spaceSeparated: !1,\n        ordinal: function (e) {\n          var t = e % 10;\n          return 1 == ~~(e % 100 / 10) ? \"th\" : 1 === t ? \"st\" : 2 === t ? \"nd\" : 3 === t ? \"rd\" : \"th\";\n        },\n        currency: {\n          symbol: \"$\",\n          position: \"prefix\",\n          code: \"USD\"\n        },\n        currencyFormat: {\n          thousandSeparated: !0,\n          totalLength: 4,\n          spaceSeparated: !0\n        },\n        formats: {\n          fourDigits: {\n            totalLength: 4,\n            spaceSeparated: !0\n          },\n          fullWithTwoDecimals: {\n            output: \"currency\",\n            thousandSeparated: !0,\n            mantissa: 2\n          },\n          fullWithTwoDecimalsNoCurrency: {\n            thousandSeparated: !0,\n            mantissa: 2\n          },\n          fullWithNoDecimals: {\n            output: \"currency\",\n            thousandSeparated: !0,\n            mantissa: 0\n          }\n        }\n      };\n    }, {}],\n    3: [function (e, t, r) {\n      \"use strict\";\n\n      function C(e, t) {\n        return function (e) {\n          if (Array.isArray(e)) return e;\n        }(e) || function (e, t) {\n          var r = [],\n            n = !0,\n            i = !1,\n            a = void 0;\n          try {\n            for (var o, u = e[Symbol.iterator](); !(n = (o = u.next()).done) && (r.push(o.value), !t || r.length !== t); n = !0);\n          } catch (e) {\n            i = !0, a = e;\n          } finally {\n            try {\n              n || null == u.return || u.return();\n            } finally {\n              if (i) throw a;\n            }\n          }\n          return r;\n        }(e, t) || function () {\n          throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n        }();\n      }\n      var R = e(\"./globalState\"),\n        o = e(\"./validating\"),\n        u = e(\"./parsing\"),\n        n = [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"],\n        M = {\n          general: {\n            scale: 1024,\n            suffixes: n,\n            marker: \"bd\"\n          },\n          binary: {\n            scale: 1024,\n            suffixes: [\"B\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"ZiB\", \"YiB\"],\n            marker: \"b\"\n          },\n          decimal: {\n            scale: 1e3,\n            suffixes: n,\n            marker: \"d\"\n          }\n        },\n        I = {\n          totalLength: 0,\n          characteristic: 0,\n          forceAverage: !1,\n          average: !1,\n          mantissa: -1,\n          optionalMantissa: !0,\n          thousandSeparated: !1,\n          spaceSeparated: !1,\n          negative: \"sign\",\n          forceSign: !1\n        };\n      function i(e) {\n        var t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {},\n          r = 2 < arguments.length ? arguments[2] : void 0;\n        if (\"string\" == typeof t && (t = u.parseFormat(t)), !o.validateFormat(t)) return \"ERROR: invalid format\";\n        var n = t.prefix || \"\",\n          i = t.postfix || \"\",\n          a = function (e, t, r) {\n            switch (t.output) {\n              case \"currency\":\n                return t = A(t, R.currentCurrencyDefaultFormat()), function (e, t, r) {\n                  var n = r.currentCurrency(),\n                    i = Object.assign({}, I, t),\n                    a = void 0,\n                    o = \"\",\n                    u = !!i.totalLength || !!i.forceAverage || i.average,\n                    c = t.currencyPosition || n.position,\n                    s = t.currencySymbol || n.symbol;\n                  i.spaceSeparated && (o = \" \");\n                  \"infix\" === c && (a = o + s + o);\n                  var l = D({\n                    instance: e,\n                    providedFormat: t,\n                    state: r,\n                    decimalSeparator: a\n                  });\n                  \"prefix\" === c && (l = e._value < 0 && \"sign\" === i.negative ? \"-\".concat(o).concat(s).concat(l.slice(1)) : s + o + l);\n                  c && \"postfix\" !== c || (l = l + (o = u ? \"\" : o) + s);\n                  return l;\n                }(e, t, R);\n              case \"percent\":\n                return t = A(t, R.currentPercentageDefaultFormat()), function (e, t, r, n) {\n                  var i = t.prefixSymbol,\n                    a = D({\n                      instance: n(100 * e._value),\n                      providedFormat: t,\n                      state: r\n                    }),\n                    o = Object.assign({}, I, t);\n                  if (i) return \"%\".concat(o.spaceSeparated ? \" \" : \"\").concat(a);\n                  return \"\".concat(a).concat(o.spaceSeparated ? \" \" : \"\", \"%\");\n                }(e, t, R, r);\n              case \"byte\":\n                return t = A(t, R.currentByteDefaultFormat()), h = e, v = R, m = r, y = (d = t).base || \"binary\", b = M[y], w = B(h._value, b.suffixes, b.scale), O = w.value, x = w.suffix, S = D({\n                  instance: m(O),\n                  providedFormat: d,\n                  state: v,\n                  defaults: v.currentByteDefaultFormat()\n                }), N = v.currentAbbreviations(), \"\".concat(S).concat(N.spaced ? \" \" : \"\").concat(x);\n              case \"time\":\n                return t = A(t, R.currentTimeDefaultFormat()), l = e, f = Math.floor(l._value / 60 / 60), p = Math.floor((l._value - 60 * f * 60) / 60), g = Math.round(l._value - 60 * f * 60 - 60 * p), \"\".concat(f, \":\").concat(p < 10 ? \"0\" : \"\").concat(p, \":\").concat(g < 10 ? \"0\" : \"\").concat(g);\n              case \"ordinal\":\n                return t = A(t, R.currentOrdinalDefaultFormat()), n = e, i = t, o = (a = R).currentOrdinal(), u = Object.assign({}, I, i), c = D({\n                  instance: n,\n                  providedFormat: i,\n                  state: a\n                }), s = o(n._value), \"\".concat(c).concat(u.spaceSeparated ? \" \" : \"\").concat(s);\n              case \"number\":\n              default:\n                return D({\n                  instance: e,\n                  providedFormat: t,\n                  numbro: r\n                });\n            }\n            var n, i, a, o, u, c, s;\n            var l, f, p, g;\n            var h, d, v, m, y, b, w, O, x, S, N;\n          }(e, t, r);\n        return a = (a = n + a) + i;\n      }\n      function B(e, t, r) {\n        var n = t[0],\n          i = Math.abs(e);\n        if (r <= i) {\n          for (var a = 1; a < t.length; ++a) {\n            var o = Math.pow(r, a),\n              u = Math.pow(r, a + 1);\n            if (o <= i && i < u) {\n              n = t[a], e /= o;\n              break;\n            }\n          }\n          n === t[0] && (e /= Math.pow(r, t.length - 1), n = t[t.length - 1]);\n        }\n        return {\n          value: e,\n          suffix: n\n        };\n      }\n      function p(e) {\n        for (var t = \"\", r = 0; r < e; r++) t += \"0\";\n        return t;\n      }\n      function $(e, t) {\n        return -1 !== e.toString().indexOf(\"e\") ? function (e, t) {\n          var r = e.toString(),\n            n = C(r.split(\"e\"), 2),\n            i = n[0],\n            a = n[1],\n            o = C(i.split(\".\"), 2),\n            u = o[0],\n            c = o[1],\n            s = void 0 === c ? \"\" : c;\n          if (0 < +a) r = u + s + p(a - s.length);else {\n            var l = \".\";\n            l = +u < 0 ? \"-0\".concat(l) : \"0\".concat(l);\n            var f = (p(-a - 1) + Math.abs(u) + s).substr(0, t);\n            f.length < t && (f += p(t - f.length)), r = l + f;\n          }\n          return 0 < +a && 0 < t && (r += \".\".concat(p(t))), r;\n        }(e, t) : (Math.round(+\"\".concat(e, \"e+\").concat(t)) / Math.pow(10, t)).toFixed(t);\n      }\n      function D(e) {\n        var t = e.instance,\n          r = e.providedFormat,\n          n = e.state,\n          i = void 0 === n ? R : n,\n          a = e.decimalSeparator,\n          o = e.defaults,\n          u = void 0 === o ? i.currentDefaults() : o,\n          c = t._value;\n        if (0 === c && i.hasZeroFormat()) return i.getZeroFormat();\n        if (!isFinite(c)) return c.toString();\n        var s,\n          l,\n          f,\n          p,\n          g,\n          h,\n          d,\n          v,\n          m = Object.assign({}, I, u, r),\n          y = m.totalLength,\n          b = y ? 0 : m.characteristic,\n          w = m.optionalCharacteristic,\n          O = m.forceAverage,\n          x = !!y || !!O || m.average,\n          S = y ? -1 : x && void 0 === r.mantissa ? 0 : m.mantissa,\n          N = !y && (void 0 === r.optionalMantissa ? -1 === S : m.optionalMantissa),\n          M = m.trimMantissa,\n          B = m.thousandSeparated,\n          D = m.spaceSeparated,\n          A = m.negative,\n          E = m.forceSign,\n          F = m.exponential,\n          k = \"\";\n        if (x) {\n          var _ = function (e) {\n            var t = e.value,\n              r = e.forceAverage,\n              n = e.abbreviations,\n              i = e.spaceSeparated,\n              a = void 0 !== i && i,\n              o = e.totalLength,\n              u = void 0 === o ? 0 : o,\n              c = \"\",\n              s = Math.abs(t),\n              l = -1;\n            if (s >= Math.pow(10, 12) && !r || \"trillion\" === r ? (c = n.trillion, t /= Math.pow(10, 12)) : s < Math.pow(10, 12) && s >= Math.pow(10, 9) && !r || \"billion\" === r ? (c = n.billion, t /= Math.pow(10, 9)) : s < Math.pow(10, 9) && s >= Math.pow(10, 6) && !r || \"million\" === r ? (c = n.million, t /= Math.pow(10, 6)) : (s < Math.pow(10, 6) && s >= Math.pow(10, 3) && !r || \"thousand\" === r) && (c = n.thousand, t /= Math.pow(10, 3)), c && (c = (a ? \" \" : \"\") + c), u) {\n              var f = t.toString().split(\".\")[0];\n              l = Math.max(u - f.length, 0);\n            }\n            return {\n              value: t,\n              abbreviation: c,\n              mantissaPrecision: l\n            };\n          }({\n            value: c,\n            forceAverage: O,\n            abbreviations: i.currentAbbreviations(),\n            spaceSeparated: D,\n            totalLength: y\n          });\n          c = _.value, k += _.abbreviation, y && (S = _.mantissaPrecision);\n        }\n        if (F) {\n          var L = (l = (s = {\n            value: c,\n            characteristicPrecision: b\n          }).value, f = s.characteristicPrecision, p = void 0 === f ? 0 : f, g = C(l.toExponential().split(\"e\"), 2), h = g[0], d = g[1], v = +h, p && 1 < p && (v *= Math.pow(10, p - 1), d = 0 <= (d = +d - (p - 1)) ? \"+\".concat(d) : d), {\n            value: v,\n            abbreviation: \"e\".concat(d)\n          });\n          c = L.value, k = L.abbreviation + k;\n        }\n        var T,\n          P,\n          U,\n          j = function (e, t, r, n, i) {\n            if (-1 === n) return e;\n            var a = $(t, n),\n              o = C(a.toString().split(\".\"), 2),\n              u = o[0],\n              c = o[1],\n              s = void 0 === c ? \"\" : c;\n            if (s.match(/^0+$/) && (r || i)) return u;\n            var l = s.match(/0+$/);\n            return i && l ? \"\".concat(u, \".\").concat(s.toString().slice(0, l.index)) : a.toString();\n          }(c.toString(), c, N, S, M);\n        return j = function (e, t, r, n, i) {\n          var a = n.currentDelimiters(),\n            o = a.thousands;\n          i = i || a.decimal;\n          var u = a.thousandsSize || 3,\n            c = e.toString(),\n            s = c.split(\".\")[0],\n            l = c.split(\".\")[1];\n          return r && (t < 0 && (s = s.slice(1)), function (e, t) {\n            for (var r = [], n = 0, i = e; 0 < i; i--) n === t && (r.unshift(i), n = 0), n++;\n            return r;\n          }(s.length, u).forEach(function (e, t) {\n            s = s.slice(0, e + t) + o + s.slice(e + t);\n          }), t < 0 && (s = \"-\".concat(s))), c = l ? s + i + l : s;\n        }(j = function (e, t, r, n) {\n          var i = e,\n            a = C(i.toString().split(\".\"), 2),\n            o = a[0],\n            u = a[1];\n          if (o.match(/^-?0$/) && r) return u ? \"\".concat(o.replace(\"0\", \"\"), \".\").concat(u) : o.replace(\"0\", \"\");\n          if (o.length < n) for (var c = n - o.length, s = 0; s < c; s++) i = \"0\".concat(i);\n          return i.toString();\n        }(j, 0, w, b), c, B, i, a), (x || F) && (j = j + k), (E || c < 0) && (T = j, U = A, j = 0 === (P = c) ? T : 0 == +T ? T.replace(\"-\", \"\") : 0 < P ? \"+\".concat(T) : \"sign\" === U ? T : \"(\".concat(T.replace(\"-\", \"\"), \")\")), j;\n      }\n      function A(e, t) {\n        if (!e) return t;\n        var r = Object.keys(e);\n        return 1 === r.length && \"output\" === r[0] ? t : e;\n      }\n      t.exports = function (n) {\n        return {\n          format: function () {\n            for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];\n            return i.apply(void 0, t.concat([n]));\n          },\n          getByteUnit: function () {\n            for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];\n            return function (e) {\n              var t = M.general;\n              return B(e._value, t.suffixes, t.scale).suffix;\n            }.apply(void 0, t.concat([n]));\n          },\n          getBinaryByteUnit: function () {\n            for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];\n            return function (e) {\n              var t = M.binary;\n              return B(e._value, t.suffixes, t.scale).suffix;\n            }.apply(void 0, t.concat([n]));\n          },\n          getDecimalByteUnit: function () {\n            for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];\n            return function (e) {\n              var t = M.decimal;\n              return B(e._value, t.suffixes, t.scale).suffix;\n            }.apply(void 0, t.concat([n]));\n          },\n          formatOrDefault: A\n        };\n      };\n    }, {\n      \"./globalState\": 4,\n      \"./parsing\": 8,\n      \"./validating\": 10\n    }],\n    4: [function (e, t, r) {\n      \"use strict\";\n\n      var i = e(\"./en-US\"),\n        n = e(\"./validating\"),\n        a = e(\"./parsing\"),\n        o = {},\n        u = void 0,\n        c = {},\n        s = null,\n        l = {};\n      function f(e) {\n        u = e;\n      }\n      function p() {\n        return c[u];\n      }\n      o.languages = function () {\n        return Object.assign({}, c);\n      }, o.currentLanguage = function () {\n        return u;\n      }, o.currentCurrency = function () {\n        return p().currency;\n      }, o.currentAbbreviations = function () {\n        return p().abbreviations;\n      }, o.currentDelimiters = function () {\n        return p().delimiters;\n      }, o.currentOrdinal = function () {\n        return p().ordinal;\n      }, o.currentDefaults = function () {\n        return Object.assign({}, p().defaults, l);\n      }, o.currentOrdinalDefaultFormat = function () {\n        return Object.assign({}, o.currentDefaults(), p().ordinalFormat);\n      }, o.currentByteDefaultFormat = function () {\n        return Object.assign({}, o.currentDefaults(), p().byteFormat);\n      }, o.currentPercentageDefaultFormat = function () {\n        return Object.assign({}, o.currentDefaults(), p().percentageFormat);\n      }, o.currentCurrencyDefaultFormat = function () {\n        return Object.assign({}, o.currentDefaults(), p().currencyFormat);\n      }, o.currentTimeDefaultFormat = function () {\n        return Object.assign({}, o.currentDefaults(), p().timeFormat);\n      }, o.setDefaults = function (e) {\n        e = a.parseFormat(e), n.validateFormat(e) && (l = e);\n      }, o.getZeroFormat = function () {\n        return s;\n      }, o.setZeroFormat = function (e) {\n        return s = \"string\" == typeof e ? e : null;\n      }, o.hasZeroFormat = function () {\n        return null !== s;\n      }, o.languageData = function (e) {\n        if (e) {\n          if (c[e]) return c[e];\n          throw new Error('Unknown tag \"'.concat(e, '\"'));\n        }\n        return p();\n      }, o.registerLanguage = function (e) {\n        var t = 1 < arguments.length && void 0 !== arguments[1] && arguments[1];\n        if (!n.validateLanguage(e)) throw new Error(\"Invalid language data\");\n        c[e.languageTag] = e, t && f(e.languageTag);\n      }, o.setLanguage = function (e) {\n        var t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : i.languageTag;\n        if (!c[e]) {\n          var r = e.split(\"-\")[0],\n            n = Object.keys(c).find(function (e) {\n              return e.split(\"-\")[0] === r;\n            });\n          return c[n] ? void f(n) : void f(t);\n        }\n        f(e);\n      }, o.registerLanguage(i), u = i.languageTag, t.exports = o;\n    }, {\n      \"./en-US\": 2,\n      \"./parsing\": 8,\n      \"./validating\": 10\n    }],\n    5: [function (n, e, t) {\n      \"use strict\";\n\n      e.exports = function (t) {\n        return {\n          loadLanguagesInNode: function (e) {\n            return r = t, void e.forEach(function (t) {\n              var e = void 0;\n              try {\n                e = n(\"../languages/\".concat(t));\n              } catch (e) {\n                console.error('Unable to load \"'.concat(t, '\". No matching language file found.'));\n              }\n              e && r.registerLanguage(e);\n            });\n            var r;\n          }\n        };\n      };\n    }, {}],\n    6: [function (e, t, r) {\n      \"use strict\";\n\n      var c = e(\"bignumber.js\");\n      function a(e, t, r) {\n        var n = new c(e._value),\n          i = t;\n        return r.isNumbro(t) && (i = t._value), i = new c(i), e._value = n.minus(i).toNumber(), e;\n      }\n      t.exports = function (u) {\n        return {\n          add: function (e, t) {\n            return n = t, i = u, a = new c((r = e)._value), o = n, i.isNumbro(n) && (o = n._value), o = new c(o), r._value = a.plus(o).toNumber(), r;\n            var r, n, i, a, o;\n          },\n          subtract: function (e, t) {\n            return a(e, t, u);\n          },\n          multiply: function (e, t) {\n            return n = t, i = u, a = new c((r = e)._value), o = n, i.isNumbro(n) && (o = n._value), o = new c(o), r._value = a.times(o).toNumber(), r;\n            var r, n, i, a, o;\n          },\n          divide: function (e, t) {\n            return n = t, i = u, a = new c((r = e)._value), o = n, i.isNumbro(n) && (o = n._value), o = new c(o), r._value = a.dividedBy(o).toNumber(), r;\n            var r, n, i, a, o;\n          },\n          set: function (e, t) {\n            return r = e, i = n = t, u.isNumbro(n) && (i = n._value), r._value = i, r;\n            var r, n, i;\n          },\n          difference: function (e, t) {\n            return r = t, a(i = (n = u)(e._value), r, n), Math.abs(i._value);\n            var r, n, i;\n          }\n        };\n      };\n    }, {\n      \"bignumber.js\": 1\n    }],\n    7: [function (e, t, r) {\n      \"use strict\";\n\n      function i(e, t) {\n        for (var r = 0; r < t.length; r++) {\n          var n = t[r];\n          n.enumerable = n.enumerable || !1, n.configurable = !0, \"value\" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);\n        }\n      }\n      var a = e(\"./globalState\"),\n        n = e(\"./validating\"),\n        o = e(\"./loading\")(g),\n        u = e(\"./unformatting\"),\n        c = e(\"./formatting\")(g),\n        s = e(\"./manipulating\")(g),\n        l = e(\"./parsing\"),\n        f = function () {\n          function t(e) {\n            !function (e, t) {\n              if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n            }(this, t), this._value = e;\n          }\n          var e, r, n;\n          return e = t, (r = [{\n            key: \"clone\",\n            value: function () {\n              return g(this._value);\n            }\n          }, {\n            key: \"format\",\n            value: function () {\n              var e = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {};\n              return c.format(this, e);\n            }\n          }, {\n            key: \"formatCurrency\",\n            value: function (e) {\n              return \"string\" == typeof e && (e = l.parseFormat(e)), (e = c.formatOrDefault(e, a.currentCurrencyDefaultFormat())).output = \"currency\", c.format(this, e);\n            }\n          }, {\n            key: \"formatTime\",\n            value: function () {\n              var e = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {};\n              return e.output = \"time\", c.format(this, e);\n            }\n          }, {\n            key: \"binaryByteUnits\",\n            value: function () {\n              return c.getBinaryByteUnit(this);\n            }\n          }, {\n            key: \"decimalByteUnits\",\n            value: function () {\n              return c.getDecimalByteUnit(this);\n            }\n          }, {\n            key: \"byteUnits\",\n            value: function () {\n              return c.getByteUnit(this);\n            }\n          }, {\n            key: \"difference\",\n            value: function (e) {\n              return s.difference(this, e);\n            }\n          }, {\n            key: \"add\",\n            value: function (e) {\n              return s.add(this, e);\n            }\n          }, {\n            key: \"subtract\",\n            value: function (e) {\n              return s.subtract(this, e);\n            }\n          }, {\n            key: \"multiply\",\n            value: function (e) {\n              return s.multiply(this, e);\n            }\n          }, {\n            key: \"divide\",\n            value: function (e) {\n              return s.divide(this, e);\n            }\n          }, {\n            key: \"set\",\n            value: function (e) {\n              return s.set(this, p(e));\n            }\n          }, {\n            key: \"value\",\n            value: function () {\n              return this._value;\n            }\n          }, {\n            key: \"valueOf\",\n            value: function () {\n              return this._value;\n            }\n          }]) && i(e.prototype, r), n && i(e, n), t;\n        }();\n      function p(e) {\n        var t = e;\n        return g.isNumbro(e) ? t = e._value : \"string\" == typeof e ? t = g.unformat(e) : isNaN(e) && (t = NaN), t;\n      }\n      function g(e) {\n        return new f(p(e));\n      }\n      g.version = \"2.1.2\", g.isNumbro = function (e) {\n        return e instanceof f;\n      }, g.language = a.currentLanguage, g.registerLanguage = a.registerLanguage, g.setLanguage = a.setLanguage, g.languages = a.languages, g.languageData = a.languageData, g.zeroFormat = a.setZeroFormat, g.defaultFormat = a.currentDefaults, g.setDefaults = a.setDefaults, g.defaultCurrencyFormat = a.currentCurrencyDefaultFormat, g.validate = n.validate, g.loadLanguagesInNode = o.loadLanguagesInNode, g.unformat = u.unformat, t.exports = g;\n    }, {\n      \"./formatting\": 3,\n      \"./globalState\": 4,\n      \"./loading\": 5,\n      \"./manipulating\": 6,\n      \"./parsing\": 8,\n      \"./unformatting\": 9,\n      \"./validating\": 10\n    }],\n    8: [function (e, t, r) {\n      \"use strict\";\n\n      t.exports = {\n        parseFormat: function (e) {\n          var t,\n            r,\n            n,\n            i,\n            a,\n            o,\n            u,\n            c,\n            s,\n            l,\n            f,\n            p,\n            g,\n            h,\n            d,\n            v,\n            m,\n            y,\n            b,\n            w,\n            O = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {};\n          return \"string\" != typeof e ? e : (r = O, e = (n = (t = e).match(/^{([^}]*)}/)) ? (r.prefix = n[1], t.slice(n[0].length)) : t, a = O, function (e, t) {\n            if (-1 === e.indexOf(\"$\")) {\n              if (-1 === e.indexOf(\"%\")) return -1 !== e.indexOf(\"bd\") ? (t.output = \"byte\", t.base = \"general\") : -1 !== e.indexOf(\"b\") ? (t.output = \"byte\", t.base = \"binary\") : -1 !== e.indexOf(\"d\") ? (t.output = \"byte\", t.base = \"decimal\") : -1 === e.indexOf(\":\") ? -1 !== e.indexOf(\"o\") && (t.output = \"ordinal\") : t.output = \"time\";\n              t.output = \"percent\";\n            } else t.output = \"currency\";\n          }(e = (o = (i = e).match(/{([^}]*)}$/)) ? (a.postfix = o[1], i.slice(0, -o[0].length)) : i, O), u = O, (c = e.match(/[1-9]+[0-9]*/)) && (u.totalLength = +c[0]), s = O, (l = e.split(\".\")[0].match(/0+/)) && (s.characteristic = l[0].length), function (e, t) {\n            if (-1 !== e.indexOf(\".\")) {\n              var r = e.split(\".\")[0];\n              t.optionalCharacteristic = -1 === r.indexOf(\"0\");\n            }\n          }(e, O), f = O, -1 !== e.indexOf(\"a\") && (f.average = !0), g = O, -1 !== (p = e).indexOf(\"K\") ? g.forceAverage = \"thousand\" : -1 !== p.indexOf(\"M\") ? g.forceAverage = \"million\" : -1 !== p.indexOf(\"B\") ? g.forceAverage = \"billion\" : -1 !== p.indexOf(\"T\") && (g.forceAverage = \"trillion\"), function (e, t) {\n            var r = e.split(\".\")[1];\n            if (r) {\n              var n = r.match(/0+/);\n              n && (t.mantissa = n[0].length);\n            }\n          }(e, O), d = O, (h = e).match(/\\[\\.]/) ? d.optionalMantissa = !0 : h.match(/\\./) && (d.optionalMantissa = !1), v = O, -1 !== e.indexOf(\",\") && (v.thousandSeparated = !0), m = O, -1 !== e.indexOf(\" \") && (m.spaceSeparated = !0), b = O, (y = e).match(/^\\+?\\([^)]*\\)$/) && (b.negative = \"parenthesis\"), y.match(/^\\+?-/) && (b.negative = \"sign\"), w = O, e.match(/^\\+/) && (w.forceSign = !0), O);\n        }\n      };\n    }, {}],\n    9: [function (p, e, t) {\n      \"use strict\";\n\n      var O = [{\n        key: \"ZiB\",\n        factor: Math.pow(1024, 7)\n      }, {\n        key: \"ZB\",\n        factor: Math.pow(1e3, 7)\n      }, {\n        key: \"YiB\",\n        factor: Math.pow(1024, 8)\n      }, {\n        key: \"YB\",\n        factor: Math.pow(1e3, 8)\n      }, {\n        key: \"TiB\",\n        factor: Math.pow(1024, 4)\n      }, {\n        key: \"TB\",\n        factor: Math.pow(1e3, 4)\n      }, {\n        key: \"PiB\",\n        factor: Math.pow(1024, 5)\n      }, {\n        key: \"PB\",\n        factor: Math.pow(1e3, 5)\n      }, {\n        key: \"MiB\",\n        factor: Math.pow(1024, 2)\n      }, {\n        key: \"MB\",\n        factor: Math.pow(1e3, 2)\n      }, {\n        key: \"KiB\",\n        factor: Math.pow(1024, 1)\n      }, {\n        key: \"KB\",\n        factor: Math.pow(1e3, 1)\n      }, {\n        key: \"GiB\",\n        factor: Math.pow(1024, 3)\n      }, {\n        key: \"GB\",\n        factor: Math.pow(1e3, 3)\n      }, {\n        key: \"EiB\",\n        factor: Math.pow(1024, 6)\n      }, {\n        key: \"EB\",\n        factor: Math.pow(1e3, 6)\n      }, {\n        key: \"B\",\n        factor: 1\n      }];\n      function x(e) {\n        return e.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n      }\n      function g(e, t) {\n        var r = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : \"\",\n          n = 3 < arguments.length ? arguments[3] : void 0,\n          i = 4 < arguments.length ? arguments[4] : void 0,\n          a = 5 < arguments.length ? arguments[5] : void 0,\n          o = 6 < arguments.length ? arguments[6] : void 0;\n        if (\"\" !== e) return e === i ? 0 : function e(t, r) {\n          var n = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : \"\",\n            i = 3 < arguments.length ? arguments[3] : void 0,\n            a = 4 < arguments.length ? arguments[4] : void 0,\n            o = 5 < arguments.length ? arguments[5] : void 0,\n            u = 6 < arguments.length ? arguments[6] : void 0;\n          if (!isNaN(+t)) return +t;\n          var c = \"\",\n            s = t.replace(/(^[^(]*)\\((.*)\\)([^)]*$)/, \"$1$2$3\");\n          if (s !== t) return -1 * e(s, r, n, i, a, o, u);\n          for (var l = 0; l < O.length; l++) {\n            var f = O[l];\n            if ((c = t.replace(f.key, \"\")) !== t) return e(c, r, n, i, a, o, u) * f.factor;\n          }\n          if ((c = t.replace(\"%\", \"\")) !== t) return e(c, r, n, i, a, o, u) / 100;\n          var p = parseFloat(t);\n          if (!isNaN(p)) {\n            var g = i(p);\n            if (g && \".\" !== g && (c = t.replace(new RegExp(\"\".concat(x(g), \"$\")), \"\")) !== t) return e(c, r, n, i, a, o, u);\n            var h = {};\n            Object.keys(o).forEach(function (e) {\n              h[o[e]] = e;\n            });\n            for (var d = Object.keys(h).sort().reverse(), v = d.length, m = 0; m < v; m++) {\n              var y = d[m],\n                b = h[y];\n              if ((c = t.replace(y, \"\")) !== t) {\n                var w = void 0;\n                switch (b) {\n                  case \"thousand\":\n                    w = Math.pow(10, 3);\n                    break;\n                  case \"million\":\n                    w = Math.pow(10, 6);\n                    break;\n                  case \"billion\":\n                    w = Math.pow(10, 9);\n                    break;\n                  case \"trillion\":\n                    w = Math.pow(10, 12);\n                }\n                return e(c, r, n, i, a, o, u) * w;\n              }\n            }\n          }\n        }(function (e, t) {\n          var r = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : \"\",\n            n = e.replace(r, \"\");\n          return n = (n = n.replace(new RegExp(\"([0-9])\".concat(x(t.thousands), \"([0-9])\"), \"g\"), \"$1$2\")).replace(t.decimal, \".\");\n        }(e, t, r), t, r, n, i, a, o);\n      }\n      e.exports = {\n        unformat: function (e, t) {\n          var r,\n            n,\n            i,\n            a = p(\"./globalState\"),\n            o = a.currentDelimiters(),\n            u = a.currentCurrency().symbol,\n            c = a.currentOrdinal(),\n            s = a.getZeroFormat(),\n            l = a.currentAbbreviations(),\n            f = void 0;\n          if (\"string\" == typeof e) f = function (e, t) {\n            if (!e.indexOf(\":\") || \":\" === t.thousands) return !1;\n            var r = e.split(\":\");\n            if (3 !== r.length) return !1;\n            var n = +r[0],\n              i = +r[1],\n              a = +r[2];\n            return !isNaN(n) && !isNaN(i) && !isNaN(a);\n          }(e, o) ? (r = e.split(\":\"), n = +r[0], i = +r[1], +r[2] + 60 * i + 3600 * n) : g(e, o, u, c, s, l, t);else {\n            if (\"number\" != typeof e) return;\n            f = e;\n          }\n          if (void 0 !== f) return f;\n        }\n      };\n    }, {\n      \"./globalState\": 4\n    }],\n    10: [function (e, t, r) {\n      \"use strict\";\n\n      function n(e) {\n        return function (e) {\n          if (Array.isArray(e)) {\n            for (var t = 0, r = new Array(e.length); t < e.length; t++) r[t] = e[t];\n            return r;\n          }\n        }(e) || function (e) {\n          if (Symbol.iterator in Object(e) || \"[object Arguments]\" === Object.prototype.toString.call(e)) return Array.from(e);\n        }(e) || function () {\n          throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n        }();\n      }\n      function f(e) {\n        return (f = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (e) {\n          return typeof e;\n        } : function (e) {\n          return e && \"function\" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? \"symbol\" : typeof e;\n        })(e);\n      }\n      var i = e(\"./unformatting\"),\n        a = /^[a-z]{2,3}(-[a-zA-Z]{4})?(-([A-Z]{2}|[0-9]{3}))?$/,\n        p = {\n          output: {\n            type: \"string\",\n            validValues: [\"currency\", \"percent\", \"byte\", \"time\", \"ordinal\", \"number\"]\n          },\n          base: {\n            type: \"string\",\n            validValues: [\"decimal\", \"binary\", \"general\"],\n            restriction: function (e, t) {\n              return \"byte\" === t.output;\n            },\n            message: \"`base` must be provided only when the output is `byte`\",\n            mandatory: function (e) {\n              return \"byte\" === e.output;\n            }\n          },\n          characteristic: {\n            type: \"number\",\n            restriction: function (e) {\n              return 0 <= e;\n            },\n            message: \"value must be positive\"\n          },\n          prefix: \"string\",\n          postfix: \"string\",\n          forceAverage: {\n            type: \"string\",\n            validValues: [\"trillion\", \"billion\", \"million\", \"thousand\"]\n          },\n          average: \"boolean\",\n          currencyPosition: {\n            type: \"string\",\n            validValues: [\"prefix\", \"infix\", \"postfix\"]\n          },\n          currencySymbol: \"string\",\n          totalLength: {\n            type: \"number\",\n            restrictions: [{\n              restriction: function (e) {\n                return 0 <= e;\n              },\n              message: \"value must be positive\"\n            }, {\n              restriction: function (e, t) {\n                return !t.exponential;\n              },\n              message: \"`totalLength` is incompatible with `exponential`\"\n            }]\n          },\n          mantissa: {\n            type: \"number\",\n            restriction: function (e) {\n              return 0 <= e;\n            },\n            message: \"value must be positive\"\n          },\n          optionalMantissa: \"boolean\",\n          trimMantissa: \"boolean\",\n          optionalCharacteristic: \"boolean\",\n          thousandSeparated: \"boolean\",\n          spaceSeparated: \"boolean\",\n          abbreviations: {\n            type: \"object\",\n            children: {\n              thousand: \"string\",\n              million: \"string\",\n              billion: \"string\",\n              trillion: \"string\"\n            }\n          },\n          negative: {\n            type: \"string\",\n            validValues: [\"sign\", \"parenthesis\"]\n          },\n          forceSign: \"boolean\",\n          exponential: {\n            type: \"boolean\"\n          },\n          prefixSymbol: {\n            type: \"boolean\",\n            restriction: function (e, t) {\n              return \"percent\" === t.output;\n            },\n            message: \"`prefixSymbol` can be provided only when the output is `percent`\"\n          }\n        },\n        o = {\n          languageTag: {\n            type: \"string\",\n            mandatory: !0,\n            restriction: function (e) {\n              return e.match(a);\n            },\n            message: \"the language tag must follow the BCP 47 specification (see https://tools.ieft.org/html/bcp47)\"\n          },\n          delimiters: {\n            type: \"object\",\n            children: {\n              thousands: \"string\",\n              decimal: \"string\",\n              thousandsSize: \"number\"\n            },\n            mandatory: !0\n          },\n          abbreviations: {\n            type: \"object\",\n            children: {\n              thousand: {\n                type: \"string\",\n                mandatory: !0\n              },\n              million: {\n                type: \"string\",\n                mandatory: !0\n              },\n              billion: {\n                type: \"string\",\n                mandatory: !0\n              },\n              trillion: {\n                type: \"string\",\n                mandatory: !0\n              }\n            },\n            mandatory: !0\n          },\n          spaceSeparated: \"boolean\",\n          ordinal: {\n            type: \"function\",\n            mandatory: !0\n          },\n          currency: {\n            type: \"object\",\n            children: {\n              symbol: \"string\",\n              position: \"string\",\n              code: \"string\"\n            },\n            mandatory: !0\n          },\n          defaults: \"format\",\n          ordinalFormat: \"format\",\n          byteFormat: \"format\",\n          percentageFormat: \"format\",\n          currencyFormat: \"format\",\n          timeDefaults: \"format\",\n          formats: {\n            type: \"object\",\n            children: {\n              fourDigits: {\n                type: \"format\",\n                mandatory: !0\n              },\n              fullWithTwoDecimals: {\n                type: \"format\",\n                mandatory: !0\n              },\n              fullWithTwoDecimalsNoCurrency: {\n                type: \"format\",\n                mandatory: !0\n              },\n              fullWithNoDecimals: {\n                type: \"format\",\n                mandatory: !0\n              }\n            }\n          }\n        };\n      function u(e) {\n        return !!i.unformat(e);\n      }\n      function g(c, s, l) {\n        var e = 3 < arguments.length && void 0 !== arguments[3] && arguments[3],\n          t = Object.keys(c).map(function (e) {\n            if (!s[e]) return console.error(\"\".concat(l, \" Invalid key: \").concat(e)), !1;\n            var t = c[e],\n              r = s[e];\n            if (\"string\" == typeof r && (r = {\n              type: r\n            }), \"format\" === r.type) {\n              if (!g(t, p, \"[Validate \".concat(e, \"]\"), !0)) return !1;\n            } else if (f(t) !== r.type) return console.error(\"\".concat(l, \" \").concat(e, ' type mismatched: \"').concat(r.type, '\" expected, \"').concat(f(t), '\" provided')), !1;\n            if (r.restrictions && r.restrictions.length) for (var n = r.restrictions.length, i = 0; i < n; i++) {\n              var a = r.restrictions[i],\n                o = a.restriction,\n                u = a.message;\n              if (!o(t, c)) return console.error(\"\".concat(l, \" \").concat(e, \" invalid value: \").concat(u)), !1;\n            }\n            if (r.restriction && !r.restriction(t, c)) return console.error(\"\".concat(l, \" \").concat(e, \" invalid value: \").concat(r.message)), !1;\n            if (r.validValues && -1 === r.validValues.indexOf(t)) return console.error(\"\".concat(l, \" \").concat(e, \" invalid value: must be among \").concat(JSON.stringify(r.validValues), ', \"').concat(t, '\" provided')), !1;\n            if (r.children && !g(t, r.children, \"[Validate \".concat(e, \"]\"))) return !1;\n            return !0;\n          });\n        return e || t.push.apply(t, n(Object.keys(s).map(function (e) {\n          var t = s[e];\n          if (\"string\" == typeof t && (t = {\n            type: t\n          }), t.mandatory) {\n            var r = t.mandatory;\n            if (\"function\" == typeof r && (r = r(c)), r && void 0 === c[e]) return console.error(\"\".concat(l, ' Missing mandatory key \"').concat(e, '\"')), !1;\n          }\n          return !0;\n        }))), t.reduce(function (e, t) {\n          return e && t;\n        }, !0);\n      }\n      function c(e) {\n        return g(e, p, \"[Validate format]\");\n      }\n      t.exports = {\n        validate: function (e, t) {\n          var r = u(e),\n            n = c(t);\n          return r && n;\n        },\n        validateFormat: c,\n        validateInput: u,\n        validateLanguage: function (e) {\n          return g(e, o, \"[Validate language]\");\n        }\n      };\n    }, {\n      \"./unformatting\": 9\n    }]\n  }, {}, [7])(7);\n});","map":{"version":3,"names":["e","exports","module","define","amd","window","global","self","numbro","a","o","u","c","s","t","r","require","l","n","Error","code","i","call","length","k","_","Math","ceil","L","floor","T","P","U","j","C","R","I","$","G","V","charCodeAt","slice","q","Z","String","z","W","charAt","H","y","f","p","g","A","prototype","constructor","toString","valueOf","d","b","w","h","v","m","O","x","S","N","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","M","test","indexOf","replace","search","substring","E","DEBUG","toUpperCase","toLowerCase","push","B","D","pop","F","clone","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","set","hasOwnProperty","crypto","getRandomValues","randomBytes","DECIMAL_PLACES","ROUNDING_MODE","EXPONENTIAL_AT","RANGE","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","ALPHABET","isBigNumber","_isBigNumber","maximum","max","arguments","lt","minimum","min","gt","random","Uint32Array","copy","splice","sum","plus","reverse","pow","concat","NaN","parseNumeric","isNaN","absoluteValue","abs","comparedTo","decimalPlaces","dp","dividedBy","div","dividedToIntegerBy","idiv","exponentiatedBy","isInteger","mod","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","modulo","multipliedBy","negated","precision","sd","shiftedBy","squareRoot","sqrt","toExponential","toFixed","toFormat","split","substr","RegExp","toFraction","toNumber","toPrecision","toJSON","Symbol","iterator","toStringTag","for","default","BigNumber","languageTag","delimiters","thousands","decimal","abbreviations","thousand","million","billion","trillion","spaceSeparated","ordinal","currency","symbol","position","currencyFormat","thousandSeparated","totalLength","formats","fourDigits","fullWithTwoDecimals","output","mantissa","fullWithTwoDecimalsNoCurrency","fullWithNoDecimals","Array","isArray","next","done","value","return","TypeError","general","scale","suffixes","marker","binary","characteristic","forceAverage","average","optionalMantissa","negative","forceSign","parseFormat","validateFormat","postfix","currentCurrencyDefaultFormat","currentCurrency","Object","assign","currencyPosition","currencySymbol","instance","providedFormat","state","_value","currentPercentageDefaultFormat","prefixSymbol","currentByteDefaultFormat","base","defaults","currentAbbreviations","spaced","currentTimeDefaultFormat","round","currentOrdinalDefaultFormat","currentOrdinal","currentDefaults","hasZeroFormat","getZeroFormat","optionalCharacteristic","trimMantissa","exponential","abbreviation","mantissaPrecision","characteristicPrecision","match","index","currentDelimiters","thousandsSize","unshift","forEach","keys","format","apply","getByteUnit","getBinaryByteUnit","getDecimalByteUnit","formatOrDefault","languages","currentLanguage","ordinalFormat","byteFormat","percentageFormat","timeFormat","setDefaults","setZeroFormat","languageData","registerLanguage","validateLanguage","setLanguage","find","loadLanguagesInNode","console","error","isNumbro","add","subtract","multiply","divide","difference","enumerable","configurable","writable","defineProperty","key","unformat","version","language","zeroFormat","defaultFormat","defaultCurrencyFormat","validate","factor","parseFloat","sort","from","type","validValues","restriction","message","mandatory","restrictions","children","timeDefaults","map","JSON","stringify","reduce","validateInput"],"sources":["D:\\gym-project\\frontend\\node_modules\\numbro\\dist\\node_modules\\browser-pack\\_prelude.js","D:\\gym-project\\frontend\\node_modules\\numbro\\dist\\node_modules\\bignumber.js\\bignumber.js","D:\\gym-project\\frontend\\node_modules\\numbro\\dist\\src\\en-US.js","D:\\gym-project\\frontend\\node_modules\\numbro\\dist\\src\\formatting.js","D:\\gym-project\\frontend\\node_modules\\numbro\\dist\\src\\globalState.js","D:\\gym-project\\frontend\\node_modules\\numbro\\dist\\src\\loading.js","D:\\gym-project\\frontend\\node_modules\\numbro\\dist\\src\\manipulating.js","D:\\gym-project\\frontend\\node_modules\\numbro\\dist\\src\\numbro.js","D:\\gym-project\\frontend\\node_modules\\numbro\\dist\\src\\parsing.js","D:\\gym-project\\frontend\\node_modules\\numbro\\dist\\src\\unformatting.js","D:\\gym-project\\frontend\\node_modules\\numbro\\dist\\src\\validating.js"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v8.0.2\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * n {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of n. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(n, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor usage without new.\r\n      if (!(x instanceof BigNumber)) {\r\n\r\n        // Don't throw on constructor call without new (#81).\r\n        // '[BigNumber Error] Constructor call without new: {n}'\r\n        //throw Error(bignumberError + ' Constructor call without new: ' + n);\r\n        return new BigNumber(n, b);\r\n      }\r\n\r\n      if (b == null) {\r\n\r\n        // Duplicate.\r\n        if (n instanceof BigNumber) {\r\n          x.s = n.s;\r\n          x.e = n.e;\r\n          x.c = (n = n.c) ? n.slice() : n;\r\n          return;\r\n        }\r\n\r\n        isNum = typeof n == 'number';\r\n\r\n        if (isNum && n * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / n < 0 ? (n = -n, -1) : 1;\r\n\r\n          // Faster path for integers.\r\n          if (n === ~~n) {\r\n            for (e = 0, i = n; i >= 10; i /= 10, e++);\r\n            x.e = e;\r\n            x.c = [n];\r\n            return;\r\n          }\r\n\r\n          str = String(n);\r\n        } else {\r\n          str = String(n);\r\n          if (!isNumeric.test(str)) return parseNumeric(x, str, isNum);\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n        str = String(n);\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(n instanceof BigNumber ? n : str);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        isNum = typeof n == 'number';\r\n\r\n        if (isNum) {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (n * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + n);\r\n          }\r\n\r\n          // Prevent later check for length on converted number.\r\n          isNum = false;\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(n), isNum, b);\r\n          }\r\n        }\r\n\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      str = str.slice(i, ++len);\r\n\r\n      if (str) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (n > MAX_SAFE_INTEGER || n !== mathfloor(n))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * n));\r\n        }\r\n\r\n        e = e - i - 1;\r\n\r\n         // Overflow?\r\n        if (e > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            str = str.slice(i);\r\n            i = LOG_BASE - str.length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if only one character,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.$|[+-.\\s]|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * v {any}\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      return v instanceof BigNumber || v && v._isBigNumber === true || false;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return Â±0 if x is Â±0 or y is Â±Infinity, or return Â±Infinity as y is Â±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on Â±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n          x.c = x.e = null;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.c = x.e = x.s = null;\r\n        }\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is Â±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and Â±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, Â±Infinity, Â±0 or Â±1, or n is Â±Infinity, NaN or Â±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to Â±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to Â±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to Â±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = Â±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return Â±0, else return Â±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, Â±Infinity or Â±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return Â±Infinity if either is Â±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return Â±0 if either is Â±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return Â±Infinity if either Â±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is Â±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '1e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol') {\r\n      P[Symbol.toStringTag] = 'BigNumber';\r\n      // Node.js v10.12.0+\r\n      P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n    }\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== (n < 0 ? mathceil(n) : mathfloor(n))) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nmodule.exports = {\n    languageTag: \"en-US\",\n    delimiters: {\n        thousands: \",\",\n        decimal: \".\"\n    },\n    abbreviations: {\n        thousand: \"k\",\n        million: \"m\",\n        billion: \"b\",\n        trillion: \"t\"\n    },\n    spaceSeparated: false,\n    ordinal: function(number) {\n        let b = number % 10;\n        return (~~(number % 100 / 10) === 1) ? \"th\" : (b === 1) ? \"st\" : (b === 2) ? \"nd\" : (b === 3) ? \"rd\" : \"th\";\n    },\n    currency: {\n        symbol: \"$\",\n        position: \"prefix\",\n        code: \"USD\"\n    },\n    currencyFormat: {\n        thousandSeparated: true,\n        totalLength: 4,\n        spaceSeparated: true\n    },\n    formats: {\n        fourDigits: {\n            totalLength: 4,\n            spaceSeparated: true\n        },\n        fullWithTwoDecimals: {\n            output: \"currency\",\n            thousandSeparated: true,\n            mantissa: 2\n        },\n        fullWithTwoDecimalsNoCurrency: {\n            thousandSeparated: true,\n            mantissa: 2\n        },\n        fullWithNoDecimals: {\n            output: \"currency\",\n            thousandSeparated: true,\n            mantissa: 0\n        }\n    }\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst globalState = require(\"./globalState\");\nconst validating = require(\"./validating\");\nconst parsing = require(\"./parsing\");\n\nconst binarySuffixes = [\"B\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"ZiB\", \"YiB\"];\nconst decimalSuffixes = [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\nconst bytes = {\n    general: {scale: 1024, suffixes: decimalSuffixes, marker: \"bd\"},\n    binary: {scale: 1024, suffixes: binarySuffixes, marker: \"b\"},\n    decimal: {scale: 1000, suffixes: decimalSuffixes, marker: \"d\"}\n};\n\nconst defaultOptions = {\n    totalLength: 0,\n    characteristic: 0,\n    forceAverage: false,\n    average: false,\n    mantissa: -1,\n    optionalMantissa: true,\n    thousandSeparated: false,\n    spaceSeparated: false,\n    negative: \"sign\",\n    forceSign: false\n};\n\n/**\n * Entry point. Format the provided INSTANCE according to the PROVIDEDFORMAT.\n * This method ensure the prefix and postfix are added as the last step.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {NumbroFormat|string} [providedFormat] - specification for formatting\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction format(instance, providedFormat = {}, numbro) {\n    if (typeof providedFormat === \"string\") {\n        providedFormat = parsing.parseFormat(providedFormat);\n    }\n\n    let valid = validating.validateFormat(providedFormat);\n\n    if (!valid) {\n        return \"ERROR: invalid format\";\n    }\n\n    let prefix = providedFormat.prefix || \"\";\n    let postfix = providedFormat.postfix || \"\";\n\n    let output = formatNumbro(instance, providedFormat, numbro);\n    output = insertPrefix(output, prefix);\n    output = insertPostfix(output, postfix);\n    return output;\n}\n\n/**\n * Format the provided INSTANCE according to the PROVIDEDFORMAT.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatNumbro(instance, providedFormat, numbro) {\n    switch (providedFormat.output) {\n        case \"currency\": {\n            providedFormat = formatOrDefault(providedFormat, globalState.currentCurrencyDefaultFormat());\n            return formatCurrency(instance, providedFormat, globalState, numbro);\n        }\n        case \"percent\": {\n            providedFormat = formatOrDefault(providedFormat, globalState.currentPercentageDefaultFormat());\n            return formatPercentage(instance, providedFormat, globalState, numbro);\n        }\n        case \"byte\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentByteDefaultFormat());\n            return formatByte(instance, providedFormat, globalState, numbro);\n        case \"time\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentTimeDefaultFormat());\n            return formatTime(instance, providedFormat, globalState, numbro);\n        case \"ordinal\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentOrdinalDefaultFormat());\n            return formatOrdinal(instance, providedFormat, globalState, numbro);\n        case \"number\":\n        default:\n            return formatNumber({\n                instance,\n                providedFormat,\n                numbro\n            });\n    }\n}\n\n/**\n * Get the decimal byte unit (MB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1000).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getDecimalByteUnit(instance) {\n    let data = bytes.decimal;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Get the binary byte unit (MiB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1024).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getBinaryByteUnit(instance) {\n    let data = bytes.binary;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Get the decimal byte unit (MB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1024).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getByteUnit(instance) {\n    let data = bytes.general;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Return the value and the suffix computed in byte.\n * It uses the SUFFIXES and the SCALE provided.\n *\n * @param {number} value - Number to format\n * @param {[String]} suffixes - List of suffixes\n * @param {number} scale - Number in-between two units\n * @return {{value: Number, suffix: String}}\n */\nfunction getFormatByteUnits(value, suffixes, scale) {\n    let suffix = suffixes[0];\n    let abs = Math.abs(value);\n\n    if (abs >= scale) {\n        for (let power = 1; power < suffixes.length; ++power) {\n            let min = Math.pow(scale, power);\n            let max = Math.pow(scale, power + 1);\n\n            if (abs >= min && abs < max) {\n                suffix = suffixes[power];\n                value = value / min;\n                break;\n            }\n        }\n\n        // values greater than or equal to [scale] YB never set the suffix\n        if (suffix === suffixes[0]) {\n            value = value / Math.pow(scale, suffixes.length - 1);\n            suffix = suffixes[suffixes.length - 1];\n        }\n    }\n\n    return {value, suffix};\n}\n\n/**\n * Format the provided INSTANCE as bytes using the PROVIDEDFORMAT, and STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatByte(instance, providedFormat, state, numbro) {\n    let base = providedFormat.base || \"binary\";\n    let baseInfo = bytes[base];\n\n    let {value, suffix} = getFormatByteUnits(instance._value, baseInfo.suffixes, baseInfo.scale);\n    let output = formatNumber({\n        instance: numbro(value),\n        providedFormat,\n        state,\n        defaults: state.currentByteDefaultFormat()\n    });\n    let abbreviations = state.currentAbbreviations();\n    return `${output}${abbreviations.spaced ? \" \" : \"\"}${suffix}`;\n}\n\n/**\n * Format the provided INSTANCE as an ordinal using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @return {string}\n */\nfunction formatOrdinal(instance, providedFormat, state) {\n    let ordinalFn = state.currentOrdinal();\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    let output = formatNumber({\n        instance,\n        providedFormat,\n        state\n    });\n    let ordinal = ordinalFn(instance._value);\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}${ordinal}`;\n}\n\n/**\n * Format the provided INSTANCE as a time HH:MM:SS.\n *\n * @param {Numbro} instance - numbro instance to format\n * @return {string}\n */\nfunction formatTime(instance) {\n    let hours = Math.floor(instance._value / 60 / 60);\n    let minutes = Math.floor((instance._value - (hours * 60 * 60)) / 60);\n    let seconds = Math.round(instance._value - (hours * 60 * 60) - (minutes * 60));\n    return `${hours}:${(minutes < 10) ? \"0\" : \"\"}${minutes}:${(seconds < 10) ? \"0\" : \"\"}${seconds}`;\n}\n\n/**\n * Format the provided INSTANCE as a percentage using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatPercentage(instance, providedFormat, state, numbro) {\n    let prefixSymbol = providedFormat.prefixSymbol;\n\n    let output = formatNumber({\n        instance: numbro(instance._value * 100),\n        providedFormat,\n        state\n    });\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    if (prefixSymbol) {\n        return `%${options.spaceSeparated ? \" \" : \"\"}${output}`;\n    }\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}%`;\n}\n\n/**\n * Format the provided INSTANCE as a percentage using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @return {string}\n */\nfunction formatCurrency(instance, providedFormat, state) {\n    const currentCurrency = state.currentCurrency();\n    let options = Object.assign({}, defaultOptions, providedFormat);\n    let decimalSeparator = undefined;\n    let space = \"\";\n    let average = !!options.totalLength || !!options.forceAverage || options.average;\n    let position = providedFormat.currencyPosition || currentCurrency.position;\n    let symbol = providedFormat.currencySymbol || currentCurrency.symbol;\n\n    if (options.spaceSeparated) {\n        space = \" \";\n    }\n\n    if (position === \"infix\") {\n        decimalSeparator = space + symbol + space;\n    }\n\n    let output = formatNumber({\n        instance,\n        providedFormat,\n        state,\n        decimalSeparator\n    });\n\n    if (position === \"prefix\") {\n        if (instance._value < 0 && options.negative === \"sign\") {\n            output = `-${space}${symbol}${output.slice(1)}`;\n        } else {\n            output = symbol + space + output;\n        }\n    }\n\n    if (!position || position === \"postfix\") {\n        space = average ? \"\" : space;\n        output = output + space + symbol;\n    }\n\n    return output;\n}\n\n/**\n * Compute the average value out of VALUE.\n * The other parameters are computation options.\n *\n * @param {number} value - value to compute\n * @param {string} [forceAverage] - forced unit used to compute\n * @param {{}} abbreviations - part of the language specification\n * @param {boolean} spaceSeparated - `true` if a space must be inserted between the value and the abbreviation\n * @param {number} [totalLength] - total length of the output including the characteristic and the mantissa\n * @return {{value: number, abbreviation: string, mantissaPrecision: number}}\n */\nfunction computeAverage({value, forceAverage, abbreviations, spaceSeparated = false, totalLength = 0}) {\n    let abbreviation = \"\";\n    let abs = Math.abs(value);\n    let mantissaPrecision = -1;\n\n    if ((abs >= Math.pow(10, 12) && !forceAverage) || (forceAverage === \"trillion\")) {\n        // trillion\n        abbreviation = abbreviations.trillion;\n        value = value / Math.pow(10, 12);\n    } else if ((abs < Math.pow(10, 12) && abs >= Math.pow(10, 9) && !forceAverage) || (forceAverage === \"billion\")) {\n        // billion\n        abbreviation = abbreviations.billion;\n        value = value / Math.pow(10, 9);\n    } else if ((abs < Math.pow(10, 9) && abs >= Math.pow(10, 6) && !forceAverage) || (forceAverage === \"million\")) {\n        // million\n        abbreviation = abbreviations.million;\n        value = value / Math.pow(10, 6);\n    } else if ((abs < Math.pow(10, 6) && abs >= Math.pow(10, 3) && !forceAverage) || (forceAverage === \"thousand\")) {\n        // thousand\n        abbreviation = abbreviations.thousand;\n        value = value / Math.pow(10, 3);\n    }\n\n    let optionalSpace = spaceSeparated ? \" \" : \"\";\n\n    if (abbreviation) {\n        abbreviation = optionalSpace + abbreviation;\n    }\n\n    if (totalLength) {\n        let characteristic = value.toString().split(\".\")[0];\n        mantissaPrecision = Math.max(totalLength - characteristic.length, 0);\n    }\n\n    return {value, abbreviation, mantissaPrecision};\n}\n\n/**\n * Compute an exponential form for VALUE, taking into account CHARACTERISTIC\n * if provided.\n * @param {number} value - value to compute\n * @param {number} [characteristicPrecision] - optional characteristic length\n * @return {{value: number, abbreviation: string}}\n */\nfunction computeExponential({value, characteristicPrecision = 0}) {\n    let [numberString, exponential] = value.toExponential().split(\"e\");\n    let number = +numberString;\n\n    if (!characteristicPrecision) {\n        return {\n            value: number,\n            abbreviation: `e${exponential}`\n        };\n    }\n\n    let characteristicLength = 1; // see `toExponential`\n\n    if (characteristicLength < characteristicPrecision) {\n        number = number * Math.pow(10, characteristicPrecision - characteristicLength);\n        exponential = +exponential - (characteristicPrecision - characteristicLength);\n        exponential = exponential >= 0 ? `+${exponential}` : exponential;\n    }\n\n    return {\n        value: number,\n        abbreviation: `e${exponential}`\n    };\n}\n\n/**\n * Return a string of NUMBER zero.\n *\n * @param {number} number - Length of the output\n * @return {string}\n */\nfunction zeroes(number) {\n    let result = \"\";\n    for (let i = 0; i < number; i++) {\n        result += \"0\";\n    }\n\n    return result;\n}\n\n/**\n * Return a string representing VALUE with a PRECISION-long mantissa.\n * This method is for large/small numbers only (a.k.a. including a \"e\").\n *\n * @param {number} value - number to precise\n * @param {number} precision - desired length for the mantissa\n * @return {string}\n */\nfunction toFixedLarge(value, precision) {\n    let result = value.toString();\n\n    let [base, exp] = result.split(\"e\");\n\n    let [characteristic, mantissa = \"\"] = base.split(\".\");\n\n    if (+exp > 0) {\n        result = characteristic + mantissa + zeroes(exp - mantissa.length);\n    } else {\n        let prefix = \".\";\n\n        if (+characteristic < 0) {\n            prefix = `-0${prefix}`;\n        } else {\n            prefix = `0${prefix}`;\n        }\n\n        let suffix = (zeroes(-exp - 1) + Math.abs(characteristic) + mantissa).substr(0, precision);\n        if (suffix.length < precision) {\n            suffix += zeroes(precision - suffix.length);\n        }\n        result = prefix + suffix;\n    }\n\n    if (+exp > 0 && precision > 0) {\n        result += `.${zeroes(precision)}`;\n    }\n\n    return result;\n}\n\n/**\n * Return a string representing VALUE with a PRECISION-long mantissa.\n *\n * @param {number} value - number to precise\n * @param {number} precision - desired length for the mantissa\n * @return {string}\n */\nfunction toFixed(value, precision) {\n    if (value.toString().indexOf(\"e\") !== -1) {\n        return toFixedLarge(value, precision);\n    }\n\n    return (Math.round(+`${value}e+${precision}`) / (Math.pow(10, precision))).toFixed(precision);\n}\n\n/**\n * Return the current OUTPUT with a mantissa precision of PRECISION.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} optionalMantissa - if `true`, the mantissa is omitted when it's only zeroes\n * @param {number} precision - desired precision of the mantissa\n * @param {boolean} trim - if `true`, trailing zeroes are removed from the mantissa\n * @return {string}\n */\nfunction setMantissaPrecision(output, value, optionalMantissa, precision, trim) {\n    if (precision === -1) {\n        return output;\n    }\n\n    let result = toFixed(value, precision);\n    let [currentCharacteristic, currentMantissa = \"\"] = result.toString().split(\".\");\n\n    if (currentMantissa.match(/^0+$/) && (optionalMantissa || trim)) {\n        return currentCharacteristic;\n    }\n\n    let hasTrailingZeroes = currentMantissa.match(/0+$/);\n    if (trim && hasTrailingZeroes) {\n        return `${currentCharacteristic}.${currentMantissa.toString().slice(0, hasTrailingZeroes.index)}`;\n    }\n\n    return result.toString();\n}\n\n/**\n * Return the current OUTPUT with a characteristic precision of PRECISION.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} optionalCharacteristic - `true` if the characteristic is omitted when it's only zeroes\n * @param {number} precision - desired precision of the characteristic\n * @return {string}\n */\nfunction setCharacteristicPrecision(output, value, optionalCharacteristic, precision) {\n    let result = output;\n    let [currentCharacteristic, currentMantissa] = result.toString().split(\".\");\n\n    if (currentCharacteristic.match(/^-?0$/) && optionalCharacteristic) {\n        if (!currentMantissa) {\n            return currentCharacteristic.replace(\"0\", \"\");\n        }\n\n        return `${currentCharacteristic.replace(\"0\", \"\")}.${currentMantissa}`;\n    }\n\n    if (currentCharacteristic.length < precision) {\n        let missingZeros = precision - currentCharacteristic.length;\n        for (let i = 0; i < missingZeros; i++) {\n            result = `0${result}`;\n        }\n    }\n\n    return result.toString();\n}\n\n/**\n * Return the indexes where are the group separations after splitting\n * `totalLength` in group of `groupSize` size.\n * Important: we start grouping from the right hand side.\n *\n * @param {number} totalLength - total length of the characteristic to split\n * @param {number} groupSize - length of each group\n * @return {[number]}\n */\nfunction indexesOfGroupSpaces(totalLength, groupSize) {\n    let result = [];\n    let counter = 0;\n    for (let i = totalLength; i > 0; i--) {\n        if (counter === groupSize) {\n            result.unshift(i);\n            counter = 0;\n        }\n        counter++;\n    }\n\n    return result;\n}\n\n/**\n * Replace the decimal separator with DECIMALSEPARATOR and insert thousand\n * separators.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} thousandSeparated - `true` if the characteristic must be separated\n * @param {globalState} state - shared state of the library\n * @param {string} decimalSeparator - string to use as decimal separator\n * @return {string}\n */\nfunction replaceDelimiters(output, value, thousandSeparated, state, decimalSeparator) {\n    let delimiters = state.currentDelimiters();\n    let thousandSeparator = delimiters.thousands;\n    decimalSeparator = decimalSeparator || delimiters.decimal;\n    let thousandsSize = delimiters.thousandsSize || 3;\n\n    let result = output.toString();\n    let characteristic = result.split(\".\")[0];\n    let mantissa = result.split(\".\")[1];\n\n    if (thousandSeparated) {\n        if (value < 0) {\n            // Remove the minus sign\n            characteristic = characteristic.slice(1);\n        }\n\n        let indexesToInsertThousandDelimiters = indexesOfGroupSpaces(characteristic.length, thousandsSize);\n        indexesToInsertThousandDelimiters.forEach((position, index) => {\n            characteristic = characteristic.slice(0, position + index) + thousandSeparator + characteristic.slice(position + index);\n        });\n\n        if (value < 0) {\n            // Add back the minus sign\n            characteristic = `-${characteristic}`;\n        }\n    }\n\n    if (!mantissa) {\n        result = characteristic;\n    } else {\n        result = characteristic + decimalSeparator + mantissa;\n    }\n    return result;\n}\n\n/**\n * Insert the provided ABBREVIATION at the end of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} abbreviation - abbreviation to append\n * @return {*}\n */\nfunction insertAbbreviation(output, abbreviation) {\n    return output + abbreviation;\n}\n\n/**\n * Insert the positive/negative sign according to the NEGATIVE flag.\n * If the value is negative but still output as 0, the negative sign is removed.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {string} negative - flag for the negative form (\"sign\" or \"parenthesis\")\n * @return {*}\n */\nfunction insertSign(output, value, negative) {\n    if (value === 0) {\n        return output;\n    }\n\n    if (+output === 0) {\n        return output.replace(\"-\", \"\");\n    }\n\n    if (value > 0) {\n        return `+${output}`;\n    }\n\n    if (negative === \"sign\") {\n        return output;\n    }\n\n    return `(${output.replace(\"-\", \"\")})`;\n}\n\n/**\n * Insert the provided PREFIX at the start of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} prefix - abbreviation to prepend\n * @return {*}\n */\nfunction insertPrefix(output, prefix) {\n    return prefix + output;\n}\n\n/**\n * Insert the provided POSTFIX at the end of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} postfix - abbreviation to append\n * @return {*}\n */\nfunction insertPostfix(output, postfix) {\n    return output + postfix;\n}\n\n/**\n * Format the provided INSTANCE as a number using the PROVIDEDFORMAT,\n * and the STATE.\n * This is the key method of the framework!\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} [providedFormat] - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param {string} decimalSeparator - string to use as decimal separator\n * @param {{}} defaults - Set of default values used for formatting\n * @return {string}\n */\nfunction formatNumber({instance, providedFormat, state = globalState, decimalSeparator, defaults = state.currentDefaults()}) {\n    let value = instance._value;\n\n    if (value === 0 && state.hasZeroFormat()) {\n        return state.getZeroFormat();\n    }\n\n    if (!isFinite(value)) {\n        return value.toString();\n    }\n\n    let options = Object.assign({}, defaultOptions, defaults, providedFormat);\n\n    let totalLength = options.totalLength;\n    let characteristicPrecision = totalLength ? 0 : options.characteristic;\n    let optionalCharacteristic = options.optionalCharacteristic;\n    let forceAverage = options.forceAverage;\n    let average = !!totalLength || !!forceAverage || options.average;\n\n    // default when averaging is to chop off decimals\n    let mantissaPrecision = totalLength ? -1 : (average && providedFormat.mantissa === undefined ? 0 : options.mantissa);\n    let optionalMantissa = totalLength ? false : (providedFormat.optionalMantissa === undefined ? mantissaPrecision === -1 : options.optionalMantissa);\n    let trimMantissa = options.trimMantissa;\n    let thousandSeparated = options.thousandSeparated;\n    let spaceSeparated = options.spaceSeparated;\n    let negative = options.negative;\n    let forceSign = options.forceSign;\n    let exponential = options.exponential;\n\n    let abbreviation = \"\";\n\n    if (average) {\n        let data = computeAverage({\n            value,\n            forceAverage,\n            abbreviations: state.currentAbbreviations(),\n            spaceSeparated: spaceSeparated,\n            totalLength\n        });\n\n        value = data.value;\n        abbreviation += data.abbreviation;\n\n        if (totalLength) {\n            mantissaPrecision = data.mantissaPrecision;\n        }\n    }\n\n    if (exponential) {\n        let data = computeExponential({\n            value,\n            characteristicPrecision\n        });\n\n        value = data.value;\n        abbreviation = data.abbreviation + abbreviation;\n    }\n\n    let output = setMantissaPrecision(value.toString(), value, optionalMantissa, mantissaPrecision, trimMantissa);\n    output = setCharacteristicPrecision(output, value, optionalCharacteristic, characteristicPrecision);\n    output = replaceDelimiters(output, value, thousandSeparated, state, decimalSeparator);\n\n    if (average || exponential) {\n        output = insertAbbreviation(output, abbreviation);\n    }\n\n    if (forceSign || value < 0) {\n        output = insertSign(output, value, negative);\n    }\n\n    return output;\n}\n\n/**\n * If FORMAT is non-null and not just an output, return FORMAT.\n * Return DEFAULTFORMAT otherwise.\n *\n * @param providedFormat\n * @param defaultFormat\n */\nfunction formatOrDefault(providedFormat, defaultFormat) {\n    if (!providedFormat) {\n        return defaultFormat;\n    }\n\n    let keys = Object.keys(providedFormat);\n    if (keys.length === 1 && keys[0] === \"output\") {\n        return defaultFormat;\n    }\n\n    return providedFormat;\n}\n\nmodule.exports = (numbro) => ({\n    format: (...args) => format(...args, numbro),\n    getByteUnit: (...args) => getByteUnit(...args, numbro),\n    getBinaryByteUnit: (...args) => getBinaryByteUnit(...args, numbro),\n    getDecimalByteUnit: (...args) => getDecimalByteUnit(...args, numbro),\n    formatOrDefault\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst enUS = require(\"./en-US\");\nconst validating = require(\"./validating\");\nconst parsing = require(\"./parsing\");\n\nlet state = {};\n\nlet currentLanguageTag = undefined;\nlet languages = {};\n\nlet zeroFormat = null;\n\nlet globalDefaults = {};\n\nfunction chooseLanguage(tag) { currentLanguageTag = tag; }\n\nfunction currentLanguageData() { return languages[currentLanguageTag]; }\n\n/**\n * Return all the register languages\n *\n * @return {{}}\n */\nstate.languages = () => Object.assign({}, languages);\n\n//\n// Current language accessors\n//\n\n/**\n * Return the current language tag\n *\n * @return {string}\n */\nstate.currentLanguage = () => currentLanguageTag;\n\n/**\n * Return the current language currency data\n *\n * @return {{}}\n */\nstate.currentCurrency = () => currentLanguageData().currency;\n\n/**\n * Return the current language abbreviations data\n *\n * @return {{}}\n */\nstate.currentAbbreviations = () => currentLanguageData().abbreviations;\n\n/**\n * Return the current language delimiters data\n *\n * @return {{}}\n */\nstate.currentDelimiters = () => currentLanguageData().delimiters;\n\n/**\n * Return the current language ordinal function\n *\n * @return {function}\n */\nstate.currentOrdinal = () => currentLanguageData().ordinal;\n\n//\n// Defaults\n//\n\n/**\n * Return the current formatting defaults.\n * Use first uses the current language default, then fallback to the globally defined defaults.\n *\n * @return {{}}\n */\nstate.currentDefaults = () => Object.assign({}, currentLanguageData().defaults, globalDefaults);\n\n/**\n * Return the ordinal default-format.\n * Use first uses the current language ordinal default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentOrdinalDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().ordinalFormat);\n\n/**\n * Return the byte default-format.\n * Use first uses the current language byte default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentByteDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().byteFormat);\n\n/**\n * Return the percentage default-format.\n * Use first uses the current language percentage default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentPercentageDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().percentageFormat);\n\n/**\n * Return the currency default-format.\n * Use first uses the current language currency default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentCurrencyDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().currencyFormat);\n\n/**\n * Return the time default-format.\n * Use first uses the current language currency default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentTimeDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().timeFormat);\n\n/**\n * Set the global formatting defaults.\n *\n * @param {{}|string} format - formatting options to use as defaults\n */\nstate.setDefaults = (format) => {\n    format = parsing.parseFormat(format);\n    if (validating.validateFormat(format)) {\n        globalDefaults = format;\n    }\n};\n\n//\n// Zero format\n//\n\n/**\n * Return the format string for 0.\n *\n * @return {string}\n */\nstate.getZeroFormat = () => zeroFormat;\n\n/**\n * Set a STRING to output when the value is 0.\n *\n * @param {{}|string} string - string to set\n */\nstate.setZeroFormat = (string) => zeroFormat = typeof(string) === \"string\" ? string : null;\n\n/**\n * Return true if a format for 0 has been set already.\n *\n * @return {boolean}\n */\nstate.hasZeroFormat = () => zeroFormat !== null;\n\n//\n// Getters/Setters\n//\n\n/**\n * Return the language data for the provided TAG.\n * Return the current language data if no tag is provided.\n *\n * Throw an error if the tag doesn't match any registered language.\n *\n * @param {string} [tag] - language tag of a registered language\n * @return {{}}\n */\nstate.languageData = (tag) => {\n    if (tag) {\n        if (languages[tag]) {\n            return languages[tag];\n        }\n        throw new Error(`Unknown tag \"${tag}\"`);\n    }\n\n    return currentLanguageData();\n};\n\n/**\n * Register the provided DATA as a language if and only if the data is valid.\n * If the data is not valid, an error is thrown.\n *\n * When USELANGUAGE is true, the registered language is then used.\n *\n * @param {{}} data - language data to register\n * @param {boolean} [useLanguage] - `true` if the provided data should become the current language\n */\nstate.registerLanguage = (data, useLanguage = false) => {\n    if (!validating.validateLanguage(data)) {\n        throw new Error(\"Invalid language data\");\n    }\n\n    languages[data.languageTag] = data;\n\n    if (useLanguage) {\n        chooseLanguage(data.languageTag);\n    }\n};\n\n/**\n * Set the current language according to TAG.\n * If TAG doesn't match a registered language, another language matching\n * the \"language\" part of the tag (according to BCP47: https://tools.ietf.org/rfc/bcp/bcp47.txt).\n * If none, the FALLBACKTAG is used. If the FALLBACKTAG doesn't match a register language,\n * `en-US` is finally used.\n *\n * @param tag\n * @param fallbackTag\n */\nstate.setLanguage = (tag, fallbackTag = enUS.languageTag) => {\n    if (!languages[tag]) {\n        let suffix = tag.split(\"-\")[0];\n\n        let matchingLanguageTag = Object.keys(languages).find(each => {\n            return each.split(\"-\")[0] === suffix;\n        });\n\n        if (!languages[matchingLanguageTag]) {\n            chooseLanguage(fallbackTag);\n            return;\n        }\n\n        chooseLanguage(matchingLanguageTag);\n        return;\n    }\n\n    chooseLanguage(tag);\n};\n\nstate.registerLanguage(enUS);\ncurrentLanguageTag = enUS.languageTag;\n\nmodule.exports = state;\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Load languages matching TAGS. Silently pass over the failing load.\n *\n * We assume here that we are in a node environment, so we don't check for it.\n * @param {[String]} tags - list of tags to load\n * @param {Numbro} numbro - the numbro singleton\n */\nfunction loadLanguagesInNode(tags, numbro) {\n    tags.forEach((tag) => {\n        let data = undefined;\n        try {\n            data = require(`../languages/${tag}`);\n        } catch (e) {\n            console.error(`Unable to load \"${tag}\". No matching language file found.`); // eslint-disable-line no-console\n        }\n\n        if (data) {\n            numbro.registerLanguage(data);\n        }\n    });\n}\n\nmodule.exports = (numbro) => ({\n    loadLanguagesInNode: (tags) => loadLanguagesInNode(tags, numbro)\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst BigNumber = require(\"bignumber.js\");\n\n/**\n * Add a number or a numbro to N.\n *\n * @param {Numbro} n - augend\n * @param {number|Numbro} other - addend\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction add(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.plus(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Subtract a number or a numbro from N.\n *\n * @param {Numbro} n - minuend\n * @param {number|Numbro} other - subtrahend\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction subtract(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.minus(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Multiply N by a number or a numbro.\n *\n * @param {Numbro} n - multiplicand\n * @param {number|Numbro} other - multiplier\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction multiply(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.times(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Divide N by a number or a numbro.\n *\n * @param {Numbro} n - dividend\n * @param {number|Numbro} other - divisor\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction divide(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.dividedBy(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Set N to the OTHER (or the value of OTHER when it's a numbro instance).\n *\n * @param {Numbro} n - numbro instance to mutate\n * @param {number|Numbro} other - new value to assign to N\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction set (n, other, numbro) {\n    let value = other;\n\n    if (numbro.isNumbro(other)) {\n        value = other._value;\n    }\n\n    n._value = value;\n    return n;\n}\n\n/**\n * Return the distance between N and OTHER.\n *\n * @param {Numbro} n\n * @param {number|Numbro} other\n * @param {numbro} numbro - numbro singleton\n * @return {number}\n */\nfunction difference(n, other, numbro) {\n    let clone = numbro(n._value);\n    subtract(clone, other, numbro);\n\n    return Math.abs(clone._value);\n}\n\nmodule.exports = numbro => ({\n    add: (n, other) => add(n, other, numbro),\n    subtract: (n, other) => subtract(n, other, numbro),\n    multiply: (n, other) => multiply(n, other, numbro),\n    divide: (n, other) => divide(n, other, numbro),\n    set: (n, other) => set(n, other, numbro),\n    difference: (n, other) => difference(n, other, numbro)\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst VERSION = \"2.1.2\";\n\nconst globalState = require(\"./globalState\");\nconst validator = require(\"./validating\");\nconst loader = require(\"./loading\")(numbro);\nconst unformatter = require(\"./unformatting\");\nlet formatter = require(\"./formatting\")(numbro);\nlet manipulate = require(\"./manipulating\")(numbro);\nconst parsing = require(\"./parsing\");\n\nclass Numbro {\n    constructor(number) {\n        this._value = number;\n    }\n\n    clone() { return numbro(this._value); }\n\n    format(format = {}) { return formatter.format(this, format); }\n\n    formatCurrency(format) {\n        if (typeof format === \"string\") {\n            format = parsing.parseFormat(format);\n        }\n        format = formatter.formatOrDefault(format, globalState.currentCurrencyDefaultFormat());\n        format.output = \"currency\";\n        return formatter.format(this, format);\n    }\n\n    formatTime(format = {}) {\n        format.output = \"time\";\n        return formatter.format(this, format);\n    }\n\n    binaryByteUnits() { return formatter.getBinaryByteUnit(this);}\n\n    decimalByteUnits() { return formatter.getDecimalByteUnit(this);}\n\n    byteUnits() { return formatter.getByteUnit(this);}\n\n    difference(other) { return manipulate.difference(this, other); }\n\n    add(other) { return manipulate.add(this, other); }\n\n    subtract(other) { return manipulate.subtract(this, other); }\n\n    multiply(other) { return manipulate.multiply(this, other); }\n\n    divide(other) { return manipulate.divide(this, other); }\n\n    set(input) { return manipulate.set(this, normalizeInput(input)); }\n\n    value() { return this._value; }\n\n    valueOf() { return this._value; }\n}\n\n/**\n * Make its best to convert input into a number.\n *\n * @param {numbro|string|number} input - Input to convert\n * @return {number}\n */\nfunction normalizeInput(input) {\n    let result = input;\n    if (numbro.isNumbro(input)) {\n        result = input._value;\n    } else if (typeof input === \"string\") {\n        result = numbro.unformat(input);\n    } else if (isNaN(input)) {\n        result = NaN;\n    }\n\n    return result;\n}\n\nfunction numbro(input) {\n    return new Numbro(normalizeInput(input));\n}\n\nnumbro.version = VERSION;\n\nnumbro.isNumbro = function(object) {\n    return object instanceof Numbro;\n};\n\n//\n// `numbro` static methods\n//\n\nnumbro.language = globalState.currentLanguage;\nnumbro.registerLanguage = globalState.registerLanguage;\nnumbro.setLanguage = globalState.setLanguage;\nnumbro.languages = globalState.languages;\nnumbro.languageData = globalState.languageData;\nnumbro.zeroFormat = globalState.setZeroFormat;\nnumbro.defaultFormat = globalState.currentDefaults;\nnumbro.setDefaults = globalState.setDefaults;\nnumbro.defaultCurrencyFormat = globalState.currentCurrencyDefaultFormat;\nnumbro.validate = validator.validate;\nnumbro.loadLanguagesInNode = loader.loadLanguagesInNode;\nnumbro.unformat = unformatter.unformat;\n\nmodule.exports = numbro;\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Parse the format STRING looking for a prefix. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parsePrefix(string, result) {\n    let match = string.match(/^{([^}]*)}/);\n    if (match) {\n        result.prefix = match[1];\n        return string.slice(match[0].length);\n    }\n\n    return string;\n}\n\n/**\n * Parse the format STRING looking for a postfix. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parsePostfix(string, result) {\n    let match = string.match(/{([^}]*)}$/);\n    if (match) {\n        result.postfix = match[1];\n\n        return string.slice(0, -match[0].length);\n    }\n\n    return string;\n}\n\n/**\n * Parse the format STRING looking for the output value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseOutput(string, result) {\n    if (string.indexOf(\"$\") !== -1) {\n        result.output = \"currency\";\n        return;\n    }\n\n    if (string.indexOf(\"%\") !== -1) {\n        result.output = \"percent\";\n        return;\n    }\n\n    if (string.indexOf(\"bd\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"general\";\n        return;\n    }\n\n    if (string.indexOf(\"b\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"binary\";\n        return;\n\n    }\n\n    if (string.indexOf(\"d\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"decimal\";\n        return;\n\n    }\n\n    if (string.indexOf(\":\") !== -1) {\n        result.output = \"time\";\n        return;\n    }\n\n    if (string.indexOf(\"o\") !== -1) {\n        result.output = \"ordinal\";\n    }\n}\n\n/**\n * Parse the format STRING looking for the thousand separated value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseThousandSeparated(string, result) {\n    if (string.indexOf(\",\") !== -1) {\n        result.thousandSeparated = true;\n    }\n}\n\n/**\n * Parse the format STRING looking for the space separated value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseSpaceSeparated(string, result) {\n    if (string.indexOf(\" \") !== -1) {\n        result.spaceSeparated = true;\n    }\n}\n\n/**\n * Parse the format STRING looking for the total length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseTotalLength(string, result) {\n    let match = string.match(/[1-9]+[0-9]*/);\n\n    if (match) {\n        result.totalLength = +match[0];\n    }\n}\n\n/**\n * Parse the format STRING looking for the characteristic length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseCharacteristic(string, result) {\n    let characteristic = string.split(\".\")[0];\n    let match = characteristic.match(/0+/);\n    if (match) {\n        result.characteristic = match[0].length;\n    }\n}\n\n/**\n * Parse the format STRING looking for the mantissa length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseMantissa(string, result) {\n    let mantissa = string.split(\".\")[1];\n    if (mantissa) {\n        let match = mantissa.match(/0+/);\n        if (match) {\n            result.mantissa = match[0].length;\n        }\n    }\n}\n\n/**\n * Parse the format STRING looking for the average value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseAverage(string, result) {\n    if (string.indexOf(\"a\") !== -1) {\n        result.average = true;\n    }\n}\n\n/**\n * Parse the format STRING looking for a forced average precision. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseForceAverage(string, result) {\n    if (string.indexOf(\"K\") !== -1) {\n        result.forceAverage = \"thousand\";\n    } else if (string.indexOf(\"M\") !== -1) {\n        result.forceAverage = \"million\";\n    } else if (string.indexOf(\"B\") !== -1) {\n        result.forceAverage = \"billion\";\n    } else if (string.indexOf(\"T\") !== -1) {\n        result.forceAverage = \"trillion\";\n    }\n}\n\n/**\n * Parse the format STRING finding if the mantissa is optional. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseOptionalMantissa(string, result) {\n    if (string.match(/\\[\\.]/)) {\n        result.optionalMantissa = true;\n    } else if (string.match(/\\./)) {\n        result.optionalMantissa = false;\n    }\n}\n\n/**\n * Parse the format STRING finding if the characteristic is optional. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseOptionalCharacteristic(string, result) {\n    if (string.indexOf(\".\") !== -1) {\n        let characteristic = string.split(\".\")[0];\n        result.optionalCharacteristic = characteristic.indexOf(\"0\") === -1;\n    }\n}\n\n/**\n * Parse the format STRING looking for the negative format. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseNegative(string, result) {\n    if (string.match(/^\\+?\\([^)]*\\)$/)) {\n        result.negative = \"parenthesis\";\n    }\n    if (string.match(/^\\+?-/)) {\n        result.negative = \"sign\";\n    }\n}\n\n/**\n * Parse the format STRING finding if the sign is mandatory. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseForceSign(string, result) {\n    if (string.match(/^\\+/)) {\n        result.forceSign = true;\n    }\n}\n\n/**\n * Parse the format STRING and accumulating the values ie RESULT.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {NumbroFormat} - format\n */\nfunction parseFormat(string, result = {}) {\n    if (typeof string !== \"string\") {\n        return string;\n    }\n\n    string = parsePrefix(string, result);\n    string = parsePostfix(string, result);\n    parseOutput(string, result);\n    parseTotalLength(string, result);\n    parseCharacteristic(string, result);\n    parseOptionalCharacteristic(string, result);\n    parseAverage(string, result);\n    parseForceAverage(string, result);\n    parseMantissa(string, result);\n    parseOptionalMantissa(string, result);\n    parseThousandSeparated(string, result);\n    parseSpaceSeparated(string, result);\n    parseNegative(string, result);\n    parseForceSign(string, result);\n\n    return result;\n}\n\nmodule.exports = {\n    parseFormat\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst allSuffixes = [\n    {key: \"ZiB\", factor: Math.pow(1024, 7)},\n    {key: \"ZB\", factor: Math.pow(1000, 7)},\n    {key: \"YiB\", factor: Math.pow(1024, 8)},\n    {key: \"YB\", factor: Math.pow(1000, 8)},\n    {key: \"TiB\", factor: Math.pow(1024, 4)},\n    {key: \"TB\", factor: Math.pow(1000, 4)},\n    {key: \"PiB\", factor: Math.pow(1024, 5)},\n    {key: \"PB\", factor: Math.pow(1000, 5)},\n    {key: \"MiB\", factor: Math.pow(1024, 2)},\n    {key: \"MB\", factor: Math.pow(1000, 2)},\n    {key: \"KiB\", factor: Math.pow(1024, 1)},\n    {key: \"KB\", factor: Math.pow(1000, 1)},\n    {key: \"GiB\", factor: Math.pow(1024, 3)},\n    {key: \"GB\", factor: Math.pow(1000, 3)},\n    {key: \"EiB\", factor: Math.pow(1024, 6)},\n    {key: \"EB\", factor: Math.pow(1000, 6)},\n    {key: \"B\", factor: 1}\n];\n\n/**\n * Generate a RegExp where S get all RegExp specific characters escaped.\n *\n * @param {string} s - string representing a RegExp\n * @return {string}\n */\nfunction escapeRegExp(s) {\n    return s.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n}\n\n/**\n * Recursively compute the unformatted value.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @param {function} ordinal - function used to generate an ordinal out of a number\n * @param {string} zeroFormat - string representing zero\n * @param {*} abbreviations - abbreviations used while generating the inputString\n * @param {NumbroFormat} format - format used while generating the inputString\n * @return {number|undefined}\n */\nfunction computeUnformattedValue(inputString, delimiters, currencySymbol = \"\", ordinal, zeroFormat, abbreviations, format) {\n    if (!isNaN(+inputString)) {\n        return +inputString;\n    }\n\n    let stripped = \"\";\n    // Negative\n\n    let newInput = inputString.replace(/(^[^(]*)\\((.*)\\)([^)]*$)/, \"$1$2$3\");\n\n    if (newInput !== inputString) {\n        return -1 * computeUnformattedValue(newInput, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n    }\n\n    // Byte\n\n    for (let i = 0; i < allSuffixes.length; i++) {\n        let suffix = allSuffixes[i];\n        stripped = inputString.replace(suffix.key, \"\");\n\n        if (stripped !== inputString) {\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) * suffix.factor;\n        }\n    }\n\n    // Percent\n\n    stripped = inputString.replace(\"%\", \"\");\n\n    if (stripped !== inputString) {\n        return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) / 100;\n    }\n\n    // Ordinal\n\n    let possibleOrdinalValue = parseFloat(inputString);\n\n    if (isNaN(possibleOrdinalValue)) {\n        return undefined;\n    }\n\n    let ordinalString = ordinal(possibleOrdinalValue);\n    if (ordinalString && ordinalString !== \".\") { // if ordinal is \".\" it will be caught next round in the +inputString\n        stripped = inputString.replace(new RegExp(`${escapeRegExp(ordinalString)}$`), \"\");\n\n        if (stripped !== inputString) {\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n        }\n    }\n\n    // Average\n\n    let inversedAbbreviations = {};\n    Object.keys(abbreviations).forEach((key) => {\n        inversedAbbreviations[abbreviations[key]] = key;\n    });\n\n    let abbreviationValues = Object.keys(inversedAbbreviations).sort().reverse();\n    let numberOfAbbreviations = abbreviationValues.length;\n\n    for (let i = 0; i < numberOfAbbreviations; i++) {\n        let value = abbreviationValues[i];\n        let key = inversedAbbreviations[value];\n\n        stripped = inputString.replace(value, \"\");\n        if (stripped !== inputString) {\n            let factor = undefined;\n            switch (key) { // eslint-disable-line default-case\n                case \"thousand\":\n                    factor = Math.pow(10, 3);\n                    break;\n                case \"million\":\n                    factor = Math.pow(10, 6);\n                    break;\n                case \"billion\":\n                    factor = Math.pow(10, 9);\n                    break;\n                case \"trillion\":\n                    factor = Math.pow(10, 12);\n                    break;\n            }\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) * factor;\n        }\n    }\n\n    return undefined;\n}\n\n/**\n * Removes in one pass all formatting symbols.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @return {string}\n */\nfunction removeFormattingSymbols(inputString, delimiters, currencySymbol = \"\") {\n    // Currency\n\n    let stripped = inputString.replace(currencySymbol, \"\");\n\n    // Thousand separators\n\n    stripped = stripped.replace(new RegExp(`([0-9])${escapeRegExp(delimiters.thousands)}([0-9])`, \"g\"), \"$1$2\");\n\n    // Decimal\n\n    stripped = stripped.replace(delimiters.decimal, \".\");\n\n    return stripped;\n}\n\n/**\n * Unformat a numbro-generated string to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @param {function} ordinal - function used to generate an ordinal out of a number\n * @param {string} zeroFormat - string representing zero\n * @param {*} abbreviations - abbreviations used while generating the inputString\n * @param {NumbroFormat} format - format used while generating the inputString\n * @return {number|undefined}\n */\nfunction unformatValue(inputString, delimiters, currencySymbol = \"\", ordinal, zeroFormat, abbreviations, format) {\n    if (inputString === \"\") {\n        return undefined;\n    }\n\n    // Zero Format\n\n    if (inputString === zeroFormat) {\n        return 0;\n    }\n\n    let value = removeFormattingSymbols(inputString, delimiters, currencySymbol);\n    return computeUnformattedValue(value, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n}\n\n/**\n * Check if the INPUTSTRING represents a time.\n *\n * @param {string} inputString - string to check\n * @param {*} delimiters - Delimiters used while generating the inputString\n * @return {boolean}\n */\nfunction matchesTime(inputString, delimiters) {\n    let separators = inputString.indexOf(\":\") && delimiters.thousands !== \":\";\n\n    if (!separators) {\n        return false;\n    }\n\n    let segments = inputString.split(\":\");\n    if (segments.length !== 3) {\n        return false;\n    }\n\n    let hours = +segments[0];\n    let minutes = +segments[1];\n    let seconds = +segments[2];\n\n    return !isNaN(hours) && !isNaN(minutes) && !isNaN(seconds);\n}\n\n/**\n * Unformat a numbro-generated string representing a time to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @return {number}\n */\nfunction unformatTime(inputString) {\n    let segments = inputString.split(\":\");\n\n    let hours = +segments[0];\n    let minutes = +segments[1];\n    let seconds = +segments[2];\n\n    return seconds + 60 * minutes + 3600 * hours;\n}\n\n/**\n * Unformat a numbro-generated string to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @param {NumbroFormat} format - format used  while generating the inputString\n * @return {number}\n */\nfunction unformat(inputString, format) {\n    // Avoid circular references\n    const globalState = require(\"./globalState\");\n\n    let delimiters = globalState.currentDelimiters();\n    let currencySymbol = globalState.currentCurrency().symbol;\n    let ordinal = globalState.currentOrdinal();\n    let zeroFormat = globalState.getZeroFormat();\n    let abbreviations = globalState.currentAbbreviations();\n\n    let value = undefined;\n\n    if (typeof inputString === \"string\") {\n        if (matchesTime(inputString, delimiters)) {\n            value = unformatTime(inputString);\n        } else {\n            value = unformatValue(inputString, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n        }\n    } else if (typeof inputString === \"number\") {\n        value = inputString;\n    } else {\n        return undefined;\n    }\n\n    if (value === undefined) {\n        return undefined;\n    }\n\n    return value;\n}\n\nmodule.exports = {\n    unformat\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nlet unformatter = require(\"./unformatting\");\n\n// Simplified regexp supporting only `language`, `script`, and `region`\nconst bcp47RegExp = /^[a-z]{2,3}(-[a-zA-Z]{4})?(-([A-Z]{2}|[0-9]{3}))?$/;\n\nconst validOutputValues = [\n    \"currency\",\n    \"percent\",\n    \"byte\",\n    \"time\",\n    \"ordinal\",\n    \"number\"\n];\n\nconst validForceAverageValues = [\n    \"trillion\",\n    \"billion\",\n    \"million\",\n    \"thousand\"\n];\n\nconst validCurrencyPosition = [\n    \"prefix\",\n    \"infix\",\n    \"postfix\"\n];\n\nconst validNegativeValues = [\n    \"sign\",\n    \"parenthesis\"\n];\n\nconst validMandatoryAbbreviations = {\n    type: \"object\",\n    children: {\n        thousand: {\n            type: \"string\",\n            mandatory: true\n        },\n        million: {\n            type: \"string\",\n            mandatory: true\n        },\n        billion: {\n            type: \"string\",\n            mandatory: true\n        },\n        trillion: {\n            type: \"string\",\n            mandatory: true\n        }\n    },\n    mandatory: true\n};\n\nconst validAbbreviations = {\n    type: \"object\",\n    children: {\n        thousand: \"string\",\n        million: \"string\",\n        billion: \"string\",\n        trillion: \"string\"\n    }\n};\n\nconst validBaseValues = [\n    \"decimal\",\n    \"binary\",\n    \"general\"\n];\n\nconst validFormat = {\n    output: {\n        type: \"string\",\n        validValues: validOutputValues\n    },\n    base: {\n        type: \"string\",\n        validValues: validBaseValues,\n        restriction: (number, format) => format.output === \"byte\",\n        message: \"`base` must be provided only when the output is `byte`\",\n        mandatory: (format) => format.output === \"byte\"\n    },\n    characteristic: {\n        type: \"number\",\n        restriction: (number) => number >= 0,\n        message: \"value must be positive\"\n    },\n    prefix: \"string\",\n    postfix: \"string\",\n    forceAverage: {\n        type: \"string\",\n        validValues: validForceAverageValues\n    },\n    average: \"boolean\",\n    currencyPosition: {\n        type: \"string\",\n        validValues: validCurrencyPosition\n    },\n    currencySymbol: \"string\",\n    totalLength: {\n        type: \"number\",\n        restrictions: [\n            {\n                restriction: (number) => number >= 0,\n                message: \"value must be positive\"\n            },\n            {\n                restriction: (number, format) => !format.exponential,\n                message: \"`totalLength` is incompatible with `exponential`\"\n            }\n        ]\n    },\n    mantissa: {\n        type: \"number\",\n        restriction: (number) => number >= 0,\n        message: \"value must be positive\"\n    },\n    optionalMantissa: \"boolean\",\n    trimMantissa: \"boolean\",\n    optionalCharacteristic: \"boolean\",\n    thousandSeparated: \"boolean\",\n    spaceSeparated: \"boolean\",\n    abbreviations: validAbbreviations,\n    negative: {\n        type: \"string\",\n        validValues: validNegativeValues\n    },\n    forceSign: \"boolean\",\n    exponential: {\n        type: \"boolean\"\n    },\n    prefixSymbol: {\n        type: \"boolean\",\n        restriction: (number, format) => format.output === \"percent\",\n        message: \"`prefixSymbol` can be provided only when the output is `percent`\"\n    }\n};\n\nconst validLanguage = {\n    languageTag: {\n        type: \"string\",\n        mandatory: true,\n        restriction: (tag) => {\n            return tag.match(bcp47RegExp);\n        },\n        message: \"the language tag must follow the BCP 47 specification (see https://tools.ieft.org/html/bcp47)\"\n    },\n    delimiters: {\n        type: \"object\",\n        children: {\n            thousands: \"string\",\n            decimal: \"string\",\n            thousandsSize: \"number\"\n        },\n        mandatory: true\n    },\n    abbreviations: validMandatoryAbbreviations,\n    spaceSeparated: \"boolean\",\n    ordinal: {\n        type: \"function\",\n        mandatory: true\n    },\n    currency: {\n        type: \"object\",\n        children: {\n            symbol: \"string\",\n            position: \"string\",\n            code: \"string\"\n        },\n        mandatory: true\n    },\n    defaults: \"format\",\n    ordinalFormat: \"format\",\n    byteFormat: \"format\",\n    percentageFormat: \"format\",\n    currencyFormat: \"format\",\n    timeDefaults: \"format\",\n    formats: {\n        type: \"object\",\n        children: {\n            fourDigits: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithTwoDecimals: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithTwoDecimalsNoCurrency: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithNoDecimals: {\n                type: \"format\",\n                mandatory: true\n            }\n        }\n    }\n};\n\n/**\n * Check the validity of the provided input and format.\n * The check is NOT lazy.\n *\n * @param {string|number|Numbro} input - input to check\n * @param {NumbroFormat} format - format to check\n * @return {boolean} True when everything is correct\n */\nfunction validate(input, format) {\n    let validInput = validateInput(input);\n    let isFormatValid = validateFormat(format);\n\n    return validInput && isFormatValid;\n}\n\n/**\n * Check the validity of the numbro input.\n *\n * @param {string|number|Numbro} input - input to check\n * @return {boolean} True when everything is correct\n */\nfunction validateInput(input) {\n    let value = unformatter.unformat(input);\n\n    return !!value;\n}\n\n/**\n * Check the validity of the provided format TOVALIDATE against SPEC.\n *\n * @param {NumbroFormat} toValidate - format to check\n * @param {*} spec - specification against which to check\n * @param {string} prefix - prefix use for error messages\n * @param {boolean} skipMandatoryCheck - `true` when the check for mandatory key must be skipped\n * @return {boolean} True when everything is correct\n */\nfunction validateSpec(toValidate, spec, prefix, skipMandatoryCheck = false) {\n    let results = Object.keys(toValidate).map((key) => {\n        if (!spec[key]) {\n            console.error(`${prefix} Invalid key: ${key}`); // eslint-disable-line no-console\n            return false;\n        }\n\n        let value = toValidate[key];\n        let data = spec[key];\n\n        if (typeof data === \"string\") {\n            data = {type: data};\n        }\n\n        if (data.type === \"format\") { // all formats are partial (a.k.a will be merged with some default values) thus no need to check mandatory values\n            let valid = validateSpec(value, validFormat, `[Validate ${key}]`, true);\n\n            if (!valid) {\n                return false;\n            }\n        } else if (typeof value !== data.type) {\n            console.error(`${prefix} ${key} type mismatched: \"${data.type}\" expected, \"${typeof value}\" provided`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.restrictions && data.restrictions.length) {\n            let length = data.restrictions.length;\n            for (let i = 0; i < length; i++) {\n                let {restriction, message} = data.restrictions[i];\n                if (!restriction(value, toValidate)) {\n                    console.error(`${prefix} ${key} invalid value: ${message}`); // eslint-disable-line no-console\n                    return false;\n                }\n            }\n        }\n\n        if (data.restriction && !data.restriction(value, toValidate)) {\n            console.error(`${prefix} ${key} invalid value: ${data.message}`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.validValues && data.validValues.indexOf(value) === -1) {\n            console.error(`${prefix} ${key} invalid value: must be among ${JSON.stringify(data.validValues)}, \"${value}\" provided`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.children) {\n            let valid = validateSpec(value, data.children, `[Validate ${key}]`);\n\n            if (!valid) {\n                return false;\n            }\n        }\n\n        return true;\n    });\n\n    if (!skipMandatoryCheck) {\n        results.push(...Object.keys(spec).map((key) => {\n            let data = spec[key];\n            if (typeof data === \"string\") {\n                data = {type: data};\n            }\n\n            if (data.mandatory) {\n                let mandatory = data.mandatory;\n                if (typeof mandatory === \"function\") {\n                    mandatory = mandatory(toValidate);\n                }\n\n                if (mandatory && toValidate[key] === undefined) {\n                    console.error(`${prefix} Missing mandatory key \"${key}\"`); // eslint-disable-line no-console\n                    return false;\n                }\n            }\n\n            return true;\n        }));\n    }\n\n    return results.reduce((acc, current) => {\n        return acc && current;\n    }, true);\n}\n\n/**\n * Check the provided FORMAT.\n *\n * @param {NumbroFormat} format - format to check\n * @return {boolean}\n */\nfunction validateFormat(format) {\n    return validateSpec(format, validFormat, \"[Validate format]\");\n}\n\n/**\n * Check the provided LANGUAGE.\n *\n * @param {NumbroLanguage} language - language to check\n * @return {boolean}\n */\nfunction validateLanguage(language) {\n    return validateSpec(language, validLanguage, \"[Validate language]\");\n}\n\nmodule.exports = {\n    validate,\n    validateFormat,\n    validateInput,\n    validateLanguage\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}