{"ast":null,"code":"import { IndexMap, alterUtilsFactory, getDecreasedIndexes, getIncreasedIndexes } from \"../../../translations/index.mjs\";\nconst {\n  getListWithInsertedItems,\n  getListWithRemovedItems\n} = alterUtilsFactory('physicallyIndexed');\n\n/**\n * Map from physical index to another index.\n */\nclass LooseBindsMap extends IndexMap {\n  constructor() {\n    super(index => index);\n  }\n\n  /**\n   * Add values to list and reorganize.\n   *\n   * @private\n   * @param {number} insertionIndex Position inside the list.\n   * @param {Array} insertedIndexes List of inserted indexes.\n   */\n  insert(insertionIndex, insertedIndexes) {\n    const listAfterUpdate = getIncreasedIndexes(this.indexedValues, insertedIndexes);\n    this.indexedValues = getListWithInsertedItems(listAfterUpdate, insertionIndex, insertedIndexes, this.initValueOrFn);\n    super.insert(insertionIndex, insertedIndexes);\n  }\n\n  /**\n   * Remove values from the list and reorganize.\n   *\n   * @private\n   * @param {Array} removedIndexes List of removed indexes.\n   */\n  remove(removedIndexes) {\n    const listAfterUpdate = getListWithRemovedItems(this.indexedValues, removedIndexes);\n    this.indexedValues = getDecreasedIndexes(listAfterUpdate, removedIndexes);\n    super.remove(removedIndexes);\n  }\n}\nexport default LooseBindsMap;","map":{"version":3,"names":["IndexMap","alterUtilsFactory","getDecreasedIndexes","getIncreasedIndexes","getListWithInsertedItems","getListWithRemovedItems","LooseBindsMap","constructor","index","insert","insertionIndex","insertedIndexes","listAfterUpdate","indexedValues","initValueOrFn","remove","removedIndexes"],"sources":["D:/gym-project/frontend/node_modules/handsontable/plugins/bindRowsWithHeaders/maps/looseBindsMap.mjs"],"sourcesContent":["import { IndexMap, alterUtilsFactory, getDecreasedIndexes, getIncreasedIndexes } from \"../../../translations/index.mjs\";\nconst {\n  getListWithInsertedItems,\n  getListWithRemovedItems\n} = alterUtilsFactory('physicallyIndexed');\n\n/**\n * Map from physical index to another index.\n */\nclass LooseBindsMap extends IndexMap {\n  constructor() {\n    super(index => index);\n  }\n\n  /**\n   * Add values to list and reorganize.\n   *\n   * @private\n   * @param {number} insertionIndex Position inside the list.\n   * @param {Array} insertedIndexes List of inserted indexes.\n   */\n  insert(insertionIndex, insertedIndexes) {\n    const listAfterUpdate = getIncreasedIndexes(this.indexedValues, insertedIndexes);\n    this.indexedValues = getListWithInsertedItems(listAfterUpdate, insertionIndex, insertedIndexes, this.initValueOrFn);\n    super.insert(insertionIndex, insertedIndexes);\n  }\n\n  /**\n   * Remove values from the list and reorganize.\n   *\n   * @private\n   * @param {Array} removedIndexes List of removed indexes.\n   */\n  remove(removedIndexes) {\n    const listAfterUpdate = getListWithRemovedItems(this.indexedValues, removedIndexes);\n    this.indexedValues = getDecreasedIndexes(listAfterUpdate, removedIndexes);\n    super.remove(removedIndexes);\n  }\n}\nexport default LooseBindsMap;"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,iBAAiB,EAAEC,mBAAmB,EAAEC,mBAAmB,QAAQ,iCAAiC;AACvH,MAAM;EACJC,wBAAwB;EACxBC;AACF,CAAC,GAAGJ,iBAAiB,CAAC,mBAAmB,CAAC;;AAE1C;AACA;AACA;AACA,MAAMK,aAAa,SAASN,QAAQ,CAAC;EACnCO,WAAWA,CAAA,EAAG;IACZ,KAAK,CAACC,KAAK,IAAIA,KAAK,CAAC;EACvB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,MAAMA,CAACC,cAAc,EAAEC,eAAe,EAAE;IACtC,MAAMC,eAAe,GAAGT,mBAAmB,CAAC,IAAI,CAACU,aAAa,EAAEF,eAAe,CAAC;IAChF,IAAI,CAACE,aAAa,GAAGT,wBAAwB,CAACQ,eAAe,EAAEF,cAAc,EAAEC,eAAe,EAAE,IAAI,CAACG,aAAa,CAAC;IACnH,KAAK,CAACL,MAAM,CAACC,cAAc,EAAEC,eAAe,CAAC;EAC/C;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEI,MAAMA,CAACC,cAAc,EAAE;IACrB,MAAMJ,eAAe,GAAGP,uBAAuB,CAAC,IAAI,CAACQ,aAAa,EAAEG,cAAc,CAAC;IACnF,IAAI,CAACH,aAAa,GAAGX,mBAAmB,CAACU,eAAe,EAAEI,cAAc,CAAC;IACzE,KAAK,CAACD,MAAM,CAACC,cAAc,CAAC;EAC9B;AACF;AACA,eAAeV,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}