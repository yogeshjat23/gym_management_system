{"ast":null,"code":"function _classPrivateMethodInitSpec(e, a) {\n  _checkPrivateRedeclaration(e, a), a.add(e);\n}\nfunction _classPrivateFieldInitSpec(e, t, a) {\n  _checkPrivateRedeclaration(e, t), t.set(e, a);\n}\nfunction _checkPrivateRedeclaration(e, t) {\n  if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n}\nfunction _classPrivateFieldGet(s, a) {\n  return s.get(_assertClassBrand(s, a));\n}\nfunction _classPrivateFieldSet(s, a, r) {\n  return s.set(_assertClassBrand(s, a), r), r;\n}\nfunction _assertClassBrand(e, t, n) {\n  if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n;\n  throw new TypeError(\"Private element is not present on this object\");\n}\nimport { BasePlugin } from \"../base/index.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nimport freezeColumnItem from \"./contextMenuItem/freezeColumn.mjs\";\nimport unfreezeColumnItem from \"./contextMenuItem/unfreezeColumn.mjs\";\nHooks.getSingleton().register('beforeColumnFreeze');\nHooks.getSingleton().register('afterColumnFreeze');\nHooks.getSingleton().register('beforeColumnUnfreeze');\nHooks.getSingleton().register('afterColumnUnfreeze');\nexport const PLUGIN_KEY = 'manualColumnFreeze';\nexport const PLUGIN_PRIORITY = 110;\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @plugin ManualColumnFreeze\n * @class ManualColumnFreeze\n *\n * @description\n * This plugin allows to manually \"freeze\" and \"unfreeze\" a column using an entry in the Context Menu or using API.\n * You can turn it on by setting a {@link Options#manualColumnFreeze} property to `true`.\n *\n * @example\n * ```js\n * // Enables the plugin\n * manualColumnFreeze: true,\n * ```\n */\nvar _afterFirstUse = /*#__PURE__*/new WeakMap();\nvar _ManualColumnFreeze_brand = /*#__PURE__*/new WeakSet();\nexport class ManualColumnFreeze extends BasePlugin {\n  constructor() {\n    super(...arguments);\n    /**\n     * Adds the manualColumnFreeze context menu entries.\n     *\n     * @private\n     * @param {object} options Context menu options.\n     */\n    _classPrivateMethodInitSpec(this, _ManualColumnFreeze_brand);\n    /**\n     * Determines when the moving operation is allowed.\n     *\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _afterFirstUse, false);\n  }\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link ManualColumnFreeze#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return !!this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    if (this.enabled) {\n      return;\n    }\n    this.addHook('afterContextMenuDefaultOptions', options => _assertClassBrand(_ManualColumnFreeze_brand, this, _addContextMenuEntry).call(this, options));\n    this.addHook('beforeColumnMove', (columns, finalIndex) => _assertClassBrand(_ManualColumnFreeze_brand, this, _onBeforeColumnMove).call(this, columns, finalIndex));\n    super.enablePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    _classPrivateFieldSet(_afterFirstUse, this, false);\n    super.disablePlugin();\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:\n   *  - [`manualColumnFreeze`](@/api/options.md#manualcolumnfreeze)\n   */\n  updatePlugin() {\n    this.disablePlugin();\n    this.enablePlugin();\n    super.updatePlugin();\n  }\n\n  /**\n   * Freezes the specified column (adds it to fixed columns).\n   *\n   * `freezeColumn()` doesn't re-render the table,\n   * so you need to call the `render()` method afterward.\n   *\n   * @param {number} column Visual column index.\n   */\n  freezeColumn(column) {\n    const settings = this.hot.getSettings();\n    // columns are already fixed (frozen)\n    const freezePerformed = settings.fixedColumnsStart < this.hot.countCols() && column > settings.fixedColumnsStart - 1;\n    if (!_classPrivateFieldGet(_afterFirstUse, this)) {\n      _classPrivateFieldSet(_afterFirstUse, this, true);\n    }\n    const beforeColumnFreezeHook = this.hot.runHooks('beforeColumnFreeze', column, freezePerformed);\n    if (beforeColumnFreezeHook === false) {\n      return;\n    }\n    if (freezePerformed) {\n      this.hot.columnIndexMapper.moveIndexes(column, settings.fixedColumnsStart);\n\n      // Since 12.0.0, the \"fixedColumnsLeft\" is replaced with the \"fixedColumnsStart\" option.\n      // However, keeping the old name still in effect. When both option names are used together,\n      // the error is thrown. To prevent that, the plugin needs to modify the original option key\n      // to bypass the validation.\n      settings._fixedColumnsStart += 1;\n    }\n    this.hot.runHooks('afterColumnFreeze', column, freezePerformed);\n  }\n\n  /**\n   * Unfreezes the given column (remove it from fixed columns and bring to it's previous position).\n   *\n   * @param {number} column Visual column index.\n   */\n  unfreezeColumn(column) {\n    const settings = this.hot.getSettings();\n    // columns are not fixed (not frozen)\n    const unfreezePerformed = settings.fixedColumnsStart > 0 && column <= settings.fixedColumnsStart - 1;\n    if (!_classPrivateFieldGet(_afterFirstUse, this)) {\n      _classPrivateFieldSet(_afterFirstUse, this, true);\n    }\n    const beforeColumnUnfreezeHook = this.hot.runHooks('beforeColumnUnfreeze', column, unfreezePerformed);\n    if (beforeColumnUnfreezeHook === false) {\n      return;\n    }\n    if (unfreezePerformed) {\n      // Since 12.0.0, the \"fixedColumnsLeft\" is replaced with the \"fixedColumnsStart\" option.\n      // However, keeping the old name still in effect. When both option names are used together,\n      // the error is thrown. To prevent that, the plugin needs to modify the original option key\n      // to bypass the validation.\n      settings._fixedColumnsStart -= 1;\n      this.hot.columnIndexMapper.moveIndexes(column, settings.fixedColumnsStart);\n    }\n    this.hot.runHooks('afterColumnUnfreeze', column, unfreezePerformed);\n  }\n}\nfunction _addContextMenuEntry(options) {\n  options.items.push({\n    name: '---------'\n  }, freezeColumnItem(this), unfreezeColumnItem(this));\n}\n/**\n * Prevents moving the columns from/to fixed area.\n *\n * @private\n * @param {Array} columns Array of visual column indexes to be moved.\n * @param {number} finalIndex Visual column index, being a start index for the moved columns. Points to where the elements will be placed after the moving action.\n * @returns {boolean|undefined}\n */\nfunction _onBeforeColumnMove(columns, finalIndex) {\n  if (_classPrivateFieldGet(_afterFirstUse, this)) {\n    const freezeLine = this.hot.getSettings().fixedColumnsStart;\n\n    // Moving any column before the \"freeze line\" isn't possible.\n    if (finalIndex < freezeLine) {\n      return false;\n    }\n\n    // Moving frozen column isn't possible.\n    if (columns.some(column => column < freezeLine)) {\n      return false;\n    }\n  }\n}","map":{"version":3,"names":["_classPrivateMethodInitSpec","e","a","_checkPrivateRedeclaration","add","_classPrivateFieldInitSpec","t","set","has","TypeError","_classPrivateFieldGet","s","get","_assertClassBrand","_classPrivateFieldSet","r","n","arguments","length","BasePlugin","Hooks","freezeColumnItem","unfreezeColumnItem","getSingleton","register","PLUGIN_KEY","PLUGIN_PRIORITY","_afterFirstUse","WeakMap","_ManualColumnFreeze_brand","WeakSet","ManualColumnFreeze","constructor","isEnabled","hot","getSettings","enablePlugin","enabled","addHook","options","_addContextMenuEntry","call","columns","finalIndex","_onBeforeColumnMove","disablePlugin","updatePlugin","freezeColumn","column","settings","freezePerformed","fixedColumnsStart","countCols","beforeColumnFreezeHook","runHooks","columnIndexMapper","moveIndexes","_fixedColumnsStart","unfreezeColumn","unfreezePerformed","beforeColumnUnfreezeHook","items","push","name","freezeLine","some"],"sources":["D:/gym-project/frontend/node_modules/handsontable/plugins/manualColumnFreeze/manualColumnFreeze.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nfunction _classPrivateMethodInitSpec(e, a) { _checkPrivateRedeclaration(e, a), a.add(e); }\nfunction _classPrivateFieldInitSpec(e, t, a) { _checkPrivateRedeclaration(e, t), t.set(e, a); }\nfunction _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); }\nfunction _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }\nfunction _classPrivateFieldSet(s, a, r) { return s.set(_assertClassBrand(s, a), r), r; }\nfunction _assertClassBrand(e, t, n) { if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError(\"Private element is not present on this object\"); }\nimport { BasePlugin } from \"../base/index.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nimport freezeColumnItem from \"./contextMenuItem/freezeColumn.mjs\";\nimport unfreezeColumnItem from \"./contextMenuItem/unfreezeColumn.mjs\";\nHooks.getSingleton().register('beforeColumnFreeze');\nHooks.getSingleton().register('afterColumnFreeze');\nHooks.getSingleton().register('beforeColumnUnfreeze');\nHooks.getSingleton().register('afterColumnUnfreeze');\nexport const PLUGIN_KEY = 'manualColumnFreeze';\nexport const PLUGIN_PRIORITY = 110;\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @plugin ManualColumnFreeze\n * @class ManualColumnFreeze\n *\n * @description\n * This plugin allows to manually \"freeze\" and \"unfreeze\" a column using an entry in the Context Menu or using API.\n * You can turn it on by setting a {@link Options#manualColumnFreeze} property to `true`.\n *\n * @example\n * ```js\n * // Enables the plugin\n * manualColumnFreeze: true,\n * ```\n */\nvar _afterFirstUse = /*#__PURE__*/new WeakMap();\nvar _ManualColumnFreeze_brand = /*#__PURE__*/new WeakSet();\nexport class ManualColumnFreeze extends BasePlugin {\n  constructor() {\n    super(...arguments);\n    /**\n     * Adds the manualColumnFreeze context menu entries.\n     *\n     * @private\n     * @param {object} options Context menu options.\n     */\n    _classPrivateMethodInitSpec(this, _ManualColumnFreeze_brand);\n    /**\n     * Determines when the moving operation is allowed.\n     *\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _afterFirstUse, false);\n  }\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link ManualColumnFreeze#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return !!this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    if (this.enabled) {\n      return;\n    }\n    this.addHook('afterContextMenuDefaultOptions', options => _assertClassBrand(_ManualColumnFreeze_brand, this, _addContextMenuEntry).call(this, options));\n    this.addHook('beforeColumnMove', (columns, finalIndex) => _assertClassBrand(_ManualColumnFreeze_brand, this, _onBeforeColumnMove).call(this, columns, finalIndex));\n    super.enablePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    _classPrivateFieldSet(_afterFirstUse, this, false);\n    super.disablePlugin();\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:\n   *  - [`manualColumnFreeze`](@/api/options.md#manualcolumnfreeze)\n   */\n  updatePlugin() {\n    this.disablePlugin();\n    this.enablePlugin();\n    super.updatePlugin();\n  }\n\n  /**\n   * Freezes the specified column (adds it to fixed columns).\n   *\n   * `freezeColumn()` doesn't re-render the table,\n   * so you need to call the `render()` method afterward.\n   *\n   * @param {number} column Visual column index.\n   */\n  freezeColumn(column) {\n    const settings = this.hot.getSettings();\n    // columns are already fixed (frozen)\n    const freezePerformed = settings.fixedColumnsStart < this.hot.countCols() && column > settings.fixedColumnsStart - 1;\n    if (!_classPrivateFieldGet(_afterFirstUse, this)) {\n      _classPrivateFieldSet(_afterFirstUse, this, true);\n    }\n    const beforeColumnFreezeHook = this.hot.runHooks('beforeColumnFreeze', column, freezePerformed);\n    if (beforeColumnFreezeHook === false) {\n      return;\n    }\n    if (freezePerformed) {\n      this.hot.columnIndexMapper.moveIndexes(column, settings.fixedColumnsStart);\n\n      // Since 12.0.0, the \"fixedColumnsLeft\" is replaced with the \"fixedColumnsStart\" option.\n      // However, keeping the old name still in effect. When both option names are used together,\n      // the error is thrown. To prevent that, the plugin needs to modify the original option key\n      // to bypass the validation.\n      settings._fixedColumnsStart += 1;\n    }\n    this.hot.runHooks('afterColumnFreeze', column, freezePerformed);\n  }\n\n  /**\n   * Unfreezes the given column (remove it from fixed columns and bring to it's previous position).\n   *\n   * @param {number} column Visual column index.\n   */\n  unfreezeColumn(column) {\n    const settings = this.hot.getSettings();\n    // columns are not fixed (not frozen)\n    const unfreezePerformed = settings.fixedColumnsStart > 0 && column <= settings.fixedColumnsStart - 1;\n    if (!_classPrivateFieldGet(_afterFirstUse, this)) {\n      _classPrivateFieldSet(_afterFirstUse, this, true);\n    }\n    const beforeColumnUnfreezeHook = this.hot.runHooks('beforeColumnUnfreeze', column, unfreezePerformed);\n    if (beforeColumnUnfreezeHook === false) {\n      return;\n    }\n    if (unfreezePerformed) {\n      // Since 12.0.0, the \"fixedColumnsLeft\" is replaced with the \"fixedColumnsStart\" option.\n      // However, keeping the old name still in effect. When both option names are used together,\n      // the error is thrown. To prevent that, the plugin needs to modify the original option key\n      // to bypass the validation.\n      settings._fixedColumnsStart -= 1;\n      this.hot.columnIndexMapper.moveIndexes(column, settings.fixedColumnsStart);\n    }\n    this.hot.runHooks('afterColumnUnfreeze', column, unfreezePerformed);\n  }\n}\nfunction _addContextMenuEntry(options) {\n  options.items.push({\n    name: '---------'\n  }, freezeColumnItem(this), unfreezeColumnItem(this));\n}\n/**\n * Prevents moving the columns from/to fixed area.\n *\n * @private\n * @param {Array} columns Array of visual column indexes to be moved.\n * @param {number} finalIndex Visual column index, being a start index for the moved columns. Points to where the elements will be placed after the moving action.\n * @returns {boolean|undefined}\n */\nfunction _onBeforeColumnMove(columns, finalIndex) {\n  if (_classPrivateFieldGet(_afterFirstUse, this)) {\n    const freezeLine = this.hot.getSettings().fixedColumnsStart;\n\n    // Moving any column before the \"freeze line\" isn't possible.\n    if (finalIndex < freezeLine) {\n      return false;\n    }\n\n    // Moving frozen column isn't possible.\n    if (columns.some(column => column < freezeLine)) {\n      return false;\n    }\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}