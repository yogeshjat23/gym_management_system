{"ast":null,"code":"function _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\n/**\n * @typedef {object} ColumnsCalculationType\n * @property {number | null} startColumn The column index of the first column in the viewport.\n * @property {number | null} endColumn The column index of the last column in the viewport.\n * @property {number} count Total number of columns.\n * @property {number | null} startPosition Position of the first fully column (in px).\n * @property {boolean} isVisibleInTrimmingContainer Determines if the viewport is visible in the trimming container.\n */\n/**\n * @typedef {object} RowsCalculationType\n * @property {number | null} startRow The row index of the first row in the viewport.\n * @property {number | null} endRow The row index of the last row in the viewport.\n * @property {number} count Total number of rows.\n * @property {number | null} startPosition Position of the first fully row (in px).\n * @property {boolean} isVisibleInTrimmingContainer Determines if the viewport is visible in the trimming container.\n */\n/**\n * @class ViewportBaseCalculator\n */\nexport class ViewportBaseCalculator {\n  constructor(calculationTypes) {\n    /**\n     * The calculation types to be performed.\n     *\n     * @type {Array}\n     */\n    _defineProperty(this, \"calculationTypes\", []);\n    /**\n     * The calculation results.\n     *\n     * @type {Map<string, ColumnsCalculationType | RowsCalculationType>}\n     */\n    _defineProperty(this, \"calculationResults\", new Map());\n    this.calculationTypes = calculationTypes;\n  }\n\n  /**\n   * Initializes all calculators (triggers all calculators before calculating the rows/columns sizes).\n   *\n   * @param {*} context The context object (rows or columns viewport calculator).\n   */\n  _initialize(context) {\n    this.calculationTypes.forEach(_ref => {\n      let [id, calculator] = _ref;\n      this.calculationResults.set(id, calculator);\n      calculator.initialize(context);\n    });\n  }\n\n  /**\n   * Processes the row/column at the given index.\n   *\n   * @param {number} index The index of the row/column.\n   * @param {*} context The context object (rows or columns viewport calculator).\n   */\n  _process(index, context) {\n    this.calculationTypes.forEach(_ref2 => {\n      let [, calculator] = _ref2;\n      return calculator.process(index, context);\n    });\n  }\n\n  /**\n   * Finalizes all calculators (triggers all calculators after calculating the rows/columns sizes).\n   *\n   * @param {*} context The context object (rows or columns viewport calculator).\n   */\n  _finalize(context) {\n    this.calculationTypes.forEach(_ref3 => {\n      let [, calculator] = _ref3;\n      return calculator.finalize(context);\n    });\n  }\n\n  /**\n   * Gets the results for the given calculator.\n   *\n   * @param {string} calculatorId The id of the calculator.\n   * @returns {ColumnsCalculationType | RowsCalculationType}\n   */\n  getResultsFor(calculatorId) {\n    return this.calculationResults.get(calculatorId);\n  }\n}","map":{"version":3,"names":["_defineProperty","e","r","t","_toPropertyKey","Object","defineProperty","value","enumerable","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","ViewportBaseCalculator","constructor","calculationTypes","Map","_initialize","context","forEach","_ref","id","calculator","calculationResults","set","initialize","_process","index","_ref2","process","_finalize","_ref3","finalize","getResultsFor","calculatorId","get"],"sources":["D:/gym-project/frontend/node_modules/handsontable/3rdparty/walkontable/src/calculator/viewportBase.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * @typedef {object} ColumnsCalculationType\n * @property {number | null} startColumn The column index of the first column in the viewport.\n * @property {number | null} endColumn The column index of the last column in the viewport.\n * @property {number} count Total number of columns.\n * @property {number | null} startPosition Position of the first fully column (in px).\n * @property {boolean} isVisibleInTrimmingContainer Determines if the viewport is visible in the trimming container.\n */\n/**\n * @typedef {object} RowsCalculationType\n * @property {number | null} startRow The row index of the first row in the viewport.\n * @property {number | null} endRow The row index of the last row in the viewport.\n * @property {number} count Total number of rows.\n * @property {number | null} startPosition Position of the first fully row (in px).\n * @property {boolean} isVisibleInTrimmingContainer Determines if the viewport is visible in the trimming container.\n */\n/**\n * @class ViewportBaseCalculator\n */\nexport class ViewportBaseCalculator {\n  constructor(calculationTypes) {\n    /**\n     * The calculation types to be performed.\n     *\n     * @type {Array}\n     */\n    _defineProperty(this, \"calculationTypes\", []);\n    /**\n     * The calculation results.\n     *\n     * @type {Map<string, ColumnsCalculationType | RowsCalculationType>}\n     */\n    _defineProperty(this, \"calculationResults\", new Map());\n    this.calculationTypes = calculationTypes;\n  }\n\n  /**\n   * Initializes all calculators (triggers all calculators before calculating the rows/columns sizes).\n   *\n   * @param {*} context The context object (rows or columns viewport calculator).\n   */\n  _initialize(context) {\n    this.calculationTypes.forEach(_ref => {\n      let [id, calculator] = _ref;\n      this.calculationResults.set(id, calculator);\n      calculator.initialize(context);\n    });\n  }\n\n  /**\n   * Processes the row/column at the given index.\n   *\n   * @param {number} index The index of the row/column.\n   * @param {*} context The context object (rows or columns viewport calculator).\n   */\n  _process(index, context) {\n    this.calculationTypes.forEach(_ref2 => {\n      let [, calculator] = _ref2;\n      return calculator.process(index, context);\n    });\n  }\n\n  /**\n   * Finalizes all calculators (triggers all calculators after calculating the rows/columns sizes).\n   *\n   * @param {*} context The context object (rows or columns viewport calculator).\n   */\n  _finalize(context) {\n    this.calculationTypes.forEach(_ref3 => {\n      let [, calculator] = _ref3;\n      return calculator.finalize(context);\n    });\n  }\n\n  /**\n   * Gets the results for the given calculator.\n   *\n   * @param {string} calculatorId The id of the calculator.\n   * @returns {ColumnsCalculationType | RowsCalculationType}\n   */\n  getResultsFor(calculatorId) {\n    return this.calculationResults.get(calculatorId);\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}