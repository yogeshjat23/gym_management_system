{"ast":null,"code":"function _classPrivateMethodInitSpec(e, a) {\n  _checkPrivateRedeclaration(e, a), a.add(e);\n}\nfunction _classPrivateFieldInitSpec(e, t, a) {\n  _checkPrivateRedeclaration(e, t), t.set(e, a);\n}\nfunction _checkPrivateRedeclaration(e, t) {\n  if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n}\nfunction _classPrivateFieldSet(s, a, r) {\n  return s.set(_assertClassBrand(s, a), r), r;\n}\nfunction _classPrivateFieldGet(s, a) {\n  return s.get(_assertClassBrand(s, a));\n}\nfunction _assertClassBrand(e, t, n) {\n  if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n;\n  throw new TypeError(\"Private element is not present on this object\");\n}\nimport { BasePlugin } from \"../base/index.mjs\";\nimport { addClass, closest, hasClass, removeClass, outerHeight, isDetached } from \"../../helpers/dom/element.mjs\";\nimport { arrayEach } from \"../../helpers/array.mjs\";\nimport { rangeEach } from \"../../helpers/number.mjs\";\nimport { PhysicalIndexToValueMap as IndexToValueMap } from \"../../translations/index.mjs\"; // Developer note! Whenever you make a change in this file, make an analogous change in manualRowResize.js\nexport const PLUGIN_KEY = 'manualColumnResize';\nexport const PLUGIN_PRIORITY = 130;\nconst PERSISTENT_STATE_KEY = 'manualColumnWidths';\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @plugin ManualColumnResize\n * @class ManualColumnResize\n *\n * @description\n * This plugin allows to change columns width. To make columns width persistent the {@link Options#persistentState}\n * plugin should be enabled.\n *\n * The plugin creates additional components to make resizing possibly using user interface:\n * - handle - the draggable element that sets the desired width of the column.\n * - guide - the helper guide that shows the desired width as a vertical guide.\n */\nvar _currentTH = /*#__PURE__*/new WeakMap();\nvar _currentCol = /*#__PURE__*/new WeakMap();\nvar _selectedCols = /*#__PURE__*/new WeakMap();\nvar _currentWidth = /*#__PURE__*/new WeakMap();\nvar _newSize = /*#__PURE__*/new WeakMap();\nvar _startY = /*#__PURE__*/new WeakMap();\nvar _startWidth = /*#__PURE__*/new WeakMap();\nvar _startOffset = /*#__PURE__*/new WeakMap();\nvar _handle = /*#__PURE__*/new WeakMap();\nvar _guide = /*#__PURE__*/new WeakMap();\nvar _pressed = /*#__PURE__*/new WeakMap();\nvar _isTriggeredByRMB = /*#__PURE__*/new WeakMap();\nvar _dblclick = /*#__PURE__*/new WeakMap();\nvar _autoresizeTimeout = /*#__PURE__*/new WeakMap();\nvar _columnWidthsMap = /*#__PURE__*/new WeakMap();\nvar _config = /*#__PURE__*/new WeakMap();\nvar _ManualColumnResize_brand = /*#__PURE__*/new WeakSet();\nexport class ManualColumnResize extends BasePlugin {\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n\n  /**\n   * @type {HTMLTableHeaderCellElement}\n   */\n\n  constructor(hotInstance) {\n    super(hotInstance);\n    /**\n     * Callback to call on map's `init` local hook.\n     *\n     * @private\n     */\n    _classPrivateMethodInitSpec(this, _ManualColumnResize_brand);\n    _classPrivateFieldInitSpec(this, _currentTH, null);\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _currentCol, null);\n    /**\n     * @type {number[]}\n     */\n    _classPrivateFieldInitSpec(this, _selectedCols, []);\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _currentWidth, null);\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _newSize, null);\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _startY, null);\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _startWidth, null);\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _startOffset, null);\n    /**\n     * @type {HTMLElement}\n     */\n    _classPrivateFieldInitSpec(this, _handle, this.hot.rootDocument.createElement('DIV'));\n    /**\n     * @type {HTMLElement}\n     */\n    _classPrivateFieldInitSpec(this, _guide, this.hot.rootDocument.createElement('DIV'));\n    /**\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _pressed, null);\n    /**\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _isTriggeredByRMB, false);\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _dblclick, 0);\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _autoresizeTimeout, null);\n    /**\n     * PhysicalIndexToValueMap to keep and track widths for physical column indexes.\n     *\n     * @type {PhysicalIndexToValueMap}\n     */\n    _classPrivateFieldInitSpec(this, _columnWidthsMap, void 0);\n    /**\n     * Private pool to save configuration from updateSettings.\n     *\n     * @type {object}\n     */\n    _classPrivateFieldInitSpec(this, _config, void 0);\n    addClass(_classPrivateFieldGet(_handle, this), 'manualColumnResizer');\n    addClass(_classPrivateFieldGet(_guide, this), 'manualColumnResizerGuide');\n  }\n\n  /**\n   * @private\n   * @returns {string}\n   */\n  get inlineDir() {\n    return this.hot.isRtl() ? 'right' : 'left';\n  }\n\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link ManualColumnResize#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    if (this.enabled) {\n      return;\n    }\n    _classPrivateFieldSet(_columnWidthsMap, this, new IndexToValueMap());\n    _classPrivateFieldGet(_columnWidthsMap, this).addLocalHook('init', () => _assertClassBrand(_ManualColumnResize_brand, this, _onMapInit).call(this));\n    this.hot.columnIndexMapper.registerMap(this.pluginName, _classPrivateFieldGet(_columnWidthsMap, this));\n    this.addHook('modifyColWidth', (width, col) => _assertClassBrand(_ManualColumnResize_brand, this, _onModifyColWidth).call(this, width, col), 1);\n    this.addHook('beforeStretchingColumnWidth', (stretchedWidth, column) => _assertClassBrand(_ManualColumnResize_brand, this, _onBeforeStretchingColumnWidth).call(this, stretchedWidth, column));\n    this.addHook('beforeColumnResize', (newSize, column, isDoubleClick) => _assertClassBrand(_ManualColumnResize_brand, this, _onBeforeColumnResize).call(this, newSize, column, isDoubleClick));\n    this.bindEvents();\n    super.enablePlugin();\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:\n   *  - [`manualColumnResize`](@/api/options.md#manualcolumnresize)\n   */\n  updatePlugin() {\n    this.disablePlugin();\n    this.enablePlugin();\n    super.updatePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    _classPrivateFieldSet(_config, this, _classPrivateFieldGet(_columnWidthsMap, this).getValues());\n    this.hot.columnIndexMapper.unregisterMap(this.pluginName);\n    super.disablePlugin();\n  }\n\n  /**\n   * Saves the current sizes using the persistentState plugin (the {@link Options#persistentState} option has to be enabled).\n   *\n   * @fires Hooks#persistentStateSave\n   */\n  saveManualColumnWidths() {\n    this.hot.runHooks('persistentStateSave', PERSISTENT_STATE_KEY, _classPrivateFieldGet(_columnWidthsMap, this).getValues());\n  }\n\n  /**\n   * Loads the previously saved sizes using the persistentState plugin (the {@link Options#persistentState} option has to be enabled).\n   *\n   * @returns {Array}\n   * @fires Hooks#persistentStateLoad\n   */\n  loadManualColumnWidths() {\n    const storedState = {};\n    this.hot.runHooks('persistentStateLoad', PERSISTENT_STATE_KEY, storedState);\n    return storedState.value;\n  }\n\n  /**\n   * Sets the new width for specified column index.\n   *\n   * @param {number} column Visual column index.\n   * @param {number} width Column width (no less than 20px).\n   * @returns {number} Returns new width.\n   */\n  setManualSize(column, width) {\n    const newWidth = Math.max(width, 20);\n    const physicalColumn = this.hot.toPhysicalColumn(column);\n    _classPrivateFieldGet(_columnWidthsMap, this).setValueAtIndex(physicalColumn, newWidth);\n    return newWidth;\n  }\n\n  /**\n   * Clears the cache for the specified column index.\n   *\n   * @param {number} column Visual column index.\n   */\n  clearManualSize(column) {\n    const physicalColumn = this.hot.toPhysicalColumn(column);\n    _classPrivateFieldGet(_columnWidthsMap, this).setValueAtIndex(physicalColumn, null);\n  }\n  /**\n   * Set the resize handle position.\n   *\n   * @private\n   * @param {HTMLCellElement} TH TH HTML element.\n   */\n  setupHandlePosition(TH) {\n    if (!TH.parentNode) {\n      return;\n    }\n    _classPrivateFieldSet(_currentTH, this, TH);\n    const {\n      _wt: wt\n    } = this.hot.view;\n    const cellCoords = wt.wtTable.getCoords(_classPrivateFieldGet(_currentTH, this));\n    const col = cellCoords.col;\n\n    // Ignore column headers.\n    if (col < 0) {\n      return;\n    }\n    const headerHeight = outerHeight(_classPrivateFieldGet(_currentTH, this));\n    const box = _classPrivateFieldGet(_currentTH, this).getBoundingClientRect();\n    // Read \"fixedColumnsStart\" through the Walkontable as in that context, the fixed columns\n    // are modified (reduced by the number of hidden columns) by TableView module.\n    const fixedColumn = col < wt.getSetting('fixedColumnsStart');\n    let relativeHeaderPosition;\n    if (fixedColumn) {\n      relativeHeaderPosition = wt.wtOverlays.topInlineStartCornerOverlay.getRelativeCellPosition(_classPrivateFieldGet(_currentTH, this), cellCoords.row, cellCoords.col);\n    }\n\n    // If the TH is not a child of the top-left overlay, recalculate using\n    // the top overlay - as this overlay contains the rest of the headers.\n    if (!relativeHeaderPosition) {\n      relativeHeaderPosition = wt.wtOverlays.topOverlay.getRelativeCellPosition(_classPrivateFieldGet(_currentTH, this), cellCoords.row, cellCoords.col);\n    }\n    _classPrivateFieldSet(_currentCol, this, this.hot.columnIndexMapper.getVisualFromRenderableIndex(col));\n    _classPrivateFieldSet(_selectedCols, this, []);\n    const isFullColumnSelected = this.hot.selection.isSelectedByCorner() || this.hot.selection.isSelectedByColumnHeader();\n    if (this.hot.selection.isSelected() && isFullColumnSelected) {\n      const selectionRanges = this.hot.getSelectedRange();\n      arrayEach(selectionRanges, selectionRange => {\n        const fromColumn = selectionRange.getTopStartCorner().col;\n        const toColumn = selectionRange.getBottomEndCorner().col;\n\n        // Add every selected column for resize action.\n        rangeEach(fromColumn, toColumn, columnIndex => {\n          if (!_classPrivateFieldGet(_selectedCols, this).includes(columnIndex)) {\n            _classPrivateFieldGet(_selectedCols, this).push(columnIndex);\n          }\n        });\n      });\n    }\n\n    // Resizing element beyond the current selection (also when there is no selection).\n    if (!_classPrivateFieldGet(_selectedCols, this).includes(_classPrivateFieldGet(_currentCol, this))) {\n      _classPrivateFieldSet(_selectedCols, this, [_classPrivateFieldGet(_currentCol, this)]);\n    }\n    _classPrivateFieldSet(_startOffset, this, relativeHeaderPosition.start - 6);\n    _classPrivateFieldSet(_startWidth, this, parseInt(box.width, 10));\n    _classPrivateFieldGet(_handle, this).style.top = `${relativeHeaderPosition.top}px`;\n    _classPrivateFieldGet(_handle, this).style[this.inlineDir] = `${_classPrivateFieldGet(_startOffset, this) + _classPrivateFieldGet(_startWidth, this)}px`;\n    _classPrivateFieldGet(_handle, this).style.height = `${headerHeight}px`;\n    this.hot.rootElement.appendChild(_classPrivateFieldGet(_handle, this));\n  }\n\n  /**\n   * Refresh the resize handle position.\n   *\n   * @private\n   */\n  refreshHandlePosition() {\n    _classPrivateFieldGet(_handle, this).style[this.inlineDir] = `${_classPrivateFieldGet(_startOffset, this) + _classPrivateFieldGet(_currentWidth, this)}px`;\n  }\n\n  /**\n   * Sets the resize guide position.\n   *\n   * @private\n   */\n  setupGuidePosition() {\n    const handleHeight = parseInt(outerHeight(_classPrivateFieldGet(_handle, this)), 10);\n    const handleBottomPosition = parseInt(_classPrivateFieldGet(_handle, this).style.top, 10) + handleHeight;\n    const maximumVisibleElementHeight = parseInt(this.hot.view.maximumVisibleElementHeight(0), 10);\n    addClass(_classPrivateFieldGet(_handle, this), 'active');\n    addClass(_classPrivateFieldGet(_guide, this), 'active');\n    _classPrivateFieldGet(_guide, this).style.top = `${handleBottomPosition}px`;\n    this.refreshGuidePosition();\n    _classPrivateFieldGet(_guide, this).style.height = `${maximumVisibleElementHeight - handleHeight}px`;\n    this.hot.rootElement.appendChild(_classPrivateFieldGet(_guide, this));\n  }\n\n  /**\n   * Refresh the resize guide position.\n   *\n   * @private\n   */\n  refreshGuidePosition() {\n    _classPrivateFieldGet(_guide, this).style[this.inlineDir] = _classPrivateFieldGet(_handle, this).style[this.inlineDir];\n  }\n\n  /**\n   * Hides both the resize handle and resize guide.\n   *\n   * @private\n   */\n  hideHandleAndGuide() {\n    removeClass(_classPrivateFieldGet(_handle, this), 'active');\n    removeClass(_classPrivateFieldGet(_guide, this), 'active');\n  }\n\n  /**\n   * Checks if provided element is considered a column header.\n   *\n   * @private\n   * @param {HTMLElement} element HTML element.\n   * @returns {boolean}\n   */\n  checkIfColumnHeader(element) {\n    const thead = closest(element, ['THEAD'], this.hot.rootElement);\n    const {\n      topOverlay,\n      topInlineStartCornerOverlay\n    } = this.hot.view._wt.wtOverlays;\n    return [topOverlay.clone.wtTable.THEAD, topInlineStartCornerOverlay.clone.wtTable.THEAD].includes(thead);\n  }\n\n  /**\n   * Gets the TH element from the provided element.\n   *\n   * @private\n   * @param {HTMLElement} element HTML element.\n   * @returns {HTMLElement}\n   */\n  getClosestTHParent(element) {\n    if (element.tagName !== 'TABLE') {\n      if (element.tagName === 'TH') {\n        return element;\n      }\n      return this.getClosestTHParent(element.parentNode);\n    }\n    return null;\n  }\n\n  /**\n   * 'mouseover' event callback - set the handle position.\n   *\n   * @param {MouseEvent} event The mouse event.\n   */\n\n  /**\n   * Auto-size row after doubleclick - callback.\n   *\n   * @private\n   * @fires Hooks#beforeColumnResize\n   * @fires Hooks#afterColumnResize\n   */\n  afterMouseDownTimeout() {\n    const render = () => {\n      this.hot.forceFullRender = true;\n      this.hot.view.render(); // updates all\n      this.hot.view.adjustElementsSize();\n    };\n    const resize = (column, forceRender) => {\n      const hookNewSize = this.hot.runHooks('beforeColumnResize', _classPrivateFieldGet(_newSize, this), column, true);\n      if (hookNewSize !== undefined) {\n        _classPrivateFieldSet(_newSize, this, hookNewSize);\n      }\n      if (this.hot.getSettings().stretchH === 'all') {\n        this.clearManualSize(column);\n      } else {\n        this.setManualSize(column, _classPrivateFieldGet(_newSize, this)); // double click sets by auto row size plugin\n      }\n      this.saveManualColumnWidths();\n      this.hot.runHooks('afterColumnResize', _classPrivateFieldGet(_newSize, this), column, true);\n      if (forceRender) {\n        render();\n      }\n    };\n    if (_classPrivateFieldGet(_dblclick, this) >= 2) {\n      const selectedColsLength = _classPrivateFieldGet(_selectedCols, this).length;\n      if (selectedColsLength > 1) {\n        arrayEach(_classPrivateFieldGet(_selectedCols, this), selectedCol => {\n          resize(selectedCol);\n        });\n        render();\n      } else {\n        arrayEach(_classPrivateFieldGet(_selectedCols, this), selectedCol => {\n          resize(selectedCol, true);\n        });\n      }\n    }\n    _classPrivateFieldSet(_dblclick, this, 0);\n    _classPrivateFieldSet(_autoresizeTimeout, this, null);\n  }\n\n  /**\n   * 'mousedown' event callback.\n   *\n   * @param {MouseEvent} event The mouse event.\n   */\n\n  /**\n   * Binds the mouse events.\n   *\n   * @private\n   */\n  bindEvents() {\n    const {\n      rootWindow,\n      rootElement\n    } = this.hot;\n    this.eventManager.addEventListener(rootElement, 'mouseover', e => _assertClassBrand(_ManualColumnResize_brand, this, _onMouseOver).call(this, e));\n    this.eventManager.addEventListener(rootElement, 'mousedown', e => _assertClassBrand(_ManualColumnResize_brand, this, _onMouseDown).call(this, e));\n    this.eventManager.addEventListener(rootWindow, 'mousemove', e => _assertClassBrand(_ManualColumnResize_brand, this, _onMouseMove).call(this, e));\n    this.eventManager.addEventListener(rootWindow, 'mouseup', () => _assertClassBrand(_ManualColumnResize_brand, this, _onMouseUp).call(this));\n    this.eventManager.addEventListener(_classPrivateFieldGet(_handle, this), 'contextmenu', () => _assertClassBrand(_ManualColumnResize_brand, this, _onContextMenu).call(this));\n  }\n\n  /**\n   * Modifies the provided column width, based on the plugin settings.\n   *\n   * @param {number} width Column width.\n   * @param {number} column Visual column index.\n   * @returns {number}\n   */\n\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    super.destroy();\n  }\n}\nfunction _onMapInit() {\n  const initialSetting = this.hot.getSettings()[PLUGIN_KEY];\n  const loadedManualColumnWidths = this.loadManualColumnWidths();\n  if (typeof loadedManualColumnWidths !== 'undefined') {\n    this.hot.batchExecution(() => {\n      loadedManualColumnWidths.forEach((width, physicalIndex) => {\n        _classPrivateFieldGet(_columnWidthsMap, this).setValueAtIndex(physicalIndex, width);\n      });\n    }, true);\n  } else if (Array.isArray(initialSetting)) {\n    this.hot.batchExecution(() => {\n      initialSetting.forEach((width, physicalIndex) => {\n        _classPrivateFieldGet(_columnWidthsMap, this).setValueAtIndex(physicalIndex, width);\n      });\n    }, true);\n    _classPrivateFieldSet(_config, this, initialSetting);\n  } else if (initialSetting === true && Array.isArray(_classPrivateFieldGet(_config, this))) {\n    this.hot.batchExecution(() => {\n      _classPrivateFieldGet(_config, this).forEach((width, physicalIndex) => {\n        _classPrivateFieldGet(_columnWidthsMap, this).setValueAtIndex(physicalIndex, width);\n      });\n    }, true);\n  }\n}\nfunction _onMouseOver(event) {\n  // Workaround for #6926 - if the `event.target` is temporarily detached, we can skip this callback and wait for\n  // the next `onmouseover`.\n  if (isDetached(event.target)) {\n    return;\n  }\n\n  // A \"mouseover\" action is triggered right after executing \"contextmenu\" event. It should be ignored.\n  if (_classPrivateFieldGet(_isTriggeredByRMB, this) === true) {\n    return;\n  }\n  if (this.checkIfColumnHeader(event.target)) {\n    const th = this.getClosestTHParent(event.target);\n    if (!th) {\n      return;\n    }\n    const colspan = th.getAttribute('colspan');\n    if (th && (colspan === null || colspan === '1')) {\n      if (!_classPrivateFieldGet(_pressed, this)) {\n        this.setupHandlePosition(th);\n      }\n    }\n  }\n}\nfunction _onMouseDown(event) {\n  if (event.target.parentNode !== this.hot.rootElement) {\n    return;\n  }\n  if (hasClass(event.target, 'manualColumnResizer')) {\n    this.setupHandlePosition(_classPrivateFieldGet(_currentTH, this));\n    this.setupGuidePosition();\n    _classPrivateFieldSet(_pressed, this, true);\n    if (_classPrivateFieldGet(_autoresizeTimeout, this) === null) {\n      _classPrivateFieldSet(_autoresizeTimeout, this, setTimeout(() => this.afterMouseDownTimeout(), 500));\n      this.hot._registerTimeout(_classPrivateFieldGet(_autoresizeTimeout, this));\n    }\n    _classPrivateFieldSet(_dblclick, this, _classPrivateFieldGet(_dblclick, this) + 1);\n    this.startX = event.pageX;\n    _classPrivateFieldSet(_newSize, this, _classPrivateFieldGet(_startWidth, this));\n  }\n}\n/**\n * 'mousemove' event callback - refresh the handle and guide positions, cache the new column width.\n *\n * @param {MouseEvent} event The mouse event.\n */\nfunction _onMouseMove(event) {\n  if (_classPrivateFieldGet(_pressed, this)) {\n    const change = (event.pageX - this.startX) * this.hot.getDirectionFactor();\n    _classPrivateFieldSet(_currentWidth, this, _classPrivateFieldGet(_startWidth, this) + change);\n    arrayEach(_classPrivateFieldGet(_selectedCols, this), selectedCol => {\n      _classPrivateFieldSet(_newSize, this, this.setManualSize(selectedCol, _classPrivateFieldGet(_currentWidth, this)));\n    });\n    this.refreshHandlePosition();\n    this.refreshGuidePosition();\n  }\n}\n/**\n * 'mouseup' event callback - apply the column resizing.\n *\n * @fires Hooks#beforeColumnResize\n * @fires Hooks#afterColumnResize\n */\nfunction _onMouseUp() {\n  const render = () => {\n    this.hot.forceFullRender = true;\n    this.hot.view.render(); // updates all\n    this.hot.view.adjustElementsSize();\n  };\n  const resize = (column, forceRender) => {\n    this.hot.runHooks('beforeColumnResize', _classPrivateFieldGet(_newSize, this), column, false);\n    if (forceRender) {\n      render();\n    }\n    this.saveManualColumnWidths();\n    this.hot.runHooks('afterColumnResize', _classPrivateFieldGet(_newSize, this), column, false);\n  };\n  if (_classPrivateFieldGet(_pressed, this)) {\n    this.hideHandleAndGuide();\n    _classPrivateFieldSet(_pressed, this, false);\n    if (_classPrivateFieldGet(_newSize, this) !== _classPrivateFieldGet(_startWidth, this)) {\n      const selectedColsLength = _classPrivateFieldGet(_selectedCols, this).length;\n      if (selectedColsLength > 1) {\n        arrayEach(_classPrivateFieldGet(_selectedCols, this), selectedCol => {\n          resize(selectedCol);\n        });\n        render();\n      } else {\n        arrayEach(_classPrivateFieldGet(_selectedCols, this), selectedCol => {\n          resize(selectedCol, true);\n        });\n      }\n    }\n    this.setupHandlePosition(_classPrivateFieldGet(_currentTH, this));\n  }\n}\n/**\n * Callback for \"contextmenu\" event triggered on element showing move handle. It removes handle and guide elements.\n */\nfunction _onContextMenu() {\n  this.hideHandleAndGuide();\n  this.hot.rootElement.removeChild(_classPrivateFieldGet(_handle, this));\n  this.hot.rootElement.removeChild(_classPrivateFieldGet(_guide, this));\n  _classPrivateFieldSet(_pressed, this, false);\n  _classPrivateFieldSet(_isTriggeredByRMB, this, true);\n\n  // There is thrown \"mouseover\" event right after opening a context menu. This flag inform that handle\n  // shouldn't be drawn just after removing it.\n  this.hot._registerImmediate(() => {\n    _classPrivateFieldSet(_isTriggeredByRMB, this, false);\n  });\n}\nfunction _onModifyColWidth(width, column) {\n  let newWidth = width;\n  if (this.enabled) {\n    const physicalColumn = this.hot.toPhysicalColumn(column);\n    const columnWidth = _classPrivateFieldGet(_columnWidthsMap, this).getValueAtIndex(physicalColumn);\n    if (this.hot.getSettings()[PLUGIN_KEY] && columnWidth) {\n      newWidth = columnWidth;\n    }\n  }\n  return newWidth;\n}\n/**\n * Modifies the provided column stretched width. This hook decides if specified column should be stretched or not.\n *\n * @param {number} stretchedWidth Stretched width.\n * @param {number} column Visual column index.\n * @returns {number}\n */\nfunction _onBeforeStretchingColumnWidth(stretchedWidth, column) {\n  let width = _classPrivateFieldGet(_columnWidthsMap, this).getValueAtIndex(column);\n  if (width === null) {\n    width = stretchedWidth;\n  }\n  return width;\n}\n/**\n * `beforeColumnResize` hook callback.\n */\nfunction _onBeforeColumnResize() {\n  // clear the header height cache information\n  this.hot.view._wt.wtViewport.resetHasOversizedColumnHeadersMarked();\n}","map":{"version":3,"names":["_classPrivateMethodInitSpec","e","a","_checkPrivateRedeclaration","add","_classPrivateFieldInitSpec","t","set","has","TypeError","_classPrivateFieldSet","s","r","_assertClassBrand","_classPrivateFieldGet","get","n","arguments","length","BasePlugin","addClass","closest","hasClass","removeClass","outerHeight","isDetached","arrayEach","rangeEach","PhysicalIndexToValueMap","IndexToValueMap","PLUGIN_KEY","PLUGIN_PRIORITY","PERSISTENT_STATE_KEY","_currentTH","WeakMap","_currentCol","_selectedCols","_currentWidth","_newSize","_startY","_startWidth","_startOffset","_handle","_guide","_pressed","_isTriggeredByRMB","_dblclick","_autoresizeTimeout","_columnWidthsMap","_config","_ManualColumnResize_brand","WeakSet","ManualColumnResize","constructor","hotInstance","hot","rootDocument","createElement","inlineDir","isRtl","isEnabled","getSettings","enablePlugin","enabled","addLocalHook","_onMapInit","call","columnIndexMapper","registerMap","pluginName","addHook","width","col","_onModifyColWidth","stretchedWidth","column","_onBeforeStretchingColumnWidth","newSize","isDoubleClick","_onBeforeColumnResize","bindEvents","updatePlugin","disablePlugin","getValues","unregisterMap","saveManualColumnWidths","runHooks","loadManualColumnWidths","storedState","value","setManualSize","newWidth","Math","max","physicalColumn","toPhysicalColumn","setValueAtIndex","clearManualSize","setupHandlePosition","TH","parentNode","_wt","wt","view","cellCoords","wtTable","getCoords","headerHeight","box","getBoundingClientRect","fixedColumn","getSetting","relativeHeaderPosition","wtOverlays","topInlineStartCornerOverlay","getRelativeCellPosition","row","topOverlay","getVisualFromRenderableIndex","isFullColumnSelected","selection","isSelectedByCorner","isSelectedByColumnHeader","isSelected","selectionRanges","getSelectedRange","selectionRange","fromColumn","getTopStartCorner","toColumn","getBottomEndCorner","columnIndex","includes","push","start","parseInt","style","top","height","rootElement","appendChild","refreshHandlePosition","setupGuidePosition","handleHeight","handleBottomPosition","maximumVisibleElementHeight","refreshGuidePosition","hideHandleAndGuide","checkIfColumnHeader","element","thead","clone","THEAD","getClosestTHParent","tagName","afterMouseDownTimeout","render","forceFullRender","adjustElementsSize","resize","forceRender","hookNewSize","undefined","stretchH","selectedColsLength","selectedCol","rootWindow","eventManager","addEventListener","_onMouseOver","_onMouseDown","_onMouseMove","_onMouseUp","_onContextMenu","destroy","initialSetting","loadedManualColumnWidths","batchExecution","forEach","physicalIndex","Array","isArray","event","target","th","colspan","getAttribute","setTimeout","_registerTimeout","startX","pageX","change","getDirectionFactor","removeChild","_registerImmediate","columnWidth","getValueAtIndex","wtViewport","resetHasOversizedColumnHeadersMarked"],"sources":["D:/gym-project/frontend/node_modules/handsontable/plugins/manualColumnResize/manualColumnResize.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nfunction _classPrivateMethodInitSpec(e, a) { _checkPrivateRedeclaration(e, a), a.add(e); }\nfunction _classPrivateFieldInitSpec(e, t, a) { _checkPrivateRedeclaration(e, t), t.set(e, a); }\nfunction _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); }\nfunction _classPrivateFieldSet(s, a, r) { return s.set(_assertClassBrand(s, a), r), r; }\nfunction _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }\nfunction _assertClassBrand(e, t, n) { if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError(\"Private element is not present on this object\"); }\nimport { BasePlugin } from \"../base/index.mjs\";\nimport { addClass, closest, hasClass, removeClass, outerHeight, isDetached } from \"../../helpers/dom/element.mjs\";\nimport { arrayEach } from \"../../helpers/array.mjs\";\nimport { rangeEach } from \"../../helpers/number.mjs\";\nimport { PhysicalIndexToValueMap as IndexToValueMap } from \"../../translations/index.mjs\"; // Developer note! Whenever you make a change in this file, make an analogous change in manualRowResize.js\nexport const PLUGIN_KEY = 'manualColumnResize';\nexport const PLUGIN_PRIORITY = 130;\nconst PERSISTENT_STATE_KEY = 'manualColumnWidths';\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @plugin ManualColumnResize\n * @class ManualColumnResize\n *\n * @description\n * This plugin allows to change columns width. To make columns width persistent the {@link Options#persistentState}\n * plugin should be enabled.\n *\n * The plugin creates additional components to make resizing possibly using user interface:\n * - handle - the draggable element that sets the desired width of the column.\n * - guide - the helper guide that shows the desired width as a vertical guide.\n */\nvar _currentTH = /*#__PURE__*/new WeakMap();\nvar _currentCol = /*#__PURE__*/new WeakMap();\nvar _selectedCols = /*#__PURE__*/new WeakMap();\nvar _currentWidth = /*#__PURE__*/new WeakMap();\nvar _newSize = /*#__PURE__*/new WeakMap();\nvar _startY = /*#__PURE__*/new WeakMap();\nvar _startWidth = /*#__PURE__*/new WeakMap();\nvar _startOffset = /*#__PURE__*/new WeakMap();\nvar _handle = /*#__PURE__*/new WeakMap();\nvar _guide = /*#__PURE__*/new WeakMap();\nvar _pressed = /*#__PURE__*/new WeakMap();\nvar _isTriggeredByRMB = /*#__PURE__*/new WeakMap();\nvar _dblclick = /*#__PURE__*/new WeakMap();\nvar _autoresizeTimeout = /*#__PURE__*/new WeakMap();\nvar _columnWidthsMap = /*#__PURE__*/new WeakMap();\nvar _config = /*#__PURE__*/new WeakMap();\nvar _ManualColumnResize_brand = /*#__PURE__*/new WeakSet();\nexport class ManualColumnResize extends BasePlugin {\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n\n  /**\n   * @type {HTMLTableHeaderCellElement}\n   */\n\n  constructor(hotInstance) {\n    super(hotInstance);\n    /**\n     * Callback to call on map's `init` local hook.\n     *\n     * @private\n     */\n    _classPrivateMethodInitSpec(this, _ManualColumnResize_brand);\n    _classPrivateFieldInitSpec(this, _currentTH, null);\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _currentCol, null);\n    /**\n     * @type {number[]}\n     */\n    _classPrivateFieldInitSpec(this, _selectedCols, []);\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _currentWidth, null);\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _newSize, null);\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _startY, null);\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _startWidth, null);\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _startOffset, null);\n    /**\n     * @type {HTMLElement}\n     */\n    _classPrivateFieldInitSpec(this, _handle, this.hot.rootDocument.createElement('DIV'));\n    /**\n     * @type {HTMLElement}\n     */\n    _classPrivateFieldInitSpec(this, _guide, this.hot.rootDocument.createElement('DIV'));\n    /**\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _pressed, null);\n    /**\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _isTriggeredByRMB, false);\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _dblclick, 0);\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _autoresizeTimeout, null);\n    /**\n     * PhysicalIndexToValueMap to keep and track widths for physical column indexes.\n     *\n     * @type {PhysicalIndexToValueMap}\n     */\n    _classPrivateFieldInitSpec(this, _columnWidthsMap, void 0);\n    /**\n     * Private pool to save configuration from updateSettings.\n     *\n     * @type {object}\n     */\n    _classPrivateFieldInitSpec(this, _config, void 0);\n    addClass(_classPrivateFieldGet(_handle, this), 'manualColumnResizer');\n    addClass(_classPrivateFieldGet(_guide, this), 'manualColumnResizerGuide');\n  }\n\n  /**\n   * @private\n   * @returns {string}\n   */\n  get inlineDir() {\n    return this.hot.isRtl() ? 'right' : 'left';\n  }\n\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link ManualColumnResize#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    if (this.enabled) {\n      return;\n    }\n    _classPrivateFieldSet(_columnWidthsMap, this, new IndexToValueMap());\n    _classPrivateFieldGet(_columnWidthsMap, this).addLocalHook('init', () => _assertClassBrand(_ManualColumnResize_brand, this, _onMapInit).call(this));\n    this.hot.columnIndexMapper.registerMap(this.pluginName, _classPrivateFieldGet(_columnWidthsMap, this));\n    this.addHook('modifyColWidth', (width, col) => _assertClassBrand(_ManualColumnResize_brand, this, _onModifyColWidth).call(this, width, col), 1);\n    this.addHook('beforeStretchingColumnWidth', (stretchedWidth, column) => _assertClassBrand(_ManualColumnResize_brand, this, _onBeforeStretchingColumnWidth).call(this, stretchedWidth, column));\n    this.addHook('beforeColumnResize', (newSize, column, isDoubleClick) => _assertClassBrand(_ManualColumnResize_brand, this, _onBeforeColumnResize).call(this, newSize, column, isDoubleClick));\n    this.bindEvents();\n    super.enablePlugin();\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:\n   *  - [`manualColumnResize`](@/api/options.md#manualcolumnresize)\n   */\n  updatePlugin() {\n    this.disablePlugin();\n    this.enablePlugin();\n    super.updatePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    _classPrivateFieldSet(_config, this, _classPrivateFieldGet(_columnWidthsMap, this).getValues());\n    this.hot.columnIndexMapper.unregisterMap(this.pluginName);\n    super.disablePlugin();\n  }\n\n  /**\n   * Saves the current sizes using the persistentState plugin (the {@link Options#persistentState} option has to be enabled).\n   *\n   * @fires Hooks#persistentStateSave\n   */\n  saveManualColumnWidths() {\n    this.hot.runHooks('persistentStateSave', PERSISTENT_STATE_KEY, _classPrivateFieldGet(_columnWidthsMap, this).getValues());\n  }\n\n  /**\n   * Loads the previously saved sizes using the persistentState plugin (the {@link Options#persistentState} option has to be enabled).\n   *\n   * @returns {Array}\n   * @fires Hooks#persistentStateLoad\n   */\n  loadManualColumnWidths() {\n    const storedState = {};\n    this.hot.runHooks('persistentStateLoad', PERSISTENT_STATE_KEY, storedState);\n    return storedState.value;\n  }\n\n  /**\n   * Sets the new width for specified column index.\n   *\n   * @param {number} column Visual column index.\n   * @param {number} width Column width (no less than 20px).\n   * @returns {number} Returns new width.\n   */\n  setManualSize(column, width) {\n    const newWidth = Math.max(width, 20);\n    const physicalColumn = this.hot.toPhysicalColumn(column);\n    _classPrivateFieldGet(_columnWidthsMap, this).setValueAtIndex(physicalColumn, newWidth);\n    return newWidth;\n  }\n\n  /**\n   * Clears the cache for the specified column index.\n   *\n   * @param {number} column Visual column index.\n   */\n  clearManualSize(column) {\n    const physicalColumn = this.hot.toPhysicalColumn(column);\n    _classPrivateFieldGet(_columnWidthsMap, this).setValueAtIndex(physicalColumn, null);\n  }\n  /**\n   * Set the resize handle position.\n   *\n   * @private\n   * @param {HTMLCellElement} TH TH HTML element.\n   */\n  setupHandlePosition(TH) {\n    if (!TH.parentNode) {\n      return;\n    }\n    _classPrivateFieldSet(_currentTH, this, TH);\n    const {\n      _wt: wt\n    } = this.hot.view;\n    const cellCoords = wt.wtTable.getCoords(_classPrivateFieldGet(_currentTH, this));\n    const col = cellCoords.col;\n\n    // Ignore column headers.\n    if (col < 0) {\n      return;\n    }\n    const headerHeight = outerHeight(_classPrivateFieldGet(_currentTH, this));\n    const box = _classPrivateFieldGet(_currentTH, this).getBoundingClientRect();\n    // Read \"fixedColumnsStart\" through the Walkontable as in that context, the fixed columns\n    // are modified (reduced by the number of hidden columns) by TableView module.\n    const fixedColumn = col < wt.getSetting('fixedColumnsStart');\n    let relativeHeaderPosition;\n    if (fixedColumn) {\n      relativeHeaderPosition = wt.wtOverlays.topInlineStartCornerOverlay.getRelativeCellPosition(_classPrivateFieldGet(_currentTH, this), cellCoords.row, cellCoords.col);\n    }\n\n    // If the TH is not a child of the top-left overlay, recalculate using\n    // the top overlay - as this overlay contains the rest of the headers.\n    if (!relativeHeaderPosition) {\n      relativeHeaderPosition = wt.wtOverlays.topOverlay.getRelativeCellPosition(_classPrivateFieldGet(_currentTH, this), cellCoords.row, cellCoords.col);\n    }\n    _classPrivateFieldSet(_currentCol, this, this.hot.columnIndexMapper.getVisualFromRenderableIndex(col));\n    _classPrivateFieldSet(_selectedCols, this, []);\n    const isFullColumnSelected = this.hot.selection.isSelectedByCorner() || this.hot.selection.isSelectedByColumnHeader();\n    if (this.hot.selection.isSelected() && isFullColumnSelected) {\n      const selectionRanges = this.hot.getSelectedRange();\n      arrayEach(selectionRanges, selectionRange => {\n        const fromColumn = selectionRange.getTopStartCorner().col;\n        const toColumn = selectionRange.getBottomEndCorner().col;\n\n        // Add every selected column for resize action.\n        rangeEach(fromColumn, toColumn, columnIndex => {\n          if (!_classPrivateFieldGet(_selectedCols, this).includes(columnIndex)) {\n            _classPrivateFieldGet(_selectedCols, this).push(columnIndex);\n          }\n        });\n      });\n    }\n\n    // Resizing element beyond the current selection (also when there is no selection).\n    if (!_classPrivateFieldGet(_selectedCols, this).includes(_classPrivateFieldGet(_currentCol, this))) {\n      _classPrivateFieldSet(_selectedCols, this, [_classPrivateFieldGet(_currentCol, this)]);\n    }\n    _classPrivateFieldSet(_startOffset, this, relativeHeaderPosition.start - 6);\n    _classPrivateFieldSet(_startWidth, this, parseInt(box.width, 10));\n    _classPrivateFieldGet(_handle, this).style.top = `${relativeHeaderPosition.top}px`;\n    _classPrivateFieldGet(_handle, this).style[this.inlineDir] = `${_classPrivateFieldGet(_startOffset, this) + _classPrivateFieldGet(_startWidth, this)}px`;\n    _classPrivateFieldGet(_handle, this).style.height = `${headerHeight}px`;\n    this.hot.rootElement.appendChild(_classPrivateFieldGet(_handle, this));\n  }\n\n  /**\n   * Refresh the resize handle position.\n   *\n   * @private\n   */\n  refreshHandlePosition() {\n    _classPrivateFieldGet(_handle, this).style[this.inlineDir] = `${_classPrivateFieldGet(_startOffset, this) + _classPrivateFieldGet(_currentWidth, this)}px`;\n  }\n\n  /**\n   * Sets the resize guide position.\n   *\n   * @private\n   */\n  setupGuidePosition() {\n    const handleHeight = parseInt(outerHeight(_classPrivateFieldGet(_handle, this)), 10);\n    const handleBottomPosition = parseInt(_classPrivateFieldGet(_handle, this).style.top, 10) + handleHeight;\n    const maximumVisibleElementHeight = parseInt(this.hot.view.maximumVisibleElementHeight(0), 10);\n    addClass(_classPrivateFieldGet(_handle, this), 'active');\n    addClass(_classPrivateFieldGet(_guide, this), 'active');\n    _classPrivateFieldGet(_guide, this).style.top = `${handleBottomPosition}px`;\n    this.refreshGuidePosition();\n    _classPrivateFieldGet(_guide, this).style.height = `${maximumVisibleElementHeight - handleHeight}px`;\n    this.hot.rootElement.appendChild(_classPrivateFieldGet(_guide, this));\n  }\n\n  /**\n   * Refresh the resize guide position.\n   *\n   * @private\n   */\n  refreshGuidePosition() {\n    _classPrivateFieldGet(_guide, this).style[this.inlineDir] = _classPrivateFieldGet(_handle, this).style[this.inlineDir];\n  }\n\n  /**\n   * Hides both the resize handle and resize guide.\n   *\n   * @private\n   */\n  hideHandleAndGuide() {\n    removeClass(_classPrivateFieldGet(_handle, this), 'active');\n    removeClass(_classPrivateFieldGet(_guide, this), 'active');\n  }\n\n  /**\n   * Checks if provided element is considered a column header.\n   *\n   * @private\n   * @param {HTMLElement} element HTML element.\n   * @returns {boolean}\n   */\n  checkIfColumnHeader(element) {\n    const thead = closest(element, ['THEAD'], this.hot.rootElement);\n    const {\n      topOverlay,\n      topInlineStartCornerOverlay\n    } = this.hot.view._wt.wtOverlays;\n    return [topOverlay.clone.wtTable.THEAD, topInlineStartCornerOverlay.clone.wtTable.THEAD].includes(thead);\n  }\n\n  /**\n   * Gets the TH element from the provided element.\n   *\n   * @private\n   * @param {HTMLElement} element HTML element.\n   * @returns {HTMLElement}\n   */\n  getClosestTHParent(element) {\n    if (element.tagName !== 'TABLE') {\n      if (element.tagName === 'TH') {\n        return element;\n      }\n      return this.getClosestTHParent(element.parentNode);\n    }\n    return null;\n  }\n\n  /**\n   * 'mouseover' event callback - set the handle position.\n   *\n   * @param {MouseEvent} event The mouse event.\n   */\n\n  /**\n   * Auto-size row after doubleclick - callback.\n   *\n   * @private\n   * @fires Hooks#beforeColumnResize\n   * @fires Hooks#afterColumnResize\n   */\n  afterMouseDownTimeout() {\n    const render = () => {\n      this.hot.forceFullRender = true;\n      this.hot.view.render(); // updates all\n      this.hot.view.adjustElementsSize();\n    };\n    const resize = (column, forceRender) => {\n      const hookNewSize = this.hot.runHooks('beforeColumnResize', _classPrivateFieldGet(_newSize, this), column, true);\n      if (hookNewSize !== undefined) {\n        _classPrivateFieldSet(_newSize, this, hookNewSize);\n      }\n      if (this.hot.getSettings().stretchH === 'all') {\n        this.clearManualSize(column);\n      } else {\n        this.setManualSize(column, _classPrivateFieldGet(_newSize, this)); // double click sets by auto row size plugin\n      }\n      this.saveManualColumnWidths();\n      this.hot.runHooks('afterColumnResize', _classPrivateFieldGet(_newSize, this), column, true);\n      if (forceRender) {\n        render();\n      }\n    };\n    if (_classPrivateFieldGet(_dblclick, this) >= 2) {\n      const selectedColsLength = _classPrivateFieldGet(_selectedCols, this).length;\n      if (selectedColsLength > 1) {\n        arrayEach(_classPrivateFieldGet(_selectedCols, this), selectedCol => {\n          resize(selectedCol);\n        });\n        render();\n      } else {\n        arrayEach(_classPrivateFieldGet(_selectedCols, this), selectedCol => {\n          resize(selectedCol, true);\n        });\n      }\n    }\n    _classPrivateFieldSet(_dblclick, this, 0);\n    _classPrivateFieldSet(_autoresizeTimeout, this, null);\n  }\n\n  /**\n   * 'mousedown' event callback.\n   *\n   * @param {MouseEvent} event The mouse event.\n   */\n\n  /**\n   * Binds the mouse events.\n   *\n   * @private\n   */\n  bindEvents() {\n    const {\n      rootWindow,\n      rootElement\n    } = this.hot;\n    this.eventManager.addEventListener(rootElement, 'mouseover', e => _assertClassBrand(_ManualColumnResize_brand, this, _onMouseOver).call(this, e));\n    this.eventManager.addEventListener(rootElement, 'mousedown', e => _assertClassBrand(_ManualColumnResize_brand, this, _onMouseDown).call(this, e));\n    this.eventManager.addEventListener(rootWindow, 'mousemove', e => _assertClassBrand(_ManualColumnResize_brand, this, _onMouseMove).call(this, e));\n    this.eventManager.addEventListener(rootWindow, 'mouseup', () => _assertClassBrand(_ManualColumnResize_brand, this, _onMouseUp).call(this));\n    this.eventManager.addEventListener(_classPrivateFieldGet(_handle, this), 'contextmenu', () => _assertClassBrand(_ManualColumnResize_brand, this, _onContextMenu).call(this));\n  }\n\n  /**\n   * Modifies the provided column width, based on the plugin settings.\n   *\n   * @param {number} width Column width.\n   * @param {number} column Visual column index.\n   * @returns {number}\n   */\n\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    super.destroy();\n  }\n}\nfunction _onMapInit() {\n  const initialSetting = this.hot.getSettings()[PLUGIN_KEY];\n  const loadedManualColumnWidths = this.loadManualColumnWidths();\n  if (typeof loadedManualColumnWidths !== 'undefined') {\n    this.hot.batchExecution(() => {\n      loadedManualColumnWidths.forEach((width, physicalIndex) => {\n        _classPrivateFieldGet(_columnWidthsMap, this).setValueAtIndex(physicalIndex, width);\n      });\n    }, true);\n  } else if (Array.isArray(initialSetting)) {\n    this.hot.batchExecution(() => {\n      initialSetting.forEach((width, physicalIndex) => {\n        _classPrivateFieldGet(_columnWidthsMap, this).setValueAtIndex(physicalIndex, width);\n      });\n    }, true);\n    _classPrivateFieldSet(_config, this, initialSetting);\n  } else if (initialSetting === true && Array.isArray(_classPrivateFieldGet(_config, this))) {\n    this.hot.batchExecution(() => {\n      _classPrivateFieldGet(_config, this).forEach((width, physicalIndex) => {\n        _classPrivateFieldGet(_columnWidthsMap, this).setValueAtIndex(physicalIndex, width);\n      });\n    }, true);\n  }\n}\nfunction _onMouseOver(event) {\n  // Workaround for #6926 - if the `event.target` is temporarily detached, we can skip this callback and wait for\n  // the next `onmouseover`.\n  if (isDetached(event.target)) {\n    return;\n  }\n\n  // A \"mouseover\" action is triggered right after executing \"contextmenu\" event. It should be ignored.\n  if (_classPrivateFieldGet(_isTriggeredByRMB, this) === true) {\n    return;\n  }\n  if (this.checkIfColumnHeader(event.target)) {\n    const th = this.getClosestTHParent(event.target);\n    if (!th) {\n      return;\n    }\n    const colspan = th.getAttribute('colspan');\n    if (th && (colspan === null || colspan === '1')) {\n      if (!_classPrivateFieldGet(_pressed, this)) {\n        this.setupHandlePosition(th);\n      }\n    }\n  }\n}\nfunction _onMouseDown(event) {\n  if (event.target.parentNode !== this.hot.rootElement) {\n    return;\n  }\n  if (hasClass(event.target, 'manualColumnResizer')) {\n    this.setupHandlePosition(_classPrivateFieldGet(_currentTH, this));\n    this.setupGuidePosition();\n    _classPrivateFieldSet(_pressed, this, true);\n    if (_classPrivateFieldGet(_autoresizeTimeout, this) === null) {\n      _classPrivateFieldSet(_autoresizeTimeout, this, setTimeout(() => this.afterMouseDownTimeout(), 500));\n      this.hot._registerTimeout(_classPrivateFieldGet(_autoresizeTimeout, this));\n    }\n    _classPrivateFieldSet(_dblclick, this, _classPrivateFieldGet(_dblclick, this) + 1);\n    this.startX = event.pageX;\n    _classPrivateFieldSet(_newSize, this, _classPrivateFieldGet(_startWidth, this));\n  }\n}\n/**\n * 'mousemove' event callback - refresh the handle and guide positions, cache the new column width.\n *\n * @param {MouseEvent} event The mouse event.\n */\nfunction _onMouseMove(event) {\n  if (_classPrivateFieldGet(_pressed, this)) {\n    const change = (event.pageX - this.startX) * this.hot.getDirectionFactor();\n    _classPrivateFieldSet(_currentWidth, this, _classPrivateFieldGet(_startWidth, this) + change);\n    arrayEach(_classPrivateFieldGet(_selectedCols, this), selectedCol => {\n      _classPrivateFieldSet(_newSize, this, this.setManualSize(selectedCol, _classPrivateFieldGet(_currentWidth, this)));\n    });\n    this.refreshHandlePosition();\n    this.refreshGuidePosition();\n  }\n}\n/**\n * 'mouseup' event callback - apply the column resizing.\n *\n * @fires Hooks#beforeColumnResize\n * @fires Hooks#afterColumnResize\n */\nfunction _onMouseUp() {\n  const render = () => {\n    this.hot.forceFullRender = true;\n    this.hot.view.render(); // updates all\n    this.hot.view.adjustElementsSize();\n  };\n  const resize = (column, forceRender) => {\n    this.hot.runHooks('beforeColumnResize', _classPrivateFieldGet(_newSize, this), column, false);\n    if (forceRender) {\n      render();\n    }\n    this.saveManualColumnWidths();\n    this.hot.runHooks('afterColumnResize', _classPrivateFieldGet(_newSize, this), column, false);\n  };\n  if (_classPrivateFieldGet(_pressed, this)) {\n    this.hideHandleAndGuide();\n    _classPrivateFieldSet(_pressed, this, false);\n    if (_classPrivateFieldGet(_newSize, this) !== _classPrivateFieldGet(_startWidth, this)) {\n      const selectedColsLength = _classPrivateFieldGet(_selectedCols, this).length;\n      if (selectedColsLength > 1) {\n        arrayEach(_classPrivateFieldGet(_selectedCols, this), selectedCol => {\n          resize(selectedCol);\n        });\n        render();\n      } else {\n        arrayEach(_classPrivateFieldGet(_selectedCols, this), selectedCol => {\n          resize(selectedCol, true);\n        });\n      }\n    }\n    this.setupHandlePosition(_classPrivateFieldGet(_currentTH, this));\n  }\n}\n/**\n * Callback for \"contextmenu\" event triggered on element showing move handle. It removes handle and guide elements.\n */\nfunction _onContextMenu() {\n  this.hideHandleAndGuide();\n  this.hot.rootElement.removeChild(_classPrivateFieldGet(_handle, this));\n  this.hot.rootElement.removeChild(_classPrivateFieldGet(_guide, this));\n  _classPrivateFieldSet(_pressed, this, false);\n  _classPrivateFieldSet(_isTriggeredByRMB, this, true);\n\n  // There is thrown \"mouseover\" event right after opening a context menu. This flag inform that handle\n  // shouldn't be drawn just after removing it.\n  this.hot._registerImmediate(() => {\n    _classPrivateFieldSet(_isTriggeredByRMB, this, false);\n  });\n}\nfunction _onModifyColWidth(width, column) {\n  let newWidth = width;\n  if (this.enabled) {\n    const physicalColumn = this.hot.toPhysicalColumn(column);\n    const columnWidth = _classPrivateFieldGet(_columnWidthsMap, this).getValueAtIndex(physicalColumn);\n    if (this.hot.getSettings()[PLUGIN_KEY] && columnWidth) {\n      newWidth = columnWidth;\n    }\n  }\n  return newWidth;\n}\n/**\n * Modifies the provided column stretched width. This hook decides if specified column should be stretched or not.\n *\n * @param {number} stretchedWidth Stretched width.\n * @param {number} column Visual column index.\n * @returns {number}\n */\nfunction _onBeforeStretchingColumnWidth(stretchedWidth, column) {\n  let width = _classPrivateFieldGet(_columnWidthsMap, this).getValueAtIndex(column);\n  if (width === null) {\n    width = stretchedWidth;\n  }\n  return width;\n}\n/**\n * `beforeColumnResize` hook callback.\n */\nfunction _onBeforeColumnResize() {\n  // clear the header height cache information\n  this.hot.view._wt.wtViewport.resetHasOversizedColumnHeadersMarked();\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}