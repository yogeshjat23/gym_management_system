{"ast":null,"code":"import { isNumeric } from \"../../helpers/number.mjs\";\nimport { isFunction } from \"../../helpers/function.mjs\";\nexport const ASC = 'asc';\nexport const DESC = 'desc';\nconst ORDER_MAP = new Map([[ASC, [-1, 1]], [DESC, [1, -1]]]);\nconst DEFAULT_ERROR_PRIORITY_EXISTS = priority => `The priority '${priority}' is already declared in a map.`;\nconst DEFAULT_ERROR_PRIORITY_NAN = priority => `The priority '${priority}' is not a number.`;\n\n/**\n * @typedef {object} PriorityMap\n * @property {Function} addItem Adds items to the priority map.\n * @property {Function} getItems Gets items from the passed map in a ASC or DESC order of priorities.\n */\n/**\n * Creates a new priority map.\n *\n * @param {object} config The config for priority map.\n * @param {Function} config.errorPriorityExists The function to generate a custom error message if priority is already taken.\n * @param {Function} config.errorPriorityNaN The function to generate a custom error message if priority is not a number.\n * @returns {PriorityMap}\n */\nexport function createPriorityMap() {\n  let {\n    errorPriorityExists,\n    errorPriorityNaN\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const priorityMap = new Map();\n  errorPriorityExists = isFunction(errorPriorityExists) ? errorPriorityExists : DEFAULT_ERROR_PRIORITY_EXISTS;\n  errorPriorityNaN = isFunction(errorPriorityNaN) ? errorPriorityNaN : DEFAULT_ERROR_PRIORITY_NAN;\n\n  /**\n   * Adds items to priority map. Throws an error if `priority` is not a number or if is already added.\n   *\n   * @param {number} priority The priority for adding item.\n   * @param {*} item The adding item.\n   */\n  function addItem(priority, item) {\n    if (!isNumeric(priority)) {\n      throw new Error(errorPriorityNaN(priority));\n    }\n    if (priorityMap.has(priority)) {\n      throw new Error(errorPriorityExists(priority));\n    }\n    priorityMap.set(priority, item);\n  }\n\n  /**\n   * Gets items from the passed map in a ASC or DESC order of priorities.\n   *\n   * @param {string} [order] The order for getting items. ASC is an default.\n   * @returns {*}\n   */\n  function getItems() {\n    let order = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ASC;\n    const [left, right] = ORDER_MAP.get(order) || ORDER_MAP.get(ASC);\n    return [...priorityMap]\n    // we want to be sure we sort over a priority key\n    // if we are sure we can remove custom compare function\n    // then we should replace next line with a default `.sort()`\n    .sort((a, b) => a[0] < b[0] ? left : right).map(item => item[1]);\n  }\n  return {\n    addItem,\n    getItems\n  };\n}","map":{"version":3,"names":["isNumeric","isFunction","ASC","DESC","ORDER_MAP","Map","DEFAULT_ERROR_PRIORITY_EXISTS","priority","DEFAULT_ERROR_PRIORITY_NAN","createPriorityMap","errorPriorityExists","errorPriorityNaN","arguments","length","undefined","priorityMap","addItem","item","Error","has","set","getItems","order","left","right","get","sort","a","b","map"],"sources":["D:/gym-project/frontend/node_modules/handsontable/utils/dataStructures/priorityMap.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nimport { isNumeric } from \"../../helpers/number.mjs\";\nimport { isFunction } from \"../../helpers/function.mjs\";\nexport const ASC = 'asc';\nexport const DESC = 'desc';\nconst ORDER_MAP = new Map([[ASC, [-1, 1]], [DESC, [1, -1]]]);\nconst DEFAULT_ERROR_PRIORITY_EXISTS = priority => `The priority '${priority}' is already declared in a map.`;\nconst DEFAULT_ERROR_PRIORITY_NAN = priority => `The priority '${priority}' is not a number.`;\n\n/**\n * @typedef {object} PriorityMap\n * @property {Function} addItem Adds items to the priority map.\n * @property {Function} getItems Gets items from the passed map in a ASC or DESC order of priorities.\n */\n/**\n * Creates a new priority map.\n *\n * @param {object} config The config for priority map.\n * @param {Function} config.errorPriorityExists The function to generate a custom error message if priority is already taken.\n * @param {Function} config.errorPriorityNaN The function to generate a custom error message if priority is not a number.\n * @returns {PriorityMap}\n */\nexport function createPriorityMap() {\n  let {\n    errorPriorityExists,\n    errorPriorityNaN\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const priorityMap = new Map();\n  errorPriorityExists = isFunction(errorPriorityExists) ? errorPriorityExists : DEFAULT_ERROR_PRIORITY_EXISTS;\n  errorPriorityNaN = isFunction(errorPriorityNaN) ? errorPriorityNaN : DEFAULT_ERROR_PRIORITY_NAN;\n\n  /**\n   * Adds items to priority map. Throws an error if `priority` is not a number or if is already added.\n   *\n   * @param {number} priority The priority for adding item.\n   * @param {*} item The adding item.\n   */\n  function addItem(priority, item) {\n    if (!isNumeric(priority)) {\n      throw new Error(errorPriorityNaN(priority));\n    }\n    if (priorityMap.has(priority)) {\n      throw new Error(errorPriorityExists(priority));\n    }\n    priorityMap.set(priority, item);\n  }\n\n  /**\n   * Gets items from the passed map in a ASC or DESC order of priorities.\n   *\n   * @param {string} [order] The order for getting items. ASC is an default.\n   * @returns {*}\n   */\n  function getItems() {\n    let order = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ASC;\n    const [left, right] = ORDER_MAP.get(order) || ORDER_MAP.get(ASC);\n    return [...priorityMap]\n    // we want to be sure we sort over a priority key\n    // if we are sure we can remove custom compare function\n    // then we should replace next line with a default `.sort()`\n    .sort((a, b) => a[0] < b[0] ? left : right).map(item => item[1]);\n  }\n  return {\n    addItem,\n    getItems\n  };\n}"],"mappings":"AACA,SAASA,SAAS,QAAQ,0BAA0B;AACpD,SAASC,UAAU,QAAQ,4BAA4B;AACvD,OAAO,MAAMC,GAAG,GAAG,KAAK;AACxB,OAAO,MAAMC,IAAI,GAAG,MAAM;AAC1B,MAAMC,SAAS,GAAG,IAAIC,GAAG,CAAC,CAAC,CAACH,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAACC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5D,MAAMG,6BAA6B,GAAGC,QAAQ,IAAI,iBAAiBA,QAAQ,iCAAiC;AAC5G,MAAMC,0BAA0B,GAAGD,QAAQ,IAAI,iBAAiBA,QAAQ,oBAAoB;;AAE5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,iBAAiBA,CAAA,EAAG;EAClC,IAAI;IACFC,mBAAmB;IACnBC;EACF,CAAC,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAC1E,MAAMG,WAAW,GAAG,IAAIV,GAAG,CAAC,CAAC;EAC7BK,mBAAmB,GAAGT,UAAU,CAACS,mBAAmB,CAAC,GAAGA,mBAAmB,GAAGJ,6BAA6B;EAC3GK,gBAAgB,GAAGV,UAAU,CAACU,gBAAgB,CAAC,GAAGA,gBAAgB,GAAGH,0BAA0B;;EAE/F;AACF;AACA;AACA;AACA;AACA;EACE,SAASQ,OAAOA,CAACT,QAAQ,EAAEU,IAAI,EAAE;IAC/B,IAAI,CAACjB,SAAS,CAACO,QAAQ,CAAC,EAAE;MACxB,MAAM,IAAIW,KAAK,CAACP,gBAAgB,CAACJ,QAAQ,CAAC,CAAC;IAC7C;IACA,IAAIQ,WAAW,CAACI,GAAG,CAACZ,QAAQ,CAAC,EAAE;MAC7B,MAAM,IAAIW,KAAK,CAACR,mBAAmB,CAACH,QAAQ,CAAC,CAAC;IAChD;IACAQ,WAAW,CAACK,GAAG,CAACb,QAAQ,EAAEU,IAAI,CAAC;EACjC;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,SAASI,QAAQA,CAAA,EAAG;IAClB,IAAIC,KAAK,GAAGV,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAGV,GAAG;IACnF,MAAM,CAACqB,IAAI,EAAEC,KAAK,CAAC,GAAGpB,SAAS,CAACqB,GAAG,CAACH,KAAK,CAAC,IAAIlB,SAAS,CAACqB,GAAG,CAACvB,GAAG,CAAC;IAChE,OAAO,CAAC,GAAGa,WAAW;IACtB;IACA;IACA;IAAA,CACCW,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,GAAGL,IAAI,GAAGC,KAAK,CAAC,CAACK,GAAG,CAACZ,IAAI,IAAIA,IAAI,CAAC,CAAC,CAAC,CAAC;EAClE;EACA,OAAO;IACLD,OAAO;IACPK;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}