{"ast":null,"code":"import { arrayEach } from \"../../../../helpers/array.mjs\";\nimport { expandNode } from \"./expand.mjs\";\nimport { getFirstChildProperty, isNodeReflectsFirstChildColspan, traverseHiddenNodeColumnIndexes } from \"./utils/tree.mjs\";\n/**\n * Collapsing a node is a process where the processing node is collapsed\n * to the colspan width of the first child. All node children, except the\n * first one, are hidden. To prevent losing a current state of node children\n * on the right, all nodes are cloned (and restored while expanding), and\n * only then original nodes are modified (hidden in this case).\n *\n * @param {TreeNode} nodeToProcess A tree node to process.\n * @returns {object} Returns an object with properties:\n *                    - rollbackModification: The function that rollbacks\n *                      the tree to the previous state.\n *                    - affectedColumns: The list of the visual column\n *                      indexes which are affected. That list is passed\n *                      to the hiddens column logic.\n *                    - colspanCompensation: The number of colspan by\n *                      which the processed node colspan was reduced.\n */\nexport function collapseNode(nodeToProcess) {\n  var _getFirstChildPropert;\n  const {\n    data: nodeData,\n    childs: nodeChilds\n  } = nodeToProcess;\n  if (nodeData.isCollapsed || nodeData.isHidden || nodeData.origColspan <= 1) {\n    return {\n      rollbackModification: () => {},\n      affectedColumns: [],\n      colspanCompensation: 0\n    };\n  }\n  const isNodeReflected = isNodeReflectsFirstChildColspan(nodeToProcess);\n  if (isNodeReflected) {\n    return collapseNode(nodeChilds[0]);\n  }\n  nodeData.isCollapsed = true;\n  const allLeavesExceptMostLeft = nodeChilds.slice(1);\n  const affectedColumns = new Set();\n  if (allLeavesExceptMostLeft.length > 0) {\n    arrayEach(allLeavesExceptMostLeft, node => {\n      traverseHiddenNodeColumnIndexes(node, gridColumnIndex => {\n        affectedColumns.add(gridColumnIndex);\n      });\n\n      // Clone the tree to preserve original tree state after header expanding.\n      node.data.clonedTree = node.cloneTree();\n\n      // Hide all leaves except the first leaf on the left (on headers context hide all\n      // headers on the right).\n      node.walkDown(_ref => {\n        let {\n          data\n        } = _ref;\n        data.isHidden = true;\n      });\n    });\n  } else {\n    const {\n      origColspan,\n      columnIndex\n    } = nodeData;\n\n    // Add column to \"affected\" started from 1. The header without children can not be\n    // collapsed so the first have to be visible (untouched).\n    for (let i = 1; i < origColspan; i++) {\n      const gridColumnIndex = columnIndex + i;\n      affectedColumns.add(gridColumnIndex);\n    }\n  }\n\n  // Calculate by how many colspan it needs to reduce the headings to match them to\n  // the first child colspan width.\n  const colspanCompensation = nodeData.colspan - ((_getFirstChildPropert = getFirstChildProperty(nodeToProcess, 'colspan')) !== null && _getFirstChildPropert !== void 0 ? _getFirstChildPropert : 1);\n  nodeToProcess.walkUp(node => {\n    const {\n      data\n    } = node;\n    data.colspan -= colspanCompensation;\n    if (data.colspan <= 1) {\n      data.colspan = 1;\n      data.isCollapsed = true;\n    } else if (isNodeReflectsFirstChildColspan(node)) {\n      data.isCollapsed = getFirstChildProperty(node, 'isCollapsed');\n    }\n  });\n  return {\n    rollbackModification: () => expandNode(nodeToProcess),\n    affectedColumns: Array.from(affectedColumns),\n    colspanCompensation\n  };\n}","map":{"version":3,"names":["arrayEach","expandNode","getFirstChildProperty","isNodeReflectsFirstChildColspan","traverseHiddenNodeColumnIndexes","collapseNode","nodeToProcess","_getFirstChildPropert","data","nodeData","childs","nodeChilds","isCollapsed","isHidden","origColspan","rollbackModification","affectedColumns","colspanCompensation","isNodeReflected","allLeavesExceptMostLeft","slice","Set","length","node","gridColumnIndex","add","clonedTree","cloneTree","walkDown","_ref","columnIndex","i","colspan","walkUp","Array","from"],"sources":["D:/gym-project/frontend/node_modules/handsontable/plugins/nestedHeaders/stateManager/nodeModifiers/collapse.mjs"],"sourcesContent":["import \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport { arrayEach } from \"../../../../helpers/array.mjs\";\nimport { expandNode } from \"./expand.mjs\";\nimport { getFirstChildProperty, isNodeReflectsFirstChildColspan, traverseHiddenNodeColumnIndexes } from \"./utils/tree.mjs\";\n/**\n * Collapsing a node is a process where the processing node is collapsed\n * to the colspan width of the first child. All node children, except the\n * first one, are hidden. To prevent losing a current state of node children\n * on the right, all nodes are cloned (and restored while expanding), and\n * only then original nodes are modified (hidden in this case).\n *\n * @param {TreeNode} nodeToProcess A tree node to process.\n * @returns {object} Returns an object with properties:\n *                    - rollbackModification: The function that rollbacks\n *                      the tree to the previous state.\n *                    - affectedColumns: The list of the visual column\n *                      indexes which are affected. That list is passed\n *                      to the hiddens column logic.\n *                    - colspanCompensation: The number of colspan by\n *                      which the processed node colspan was reduced.\n */\nexport function collapseNode(nodeToProcess) {\n  var _getFirstChildPropert;\n  const {\n    data: nodeData,\n    childs: nodeChilds\n  } = nodeToProcess;\n  if (nodeData.isCollapsed || nodeData.isHidden || nodeData.origColspan <= 1) {\n    return {\n      rollbackModification: () => {},\n      affectedColumns: [],\n      colspanCompensation: 0\n    };\n  }\n  const isNodeReflected = isNodeReflectsFirstChildColspan(nodeToProcess);\n  if (isNodeReflected) {\n    return collapseNode(nodeChilds[0]);\n  }\n  nodeData.isCollapsed = true;\n  const allLeavesExceptMostLeft = nodeChilds.slice(1);\n  const affectedColumns = new Set();\n  if (allLeavesExceptMostLeft.length > 0) {\n    arrayEach(allLeavesExceptMostLeft, node => {\n      traverseHiddenNodeColumnIndexes(node, gridColumnIndex => {\n        affectedColumns.add(gridColumnIndex);\n      });\n\n      // Clone the tree to preserve original tree state after header expanding.\n      node.data.clonedTree = node.cloneTree();\n\n      // Hide all leaves except the first leaf on the left (on headers context hide all\n      // headers on the right).\n      node.walkDown(_ref => {\n        let {\n          data\n        } = _ref;\n        data.isHidden = true;\n      });\n    });\n  } else {\n    const {\n      origColspan,\n      columnIndex\n    } = nodeData;\n\n    // Add column to \"affected\" started from 1. The header without children can not be\n    // collapsed so the first have to be visible (untouched).\n    for (let i = 1; i < origColspan; i++) {\n      const gridColumnIndex = columnIndex + i;\n      affectedColumns.add(gridColumnIndex);\n    }\n  }\n\n  // Calculate by how many colspan it needs to reduce the headings to match them to\n  // the first child colspan width.\n  const colspanCompensation = nodeData.colspan - ((_getFirstChildPropert = getFirstChildProperty(nodeToProcess, 'colspan')) !== null && _getFirstChildPropert !== void 0 ? _getFirstChildPropert : 1);\n  nodeToProcess.walkUp(node => {\n    const {\n      data\n    } = node;\n    data.colspan -= colspanCompensation;\n    if (data.colspan <= 1) {\n      data.colspan = 1;\n      data.isCollapsed = true;\n    } else if (isNodeReflectsFirstChildColspan(node)) {\n      data.isCollapsed = getFirstChildProperty(node, 'isCollapsed');\n    }\n  });\n  return {\n    rollbackModification: () => expandNode(nodeToProcess),\n    affectedColumns: Array.from(affectedColumns),\n    colspanCompensation\n  };\n}"],"mappings":"AAOA,SAASA,SAAS,QAAQ,+BAA+B;AACzD,SAASC,UAAU,QAAQ,cAAc;AACzC,SAASC,qBAAqB,EAAEC,+BAA+B,EAAEC,+BAA+B,QAAQ,kBAAkB;AAC1H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAYA,CAACC,aAAa,EAAE;EAC1C,IAAIC,qBAAqB;EACzB,MAAM;IACJC,IAAI,EAAEC,QAAQ;IACdC,MAAM,EAAEC;EACV,CAAC,GAAGL,aAAa;EACjB,IAAIG,QAAQ,CAACG,WAAW,IAAIH,QAAQ,CAACI,QAAQ,IAAIJ,QAAQ,CAACK,WAAW,IAAI,CAAC,EAAE;IAC1E,OAAO;MACLC,oBAAoB,EAAEA,CAAA,KAAM,CAAC,CAAC;MAC9BC,eAAe,EAAE,EAAE;MACnBC,mBAAmB,EAAE;IACvB,CAAC;EACH;EACA,MAAMC,eAAe,GAAGf,+BAA+B,CAACG,aAAa,CAAC;EACtE,IAAIY,eAAe,EAAE;IACnB,OAAOb,YAAY,CAACM,UAAU,CAAC,CAAC,CAAC,CAAC;EACpC;EACAF,QAAQ,CAACG,WAAW,GAAG,IAAI;EAC3B,MAAMO,uBAAuB,GAAGR,UAAU,CAACS,KAAK,CAAC,CAAC,CAAC;EACnD,MAAMJ,eAAe,GAAG,IAAIK,GAAG,CAAC,CAAC;EACjC,IAAIF,uBAAuB,CAACG,MAAM,GAAG,CAAC,EAAE;IACtCtB,SAAS,CAACmB,uBAAuB,EAAEI,IAAI,IAAI;MACzCnB,+BAA+B,CAACmB,IAAI,EAAEC,eAAe,IAAI;QACvDR,eAAe,CAACS,GAAG,CAACD,eAAe,CAAC;MACtC,CAAC,CAAC;;MAEF;MACAD,IAAI,CAACf,IAAI,CAACkB,UAAU,GAAGH,IAAI,CAACI,SAAS,CAAC,CAAC;;MAEvC;MACA;MACAJ,IAAI,CAACK,QAAQ,CAACC,IAAI,IAAI;QACpB,IAAI;UACFrB;QACF,CAAC,GAAGqB,IAAI;QACRrB,IAAI,CAACK,QAAQ,GAAG,IAAI;MACtB,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,MAAM;IACL,MAAM;MACJC,WAAW;MACXgB;IACF,CAAC,GAAGrB,QAAQ;;IAEZ;IACA;IACA,KAAK,IAAIsB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjB,WAAW,EAAEiB,CAAC,EAAE,EAAE;MACpC,MAAMP,eAAe,GAAGM,WAAW,GAAGC,CAAC;MACvCf,eAAe,CAACS,GAAG,CAACD,eAAe,CAAC;IACtC;EACF;;EAEA;EACA;EACA,MAAMP,mBAAmB,GAAGR,QAAQ,CAACuB,OAAO,IAAI,CAACzB,qBAAqB,GAAGL,qBAAqB,CAACI,aAAa,EAAE,SAAS,CAAC,MAAM,IAAI,IAAIC,qBAAqB,KAAK,KAAK,CAAC,GAAGA,qBAAqB,GAAG,CAAC,CAAC;EACnMD,aAAa,CAAC2B,MAAM,CAACV,IAAI,IAAI;IAC3B,MAAM;MACJf;IACF,CAAC,GAAGe,IAAI;IACRf,IAAI,CAACwB,OAAO,IAAIf,mBAAmB;IACnC,IAAIT,IAAI,CAACwB,OAAO,IAAI,CAAC,EAAE;MACrBxB,IAAI,CAACwB,OAAO,GAAG,CAAC;MAChBxB,IAAI,CAACI,WAAW,GAAG,IAAI;IACzB,CAAC,MAAM,IAAIT,+BAA+B,CAACoB,IAAI,CAAC,EAAE;MAChDf,IAAI,CAACI,WAAW,GAAGV,qBAAqB,CAACqB,IAAI,EAAE,aAAa,CAAC;IAC/D;EACF,CAAC,CAAC;EACF,OAAO;IACLR,oBAAoB,EAAEA,CAAA,KAAMd,UAAU,CAACK,aAAa,CAAC;IACrDU,eAAe,EAAEkB,KAAK,CAACC,IAAI,CAACnB,eAAe,CAAC;IAC5CC;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}