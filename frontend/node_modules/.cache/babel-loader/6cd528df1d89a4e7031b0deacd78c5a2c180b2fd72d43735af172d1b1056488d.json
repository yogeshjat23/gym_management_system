{"ast":null,"code":"// This file handles key-name discrepancies between browsers.\n// For the list of discrepancies, go to: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values.\nconst mappings = new Map([[' ', 'space'],\n// custom mapping\n['spacebar', 'space'], ['scroll', 'scrolllock'], ['del', 'delete'], ['esc', 'escape'], ['medianexttrack', 'mediatracknext'], ['mediaprevioustrack', 'mediatrackprevious'], ['volumeup', 'audiovolumeup'], ['volumedown', 'audiovolumedown'], ['volumemute', 'audiovolumemute'], ['multiply', '*'], ['add', '+'], ['divide', '/'], ['subtract', '-'], ['left', 'arrowleft'], ['right', 'arrowright'], ['up', 'arrowup'], ['down', 'arrowdown']]);\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * Get a single, normalized string from the list of the `KeyboardEvent.key` properties.\n *\n * @param {Array<string>} keys The list of the `KeyboardEvent.key` properties\n * @returns {string}\n */\nexport const normalizeKeys = keys => {\n  return keys.map(key => {\n    const lowercaseKey = key.toLowerCase();\n    if (mappings.has(lowercaseKey)) {\n      return mappings.get(lowercaseKey);\n    }\n    return lowercaseKey;\n  }).sort().join('+');\n};\n\n/**\n * Get the list of the `KeyboardEvent.key` properties from a single, normalized string.\n *\n * @param {string} normalizedKeys A single, normalized string that contains the list of the `KeyboardEvent.key` properties\n * @returns {Array<string>}\n */\nexport const getKeysList = normalizedKeys => {\n  return normalizedKeys.split('+');\n};\nconst specialCharactersSet = new Map([[186, 'semicolon'], [187, 'equal'], [188, 'comma'], [189, 'minus'], [190, 'period'], [191, 'slash'], [192, 'backquote'], [219, 'bracketleft'], [220, 'backslash'], [221, 'bracketright'], [222, 'quote']]);\n\n/**\n * Normalizes a keyboard event key value to a key before its modification.\n *\n * Keep in mind that there is difference between `key` and `code` properties of the KeyboardEvent object.\n * The `key` property represents the logical key on the keyboard (after applying modifiers and taking\n * the keyboard layout into account), where the `code` property represents the physical key\n * (regardless of what is printed on the key). Using the `keyCode` for alphanumeric keys,\n * solves the problem and allows to get the correct key value. The value that takes the keyboard layout\n * into account but is not modified by the modifiers (e.g. Alt + L would give polish \"ł\" we want \"l\").\n *\n * @param {Event} event The KeyboardEvent object.\n * @returns {string}\n */\nexport const normalizeEventKey = _ref => {\n  let {\n    which,\n    key\n  } = _ref;\n  if (specialCharactersSet.has(which)) {\n    return specialCharactersSet.get(which);\n  }\n  const normalizedKey = String.fromCharCode(which).toLowerCase();\n  if (/^[a-z0-9]$/.test(normalizedKey)) {\n    return normalizedKey;\n  }\n  return key.toLowerCase();\n};","map":{"version":3,"names":["mappings","Map","normalizeKeys","keys","map","key","lowercaseKey","toLowerCase","has","get","sort","join","getKeysList","normalizedKeys","split","specialCharactersSet","normalizeEventKey","_ref","which","normalizedKey","String","fromCharCode","test"],"sources":["D:/gym-project/frontend/node_modules/handsontable/shortcuts/utils.mjs"],"sourcesContent":["// This file handles key-name discrepancies between browsers.\n// For the list of discrepancies, go to: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values.\nconst mappings = new Map([[' ', 'space'],\n// custom mapping\n['spacebar', 'space'], ['scroll', 'scrolllock'], ['del', 'delete'], ['esc', 'escape'], ['medianexttrack', 'mediatracknext'], ['mediaprevioustrack', 'mediatrackprevious'], ['volumeup', 'audiovolumeup'], ['volumedown', 'audiovolumedown'], ['volumemute', 'audiovolumemute'], ['multiply', '*'], ['add', '+'], ['divide', '/'], ['subtract', '-'], ['left', 'arrowleft'], ['right', 'arrowright'], ['up', 'arrowup'], ['down', 'arrowdown']]);\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * Get a single, normalized string from the list of the `KeyboardEvent.key` properties.\n *\n * @param {Array<string>} keys The list of the `KeyboardEvent.key` properties\n * @returns {string}\n */\nexport const normalizeKeys = keys => {\n  return keys.map(key => {\n    const lowercaseKey = key.toLowerCase();\n    if (mappings.has(lowercaseKey)) {\n      return mappings.get(lowercaseKey);\n    }\n    return lowercaseKey;\n  }).sort().join('+');\n};\n\n/**\n * Get the list of the `KeyboardEvent.key` properties from a single, normalized string.\n *\n * @param {string} normalizedKeys A single, normalized string that contains the list of the `KeyboardEvent.key` properties\n * @returns {Array<string>}\n */\nexport const getKeysList = normalizedKeys => {\n  return normalizedKeys.split('+');\n};\nconst specialCharactersSet = new Map([[186, 'semicolon'], [187, 'equal'], [188, 'comma'], [189, 'minus'], [190, 'period'], [191, 'slash'], [192, 'backquote'], [219, 'bracketleft'], [220, 'backslash'], [221, 'bracketright'], [222, 'quote']]);\n\n/**\n * Normalizes a keyboard event key value to a key before its modification.\n *\n * Keep in mind that there is difference between `key` and `code` properties of the KeyboardEvent object.\n * The `key` property represents the logical key on the keyboard (after applying modifiers and taking\n * the keyboard layout into account), where the `code` property represents the physical key\n * (regardless of what is printed on the key). Using the `keyCode` for alphanumeric keys,\n * solves the problem and allows to get the correct key value. The value that takes the keyboard layout\n * into account but is not modified by the modifiers (e.g. Alt + L would give polish \"ł\" we want \"l\").\n *\n * @param {Event} event The KeyboardEvent object.\n * @returns {string}\n */\nexport const normalizeEventKey = _ref => {\n  let {\n    which,\n    key\n  } = _ref;\n  if (specialCharactersSet.has(which)) {\n    return specialCharactersSet.get(which);\n  }\n  const normalizedKey = String.fromCharCode(which).toLowerCase();\n  if (/^[a-z0-9]$/.test(normalizedKey)) {\n    return normalizedKey;\n  }\n  return key.toLowerCase();\n};"],"mappings":"AAAA;AACA;AACA,MAAMA,QAAQ,GAAG,IAAIC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,OAAO,CAAC;AACxC;AACA,CAAC,UAAU,EAAE,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,YAAY,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAE,CAAC,gBAAgB,EAAE,gBAAgB,CAAC,EAAE,CAAC,oBAAoB,EAAE,oBAAoB,CAAC,EAAE,CAAC,UAAU,EAAE,eAAe,CAAC,EAAE,CAAC,YAAY,EAAE,iBAAiB,CAAC,EAAE,CAAC,YAAY,EAAE,iBAAiB,CAAC,EAAE,CAAC,UAAU,EAAE,GAAG,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,CAAC,EAAE,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAE,CAAC,UAAU,EAAE,GAAG,CAAC,EAAE,CAAC,MAAM,EAAE,WAAW,CAAC,EAAE,CAAC,OAAO,EAAE,YAAY,CAAC,EAAE,CAAC,IAAI,EAAE,SAAS,CAAC,EAAE,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC;;AAE/a;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAGC,IAAI,IAAI;EACnC,OAAOA,IAAI,CAACC,GAAG,CAACC,GAAG,IAAI;IACrB,MAAMC,YAAY,GAAGD,GAAG,CAACE,WAAW,CAAC,CAAC;IACtC,IAAIP,QAAQ,CAACQ,GAAG,CAACF,YAAY,CAAC,EAAE;MAC9B,OAAON,QAAQ,CAACS,GAAG,CAACH,YAAY,CAAC;IACnC;IACA,OAAOA,YAAY;EACrB,CAAC,CAAC,CAACI,IAAI,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;AACrB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAGC,cAAc,IAAI;EAC3C,OAAOA,cAAc,CAACC,KAAK,CAAC,GAAG,CAAC;AAClC,CAAC;AACD,MAAMC,oBAAoB,GAAG,IAAId,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,WAAW,CAAC,EAAE,CAAC,GAAG,EAAE,OAAO,CAAC,EAAE,CAAC,GAAG,EAAE,OAAO,CAAC,EAAE,CAAC,GAAG,EAAE,OAAO,CAAC,EAAE,CAAC,GAAG,EAAE,QAAQ,CAAC,EAAE,CAAC,GAAG,EAAE,OAAO,CAAC,EAAE,CAAC,GAAG,EAAE,WAAW,CAAC,EAAE,CAAC,GAAG,EAAE,aAAa,CAAC,EAAE,CAAC,GAAG,EAAE,WAAW,CAAC,EAAE,CAAC,GAAG,EAAE,cAAc,CAAC,EAAE,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC;;AAEhP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMe,iBAAiB,GAAGC,IAAI,IAAI;EACvC,IAAI;IACFC,KAAK;IACLb;EACF,CAAC,GAAGY,IAAI;EACR,IAAIF,oBAAoB,CAACP,GAAG,CAACU,KAAK,CAAC,EAAE;IACnC,OAAOH,oBAAoB,CAACN,GAAG,CAACS,KAAK,CAAC;EACxC;EACA,MAAMC,aAAa,GAAGC,MAAM,CAACC,YAAY,CAACH,KAAK,CAAC,CAACX,WAAW,CAAC,CAAC;EAC9D,IAAI,YAAY,CAACe,IAAI,CAACH,aAAa,CAAC,EAAE;IACpC,OAAOA,aAAa;EACtB;EACA,OAAOd,GAAG,CAACE,WAAW,CAAC,CAAC;AAC1B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}