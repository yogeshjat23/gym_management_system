{"ast":null,"code":"import { IndexMap, alterUtilsFactory } from \"../../../translations/index.mjs\";\nconst {\n  getListWithInsertedItems,\n  getListWithRemovedItems\n} = alterUtilsFactory('physicallyIndexed');\n\n/**\n * Map from physical index to another index.\n */\nclass StrictBindsMap extends IndexMap {\n  constructor() {\n    super(index => index);\n  }\n\n  /**\n   * Add values to list and reorganize.\n   *\n   * @private\n   * @param {number} insertionIndex Position inside the list.\n   * @param {Array} insertedIndexes List of inserted indexes.\n   */\n  insert(insertionIndex, insertedIndexes) {\n    this.indexedValues = getListWithInsertedItems(this.indexedValues, insertionIndex, insertedIndexes, (_, ordinalNumber) => this.getNextValue(ordinalNumber));\n    super.insert(insertionIndex, insertedIndexes);\n  }\n\n  /**\n   * Remove values from the list and reorganize.\n   *\n   * @private\n   * @param {Array} removedIndexes List of removed indexes.\n   */\n  remove(removedIndexes) {\n    this.indexedValues = getListWithRemovedItems(this.indexedValues, removedIndexes);\n    super.remove(removedIndexes);\n  }\n\n  /**\n   * Get next values, which should be greater than actual maximum value in the list.\n   *\n   * @param {number} ordinalNumber Position in the list.\n   * @returns {number}\n   */\n  getNextValue(ordinalNumber) {\n    return Math.max(...this.getValues()) + 1 + ordinalNumber;\n  }\n}\nexport default StrictBindsMap;","map":{"version":3,"names":["IndexMap","alterUtilsFactory","getListWithInsertedItems","getListWithRemovedItems","StrictBindsMap","constructor","index","insert","insertionIndex","insertedIndexes","indexedValues","_","ordinalNumber","getNextValue","remove","removedIndexes","Math","max","getValues"],"sources":["D:/gym-project/frontend/node_modules/handsontable/plugins/bindRowsWithHeaders/maps/strictBindsMap.mjs"],"sourcesContent":["import { IndexMap, alterUtilsFactory } from \"../../../translations/index.mjs\";\nconst {\n  getListWithInsertedItems,\n  getListWithRemovedItems\n} = alterUtilsFactory('physicallyIndexed');\n\n/**\n * Map from physical index to another index.\n */\nclass StrictBindsMap extends IndexMap {\n  constructor() {\n    super(index => index);\n  }\n\n  /**\n   * Add values to list and reorganize.\n   *\n   * @private\n   * @param {number} insertionIndex Position inside the list.\n   * @param {Array} insertedIndexes List of inserted indexes.\n   */\n  insert(insertionIndex, insertedIndexes) {\n    this.indexedValues = getListWithInsertedItems(this.indexedValues, insertionIndex, insertedIndexes, (_, ordinalNumber) => this.getNextValue(ordinalNumber));\n    super.insert(insertionIndex, insertedIndexes);\n  }\n\n  /**\n   * Remove values from the list and reorganize.\n   *\n   * @private\n   * @param {Array} removedIndexes List of removed indexes.\n   */\n  remove(removedIndexes) {\n    this.indexedValues = getListWithRemovedItems(this.indexedValues, removedIndexes);\n    super.remove(removedIndexes);\n  }\n\n  /**\n   * Get next values, which should be greater than actual maximum value in the list.\n   *\n   * @param {number} ordinalNumber Position in the list.\n   * @returns {number}\n   */\n  getNextValue(ordinalNumber) {\n    return Math.max(...this.getValues()) + 1 + ordinalNumber;\n  }\n}\nexport default StrictBindsMap;"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,iBAAiB,QAAQ,iCAAiC;AAC7E,MAAM;EACJC,wBAAwB;EACxBC;AACF,CAAC,GAAGF,iBAAiB,CAAC,mBAAmB,CAAC;;AAE1C;AACA;AACA;AACA,MAAMG,cAAc,SAASJ,QAAQ,CAAC;EACpCK,WAAWA,CAAA,EAAG;IACZ,KAAK,CAACC,KAAK,IAAIA,KAAK,CAAC;EACvB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,MAAMA,CAACC,cAAc,EAAEC,eAAe,EAAE;IACtC,IAAI,CAACC,aAAa,GAAGR,wBAAwB,CAAC,IAAI,CAACQ,aAAa,EAAEF,cAAc,EAAEC,eAAe,EAAE,CAACE,CAAC,EAAEC,aAAa,KAAK,IAAI,CAACC,YAAY,CAACD,aAAa,CAAC,CAAC;IAC1J,KAAK,CAACL,MAAM,CAACC,cAAc,EAAEC,eAAe,CAAC;EAC/C;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEK,MAAMA,CAACC,cAAc,EAAE;IACrB,IAAI,CAACL,aAAa,GAAGP,uBAAuB,CAAC,IAAI,CAACO,aAAa,EAAEK,cAAc,CAAC;IAChF,KAAK,CAACD,MAAM,CAACC,cAAc,CAAC;EAC9B;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEF,YAAYA,CAACD,aAAa,EAAE;IAC1B,OAAOI,IAAI,CAACC,GAAG,CAAC,GAAG,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,GAAGN,aAAa;EAC1D;AACF;AACA,eAAeR,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}