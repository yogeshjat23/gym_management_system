{"ast":null,"code":"function _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport ViewSize from \"./viewSize.mjs\";\nimport { WORKING_SPACE_ALL, WORKING_SPACE_TOP, WORKING_SPACE_BOTTOM } from \"./constants.mjs\";\n/**\n * The class is a source of the truth of information about the current and\n * next size of the rendered DOM elements and current and next offset of\n * the view. That information allows us to calculate diff between current\n * DOM order and this which should be rendered without touching the DOM API at all.\n *\n * Mostly the ViewSizeSet is created for each individual renderer. But in\n * the table, there is one case where this size information should be shared\n * between two different instances (different table renderers). This is a TR\n * element which can contain TH elements - managed by own renderer and\n * TD elements - managed by another renderer. To generate correct DOM order\n * for them it is required to connect these two instances by reference\n * through `sharedSize`.\n *\n * @class {ViewSizeSet}\n */\nexport default class ViewSizeSet {\n  constructor() {\n    /**\n     * Holder for current and next view size and offset.\n     *\n     * @type {ViewSize}\n     */\n    _defineProperty(this, \"size\", new ViewSize());\n    /**\n     * Defines if this instance shares its size with another instance. If it's in the shared\n     * mode it defines what space it occupies ('top' or 'bottom').\n     *\n     * @type {number}\n     */\n    _defineProperty(this, \"workingSpace\", WORKING_SPACE_ALL);\n    /**\n     * Shared Size instance.\n     *\n     * @type {ViewSize}\n     */\n    _defineProperty(this, \"sharedSize\", null);\n  }\n  /**\n   * Sets the size for rendered elements. It can be a size for rows, cells or size for row\n   * headers etc.\n   *\n   * @param {number} size The size.\n   */\n  setSize(size) {\n    this.size.setSize(size);\n  }\n\n  /**\n   * Sets the offset for rendered elements. The offset describes the shift between 0 and\n   * the first rendered element according to the scroll position.\n   *\n   * @param {number} offset The offset.\n   */\n  setOffset(offset) {\n    this.size.setOffset(offset);\n  }\n\n  /**\n   * Returns ViewSize instance.\n   *\n   * @returns {ViewSize}\n   */\n  getViewSize() {\n    return this.size;\n  }\n\n  /**\n   * Checks if this ViewSizeSet is sharing the size with another instance.\n   *\n   * @returns {boolean}\n   */\n  isShared() {\n    return this.sharedSize instanceof ViewSize;\n  }\n\n  /**\n   * Checks what working space describes this size instance.\n   *\n   * @param {number} workingSpace The number which describes the type of the working space (see constants.js).\n   * @returns {boolean}\n   */\n  isPlaceOn(workingSpace) {\n    return this.workingSpace === workingSpace;\n  }\n\n  /**\n   * Appends the ViewSizeSet instance to this instance that turns it into a shared mode.\n   *\n   * @param {ViewSizeSet} viewSize The instance of the ViewSizeSet class.\n   */\n  append(viewSize) {\n    this.workingSpace = WORKING_SPACE_TOP;\n    viewSize.workingSpace = WORKING_SPACE_BOTTOM;\n    this.sharedSize = viewSize.getViewSize();\n  }\n\n  /**\n   * Prepends the ViewSize instance to this instance that turns it into a shared mode.\n   *\n   * @param {ViewSizeSet} viewSize The instance of the ViewSizeSet class.\n   */\n  prepend(viewSize) {\n    this.workingSpace = WORKING_SPACE_BOTTOM;\n    viewSize.workingSpace = WORKING_SPACE_TOP;\n    this.sharedSize = viewSize.getViewSize();\n  }\n}","map":{"version":3,"names":["_defineProperty","e","r","t","_toPropertyKey","Object","defineProperty","value","enumerable","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","ViewSize","WORKING_SPACE_ALL","WORKING_SPACE_TOP","WORKING_SPACE_BOTTOM","ViewSizeSet","constructor","setSize","size","setOffset","offset","getViewSize","isShared","sharedSize","isPlaceOn","workingSpace","append","viewSize","prepend"],"sources":["D:/gym-project/frontend/node_modules/handsontable/3rdparty/walkontable/src/utils/orderView/viewSizeSet.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport ViewSize from \"./viewSize.mjs\";\nimport { WORKING_SPACE_ALL, WORKING_SPACE_TOP, WORKING_SPACE_BOTTOM } from \"./constants.mjs\";\n/**\n * The class is a source of the truth of information about the current and\n * next size of the rendered DOM elements and current and next offset of\n * the view. That information allows us to calculate diff between current\n * DOM order and this which should be rendered without touching the DOM API at all.\n *\n * Mostly the ViewSizeSet is created for each individual renderer. But in\n * the table, there is one case where this size information should be shared\n * between two different instances (different table renderers). This is a TR\n * element which can contain TH elements - managed by own renderer and\n * TD elements - managed by another renderer. To generate correct DOM order\n * for them it is required to connect these two instances by reference\n * through `sharedSize`.\n *\n * @class {ViewSizeSet}\n */\nexport default class ViewSizeSet {\n  constructor() {\n    /**\n     * Holder for current and next view size and offset.\n     *\n     * @type {ViewSize}\n     */\n    _defineProperty(this, \"size\", new ViewSize());\n    /**\n     * Defines if this instance shares its size with another instance. If it's in the shared\n     * mode it defines what space it occupies ('top' or 'bottom').\n     *\n     * @type {number}\n     */\n    _defineProperty(this, \"workingSpace\", WORKING_SPACE_ALL);\n    /**\n     * Shared Size instance.\n     *\n     * @type {ViewSize}\n     */\n    _defineProperty(this, \"sharedSize\", null);\n  }\n  /**\n   * Sets the size for rendered elements. It can be a size for rows, cells or size for row\n   * headers etc.\n   *\n   * @param {number} size The size.\n   */\n  setSize(size) {\n    this.size.setSize(size);\n  }\n\n  /**\n   * Sets the offset for rendered elements. The offset describes the shift between 0 and\n   * the first rendered element according to the scroll position.\n   *\n   * @param {number} offset The offset.\n   */\n  setOffset(offset) {\n    this.size.setOffset(offset);\n  }\n\n  /**\n   * Returns ViewSize instance.\n   *\n   * @returns {ViewSize}\n   */\n  getViewSize() {\n    return this.size;\n  }\n\n  /**\n   * Checks if this ViewSizeSet is sharing the size with another instance.\n   *\n   * @returns {boolean}\n   */\n  isShared() {\n    return this.sharedSize instanceof ViewSize;\n  }\n\n  /**\n   * Checks what working space describes this size instance.\n   *\n   * @param {number} workingSpace The number which describes the type of the working space (see constants.js).\n   * @returns {boolean}\n   */\n  isPlaceOn(workingSpace) {\n    return this.workingSpace === workingSpace;\n  }\n\n  /**\n   * Appends the ViewSizeSet instance to this instance that turns it into a shared mode.\n   *\n   * @param {ViewSizeSet} viewSize The instance of the ViewSizeSet class.\n   */\n  append(viewSize) {\n    this.workingSpace = WORKING_SPACE_TOP;\n    viewSize.workingSpace = WORKING_SPACE_BOTTOM;\n    this.sharedSize = viewSize.getViewSize();\n  }\n\n  /**\n   * Prepends the ViewSize instance to this instance that turns it into a shared mode.\n   *\n   * @param {ViewSizeSet} viewSize The instance of the ViewSizeSet class.\n   */\n  prepend(viewSize) {\n    this.workingSpace = WORKING_SPACE_BOTTOM;\n    viewSize.workingSpace = WORKING_SPACE_TOP;\n    this.sharedSize = viewSize.getViewSize();\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}