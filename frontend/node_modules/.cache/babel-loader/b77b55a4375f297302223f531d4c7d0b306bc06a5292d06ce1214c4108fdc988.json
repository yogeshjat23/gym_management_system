{"ast":null,"code":"import { toUpperCaseFirst } from \"../helpers/string.mjs\";\nimport { isFunction } from \"../helpers/function.mjs\";\nimport DataMap from \"./dataMap.mjs\";\nimport { deepClone } from \"../helpers/object.mjs\";\nimport { setAttribute } from \"../helpers/dom/element.mjs\";\nimport { A11Y_COLCOUNT, A11Y_ROWCOUNT } from \"../helpers/a11y.mjs\";\n/**\n * Loads new data to Handsontable.\n *\n * @private\n * @param {Array} data Array of arrays or array of objects containing data.\n * @param {Function} setDataMapFunction Function that updates the datamap instance.\n * @param {Function} callbackFunction Function that takes care of updating Handsontable to the new dataset. Called\n * right before the `after-` hooks.\n * @param {object} config The configuration object containing all the needed dependency references and information.\n * @param {Handsontable.Core} config.hotInstance The Handsontable instance.\n * @param {DataMap} config.dataMap The current `dataMap` instance.\n * @param {DataSource} config.dataSource The current `dataSource` instance.\n * @param {string} config.internalSource The immediate internal source of the `replaceData` call.\n * @param {string} config.source The source of the call.\n * @param {boolean} config.firstRun `true` if it's a first call in the Handsontable lifecycle, `false` otherwise.\n * @fires Hooks#beforeLoadData\n * @fires Hooks#beforeUpdateData\n * @fires Hooks#afterLoadData\n * @fires Hooks#afterUpdateData\n * @fires Hooks#afterChange\n */\nfunction replaceData(data, setDataMapFunction, callbackFunction, config) {\n  const {\n    hotInstance,\n    dataMap,\n    dataSource,\n    internalSource,\n    source,\n    metaManager,\n    firstRun\n  } = config;\n  const capitalizedInternalSource = toUpperCaseFirst(internalSource);\n  const tableMeta = hotInstance.getSettings();\n  if (Array.isArray(tableMeta.dataSchema)) {\n    hotInstance.dataType = 'array';\n  } else if (isFunction(tableMeta.dataSchema)) {\n    hotInstance.dataType = 'function';\n  } else {\n    hotInstance.dataType = 'object';\n  }\n  if (dataMap) {\n    dataMap.destroy();\n  }\n  data = hotInstance.runHooks(`before${capitalizedInternalSource}`, data, firstRun, source);\n  const newDataMap = new DataMap(hotInstance, data, metaManager);\n\n  // We need to apply the new dataMap immediately, because of some asynchronous logic in the\n  // `autoRowSize`/`autoColumnSize` plugins.\n  setDataMapFunction(newDataMap);\n  if (typeof data === 'object' && data !== null) {\n    if (!(data.push && data.splice)) {\n      // check if data is array. Must use duck-type check so Backbone Collections also pass it\n      // when data is not an array, attempt to make a single-row array of it\n      // eslint-disable-next-line no-param-reassign\n      data = [data];\n    }\n  } else if (data === null) {\n    const dataSchema = newDataMap.getSchema();\n\n    // eslint-disable-next-line no-param-reassign\n    data = [];\n    let row;\n    let r = 0;\n    let rlen = 0;\n    for (r = 0, rlen = tableMeta.startRows; r < rlen; r++) {\n      if ((hotInstance.dataType === 'object' || hotInstance.dataType === 'function') && tableMeta.dataSchema) {\n        row = deepClone(dataSchema);\n        data.push(row);\n      } else if (hotInstance.dataType === 'array') {\n        row = deepClone(dataSchema[0]);\n        data.push(row);\n      } else {\n        row = [];\n        for (let c = 0, clen = tableMeta.startCols; c < clen; c++) {\n          row.push(null);\n        }\n        data.push(row);\n      }\n    }\n  } else {\n    throw new Error(`${internalSource} only accepts array of objects or array of arrays (${typeof data} given)`);\n  }\n  if (Array.isArray(data[0])) {\n    hotInstance.dataType = 'array';\n  }\n  tableMeta.data = data;\n  newDataMap.dataSource = data;\n  dataSource.data = data;\n  dataSource.dataType = hotInstance.dataType;\n  dataSource.colToProp = newDataMap.colToProp.bind(newDataMap);\n  dataSource.propToCol = newDataMap.propToCol.bind(newDataMap);\n  dataSource.countCachedColumns = newDataMap.countCachedColumns.bind(newDataMap);\n\n  // Run the logic for reassuring that the table structure fits the new dataset.\n  callbackFunction(newDataMap);\n  hotInstance.runHooks(`after${capitalizedInternalSource}`, data, firstRun, source);\n\n  // TODO: rethink the way the `afterChange` hook is being run here in the core `init` method.\n  if (!firstRun) {\n    hotInstance.runHooks('afterChange', null, internalSource);\n    hotInstance.render();\n  }\n  if (hotInstance.getSettings().ariaTags) {\n    setAttribute(hotInstance.rootElement, [A11Y_ROWCOUNT(-1),\n    // If run after initialization, add the number of row headers.\n    A11Y_COLCOUNT(hotInstance.countCols() + (hotInstance.view ? hotInstance.countRowHeaders() : 0))]);\n  }\n}\nexport { replaceData };","map":{"version":3,"names":["toUpperCaseFirst","isFunction","DataMap","deepClone","setAttribute","A11Y_COLCOUNT","A11Y_ROWCOUNT","replaceData","data","setDataMapFunction","callbackFunction","config","hotInstance","dataMap","dataSource","internalSource","source","metaManager","firstRun","capitalizedInternalSource","tableMeta","getSettings","Array","isArray","dataSchema","dataType","destroy","runHooks","newDataMap","push","splice","getSchema","row","r","rlen","startRows","c","clen","startCols","Error","colToProp","bind","propToCol","countCachedColumns","render","ariaTags","rootElement","countCols","view","countRowHeaders"],"sources":["D:/gym-project/frontend/node_modules/handsontable/dataMap/replaceData.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport { toUpperCaseFirst } from \"../helpers/string.mjs\";\nimport { isFunction } from \"../helpers/function.mjs\";\nimport DataMap from \"./dataMap.mjs\";\nimport { deepClone } from \"../helpers/object.mjs\";\nimport { setAttribute } from \"../helpers/dom/element.mjs\";\nimport { A11Y_COLCOUNT, A11Y_ROWCOUNT } from \"../helpers/a11y.mjs\";\n/**\n * Loads new data to Handsontable.\n *\n * @private\n * @param {Array} data Array of arrays or array of objects containing data.\n * @param {Function} setDataMapFunction Function that updates the datamap instance.\n * @param {Function} callbackFunction Function that takes care of updating Handsontable to the new dataset. Called\n * right before the `after-` hooks.\n * @param {object} config The configuration object containing all the needed dependency references and information.\n * @param {Handsontable.Core} config.hotInstance The Handsontable instance.\n * @param {DataMap} config.dataMap The current `dataMap` instance.\n * @param {DataSource} config.dataSource The current `dataSource` instance.\n * @param {string} config.internalSource The immediate internal source of the `replaceData` call.\n * @param {string} config.source The source of the call.\n * @param {boolean} config.firstRun `true` if it's a first call in the Handsontable lifecycle, `false` otherwise.\n * @fires Hooks#beforeLoadData\n * @fires Hooks#beforeUpdateData\n * @fires Hooks#afterLoadData\n * @fires Hooks#afterUpdateData\n * @fires Hooks#afterChange\n */\nfunction replaceData(data, setDataMapFunction, callbackFunction, config) {\n  const {\n    hotInstance,\n    dataMap,\n    dataSource,\n    internalSource,\n    source,\n    metaManager,\n    firstRun\n  } = config;\n  const capitalizedInternalSource = toUpperCaseFirst(internalSource);\n  const tableMeta = hotInstance.getSettings();\n  if (Array.isArray(tableMeta.dataSchema)) {\n    hotInstance.dataType = 'array';\n  } else if (isFunction(tableMeta.dataSchema)) {\n    hotInstance.dataType = 'function';\n  } else {\n    hotInstance.dataType = 'object';\n  }\n  if (dataMap) {\n    dataMap.destroy();\n  }\n  data = hotInstance.runHooks(`before${capitalizedInternalSource}`, data, firstRun, source);\n  const newDataMap = new DataMap(hotInstance, data, metaManager);\n\n  // We need to apply the new dataMap immediately, because of some asynchronous logic in the\n  // `autoRowSize`/`autoColumnSize` plugins.\n  setDataMapFunction(newDataMap);\n  if (typeof data === 'object' && data !== null) {\n    if (!(data.push && data.splice)) {\n      // check if data is array. Must use duck-type check so Backbone Collections also pass it\n      // when data is not an array, attempt to make a single-row array of it\n      // eslint-disable-next-line no-param-reassign\n      data = [data];\n    }\n  } else if (data === null) {\n    const dataSchema = newDataMap.getSchema();\n\n    // eslint-disable-next-line no-param-reassign\n    data = [];\n    let row;\n    let r = 0;\n    let rlen = 0;\n    for (r = 0, rlen = tableMeta.startRows; r < rlen; r++) {\n      if ((hotInstance.dataType === 'object' || hotInstance.dataType === 'function') && tableMeta.dataSchema) {\n        row = deepClone(dataSchema);\n        data.push(row);\n      } else if (hotInstance.dataType === 'array') {\n        row = deepClone(dataSchema[0]);\n        data.push(row);\n      } else {\n        row = [];\n        for (let c = 0, clen = tableMeta.startCols; c < clen; c++) {\n          row.push(null);\n        }\n        data.push(row);\n      }\n    }\n  } else {\n    throw new Error(`${internalSource} only accepts array of objects or array of arrays (${typeof data} given)`);\n  }\n  if (Array.isArray(data[0])) {\n    hotInstance.dataType = 'array';\n  }\n  tableMeta.data = data;\n  newDataMap.dataSource = data;\n  dataSource.data = data;\n  dataSource.dataType = hotInstance.dataType;\n  dataSource.colToProp = newDataMap.colToProp.bind(newDataMap);\n  dataSource.propToCol = newDataMap.propToCol.bind(newDataMap);\n  dataSource.countCachedColumns = newDataMap.countCachedColumns.bind(newDataMap);\n\n  // Run the logic for reassuring that the table structure fits the new dataset.\n  callbackFunction(newDataMap);\n  hotInstance.runHooks(`after${capitalizedInternalSource}`, data, firstRun, source);\n\n  // TODO: rethink the way the `afterChange` hook is being run here in the core `init` method.\n  if (!firstRun) {\n    hotInstance.runHooks('afterChange', null, internalSource);\n    hotInstance.render();\n  }\n  if (hotInstance.getSettings().ariaTags) {\n    setAttribute(hotInstance.rootElement, [A11Y_ROWCOUNT(-1),\n    // If run after initialization, add the number of row headers.\n    A11Y_COLCOUNT(hotInstance.countCols() + (hotInstance.view ? hotInstance.countRowHeaders() : 0))]);\n  }\n}\nexport { replaceData };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}