{"ast":null,"code":"import { getCaretPosition, setCaretPosition } from \"../../helpers/dom/element.mjs\";\n/**\n * Updates the textarea caret position depends on the action executed on that element.\n *\n * The following actions are supported:\n *  - 'home': Move the caret to the beginning of the current line;\n *  - 'end': Move the caret to the end of the current line.\n *\n * @param {'home'|'end'} actionName The action to perform that modifies the caret behavior.\n * @param {HTMLTextAreaElement} textareaElement The textarea element where the action is supposed to happen.\n */\nexport function updateCaretPosition(actionName, textareaElement) {\n  const caretPosition = getCaretPosition(textareaElement);\n  const textLines = textareaElement.value.split('\\n');\n  let newCaretPosition = caretPosition;\n  let lineStartIndex = 0;\n  for (let i = 0; i < textLines.length; i++) {\n    const textLine = textLines[i];\n    if (i !== 0) {\n      lineStartIndex += textLines[i - 1].length + 1;\n    }\n    const lineEndIndex = lineStartIndex + textLine.length;\n    if (actionName === 'home') {\n      newCaretPosition = lineStartIndex;\n    } else if (actionName === 'end') {\n      newCaretPosition = lineEndIndex;\n    }\n    if (caretPosition <= lineEndIndex) {\n      break;\n    }\n  }\n  setCaretPosition(textareaElement, newCaretPosition);\n}","map":{"version":3,"names":["getCaretPosition","setCaretPosition","updateCaretPosition","actionName","textareaElement","caretPosition","textLines","value","split","newCaretPosition","lineStartIndex","i","length","textLine","lineEndIndex"],"sources":["D:/gym-project/frontend/node_modules/handsontable/editors/textEditor/caretPositioner.mjs"],"sourcesContent":["import { getCaretPosition, setCaretPosition } from \"../../helpers/dom/element.mjs\";\n/**\n * Updates the textarea caret position depends on the action executed on that element.\n *\n * The following actions are supported:\n *  - 'home': Move the caret to the beginning of the current line;\n *  - 'end': Move the caret to the end of the current line.\n *\n * @param {'home'|'end'} actionName The action to perform that modifies the caret behavior.\n * @param {HTMLTextAreaElement} textareaElement The textarea element where the action is supposed to happen.\n */\nexport function updateCaretPosition(actionName, textareaElement) {\n  const caretPosition = getCaretPosition(textareaElement);\n  const textLines = textareaElement.value.split('\\n');\n  let newCaretPosition = caretPosition;\n  let lineStartIndex = 0;\n  for (let i = 0; i < textLines.length; i++) {\n    const textLine = textLines[i];\n    if (i !== 0) {\n      lineStartIndex += textLines[i - 1].length + 1;\n    }\n    const lineEndIndex = lineStartIndex + textLine.length;\n    if (actionName === 'home') {\n      newCaretPosition = lineStartIndex;\n    } else if (actionName === 'end') {\n      newCaretPosition = lineEndIndex;\n    }\n    if (caretPosition <= lineEndIndex) {\n      break;\n    }\n  }\n  setCaretPosition(textareaElement, newCaretPosition);\n}"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,gBAAgB,QAAQ,+BAA+B;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,mBAAmBA,CAACC,UAAU,EAAEC,eAAe,EAAE;EAC/D,MAAMC,aAAa,GAAGL,gBAAgB,CAACI,eAAe,CAAC;EACvD,MAAME,SAAS,GAAGF,eAAe,CAACG,KAAK,CAACC,KAAK,CAAC,IAAI,CAAC;EACnD,IAAIC,gBAAgB,GAAGJ,aAAa;EACpC,IAAIK,cAAc,GAAG,CAAC;EACtB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,SAAS,CAACM,MAAM,EAAED,CAAC,EAAE,EAAE;IACzC,MAAME,QAAQ,GAAGP,SAAS,CAACK,CAAC,CAAC;IAC7B,IAAIA,CAAC,KAAK,CAAC,EAAE;MACXD,cAAc,IAAIJ,SAAS,CAACK,CAAC,GAAG,CAAC,CAAC,CAACC,MAAM,GAAG,CAAC;IAC/C;IACA,MAAME,YAAY,GAAGJ,cAAc,GAAGG,QAAQ,CAACD,MAAM;IACrD,IAAIT,UAAU,KAAK,MAAM,EAAE;MACzBM,gBAAgB,GAAGC,cAAc;IACnC,CAAC,MAAM,IAAIP,UAAU,KAAK,KAAK,EAAE;MAC/BM,gBAAgB,GAAGK,YAAY;IACjC;IACA,IAAIT,aAAa,IAAIS,YAAY,EAAE;MACjC;IACF;EACF;EACAb,gBAAgB,CAACG,eAAe,EAAEK,gBAAgB,CAAC;AACrD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}