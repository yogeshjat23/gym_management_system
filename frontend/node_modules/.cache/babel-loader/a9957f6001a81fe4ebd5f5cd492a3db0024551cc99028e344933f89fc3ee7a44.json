{"ast":null,"code":"/* eslint-disable jsdoc/require-description-complete-sentence */\nimport { arrayEach } from \"../../../helpers/array.mjs\";\nimport { createDefaultHeaderSettings, createPlaceholderHeaderSettings } from \"./utils.mjs\";\n/**\n * A function that dump a tree structure into multidimensional array. That structure is\n * later processed by header renderers to modify TH elements to achieve a proper\n * DOM structure.\n *\n * That structure contains settings object for every TH element generated by Walkontable.\n * The matrix operates on visual column index.\n *\n * Output example:\n *   [\n *     [\n *       { label: 'A1', colspan: 2, origColspan: 2, isHidden: false, ... },\n *       { label: '', colspan: 1, origColspan: 1, isHidden: true, ... },\n *       { label: '', colspan: 1, origColspan: 1, isHidden: false, ... },\n *     ],\n *     [\n *       { label: 'true', colspan: 1, origColspan: 1, isHidden: false, ... },\n *       { label: 'B2', colspan: 1, origColspan: 1, isHidden: false, ... },\n *       { label: '4', colspan: 1, origColspan: 1, isHidden: false, ... },\n *     ],\n *     [\n *       { label: '', colspan: 1, origColspan: 1, isHidden: false, ... },\n *       { label: '', colspan: 1, origColspan: 1, isHidden: false, ... },\n *       { label: '', colspan: 1, origColspan: 1, isHidden: false, ... },\n *     ],\n *   ]\n *\n * @param {TreeNode[]} headerRoots An array of root nodes.\n * @returns {Array[]}\n */\nexport function generateMatrix(headerRoots) {\n  const matrix = [];\n  arrayEach(headerRoots, rootNode => {\n    rootNode.walkDown(node => {\n      const nodeData = node.data;\n      const {\n        origColspan,\n        columnIndex,\n        headerLevel,\n        crossHiddenColumns\n      } = nodeData;\n      const colspanHeaderLayer = createNestedArrayIfNecessary(matrix, headerLevel);\n      let isRootSettingsFound = false;\n      for (let i = columnIndex; i < columnIndex + origColspan; i++) {\n        const isColumnHidden = crossHiddenColumns.includes(i);\n        if (isColumnHidden || isRootSettingsFound) {\n          colspanHeaderLayer.push(createPlaceholderHeaderSettings(nodeData));\n        } else {\n          const headerRootSettings = createHeaderSettings(nodeData);\n          headerRootSettings.isRoot = true;\n          colspanHeaderLayer.push(headerRootSettings);\n          isRootSettingsFound = true;\n        }\n      }\n    });\n  });\n  return matrix;\n}\n\n/**\n * Creates header settings object.\n *\n * @param {object} nodeData The tree data object.\n * @returns {object}\n */\nfunction createHeaderSettings(nodeData) {\n  // For the matrix module we do not need to export \"crossHiddenColumns\" key. It's redundant here.\n  const {\n    crossHiddenColumns,\n    ...headerRootSettings\n  } = createDefaultHeaderSettings(nodeData);\n  return headerRootSettings;\n}\n\n/**\n * Internal helper which ensures that subarray exists under specified index.\n *\n * @param {Array[]} array An array to check.\n * @param {number} index An array index under the subarray should be checked.\n * @returns {Array}\n */\nfunction createNestedArrayIfNecessary(array, index) {\n  let subArray;\n  if (Array.isArray(array[index])) {\n    subArray = array[index];\n  } else {\n    subArray = [];\n    array[index] = subArray;\n  }\n  return subArray;\n}","map":{"version":3,"names":["arrayEach","createDefaultHeaderSettings","createPlaceholderHeaderSettings","generateMatrix","headerRoots","matrix","rootNode","walkDown","node","nodeData","data","origColspan","columnIndex","headerLevel","crossHiddenColumns","colspanHeaderLayer","createNestedArrayIfNecessary","isRootSettingsFound","i","isColumnHidden","includes","push","headerRootSettings","createHeaderSettings","isRoot","array","index","subArray","Array","isArray"],"sources":["D:/gym-project/frontend/node_modules/handsontable/plugins/nestedHeaders/stateManager/matrixGenerator.mjs"],"sourcesContent":["import \"core-js/modules/es.array.push.js\";\n/* eslint-disable jsdoc/require-description-complete-sentence */\nimport { arrayEach } from \"../../../helpers/array.mjs\";\nimport { createDefaultHeaderSettings, createPlaceholderHeaderSettings } from \"./utils.mjs\";\n/**\n * A function that dump a tree structure into multidimensional array. That structure is\n * later processed by header renderers to modify TH elements to achieve a proper\n * DOM structure.\n *\n * That structure contains settings object for every TH element generated by Walkontable.\n * The matrix operates on visual column index.\n *\n * Output example:\n *   [\n *     [\n *       { label: 'A1', colspan: 2, origColspan: 2, isHidden: false, ... },\n *       { label: '', colspan: 1, origColspan: 1, isHidden: true, ... },\n *       { label: '', colspan: 1, origColspan: 1, isHidden: false, ... },\n *     ],\n *     [\n *       { label: 'true', colspan: 1, origColspan: 1, isHidden: false, ... },\n *       { label: 'B2', colspan: 1, origColspan: 1, isHidden: false, ... },\n *       { label: '4', colspan: 1, origColspan: 1, isHidden: false, ... },\n *     ],\n *     [\n *       { label: '', colspan: 1, origColspan: 1, isHidden: false, ... },\n *       { label: '', colspan: 1, origColspan: 1, isHidden: false, ... },\n *       { label: '', colspan: 1, origColspan: 1, isHidden: false, ... },\n *     ],\n *   ]\n *\n * @param {TreeNode[]} headerRoots An array of root nodes.\n * @returns {Array[]}\n */\nexport function generateMatrix(headerRoots) {\n  const matrix = [];\n  arrayEach(headerRoots, rootNode => {\n    rootNode.walkDown(node => {\n      const nodeData = node.data;\n      const {\n        origColspan,\n        columnIndex,\n        headerLevel,\n        crossHiddenColumns\n      } = nodeData;\n      const colspanHeaderLayer = createNestedArrayIfNecessary(matrix, headerLevel);\n      let isRootSettingsFound = false;\n      for (let i = columnIndex; i < columnIndex + origColspan; i++) {\n        const isColumnHidden = crossHiddenColumns.includes(i);\n        if (isColumnHidden || isRootSettingsFound) {\n          colspanHeaderLayer.push(createPlaceholderHeaderSettings(nodeData));\n        } else {\n          const headerRootSettings = createHeaderSettings(nodeData);\n          headerRootSettings.isRoot = true;\n          colspanHeaderLayer.push(headerRootSettings);\n          isRootSettingsFound = true;\n        }\n      }\n    });\n  });\n  return matrix;\n}\n\n/**\n * Creates header settings object.\n *\n * @param {object} nodeData The tree data object.\n * @returns {object}\n */\nfunction createHeaderSettings(nodeData) {\n  // For the matrix module we do not need to export \"crossHiddenColumns\" key. It's redundant here.\n  const {\n    crossHiddenColumns,\n    ...headerRootSettings\n  } = createDefaultHeaderSettings(nodeData);\n  return headerRootSettings;\n}\n\n/**\n * Internal helper which ensures that subarray exists under specified index.\n *\n * @param {Array[]} array An array to check.\n * @param {number} index An array index under the subarray should be checked.\n * @returns {Array}\n */\nfunction createNestedArrayIfNecessary(array, index) {\n  let subArray;\n  if (Array.isArray(array[index])) {\n    subArray = array[index];\n  } else {\n    subArray = [];\n    array[index] = subArray;\n  }\n  return subArray;\n}"],"mappings":"AACA;AACA,SAASA,SAAS,QAAQ,4BAA4B;AACtD,SAASC,2BAA2B,EAAEC,+BAA+B,QAAQ,aAAa;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAACC,WAAW,EAAE;EAC1C,MAAMC,MAAM,GAAG,EAAE;EACjBL,SAAS,CAACI,WAAW,EAAEE,QAAQ,IAAI;IACjCA,QAAQ,CAACC,QAAQ,CAACC,IAAI,IAAI;MACxB,MAAMC,QAAQ,GAAGD,IAAI,CAACE,IAAI;MAC1B,MAAM;QACJC,WAAW;QACXC,WAAW;QACXC,WAAW;QACXC;MACF,CAAC,GAAGL,QAAQ;MACZ,MAAMM,kBAAkB,GAAGC,4BAA4B,CAACX,MAAM,EAAEQ,WAAW,CAAC;MAC5E,IAAII,mBAAmB,GAAG,KAAK;MAC/B,KAAK,IAAIC,CAAC,GAAGN,WAAW,EAAEM,CAAC,GAAGN,WAAW,GAAGD,WAAW,EAAEO,CAAC,EAAE,EAAE;QAC5D,MAAMC,cAAc,GAAGL,kBAAkB,CAACM,QAAQ,CAACF,CAAC,CAAC;QACrD,IAAIC,cAAc,IAAIF,mBAAmB,EAAE;UACzCF,kBAAkB,CAACM,IAAI,CAACnB,+BAA+B,CAACO,QAAQ,CAAC,CAAC;QACpE,CAAC,MAAM;UACL,MAAMa,kBAAkB,GAAGC,oBAAoB,CAACd,QAAQ,CAAC;UACzDa,kBAAkB,CAACE,MAAM,GAAG,IAAI;UAChCT,kBAAkB,CAACM,IAAI,CAACC,kBAAkB,CAAC;UAC3CL,mBAAmB,GAAG,IAAI;QAC5B;MACF;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;EACF,OAAOZ,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASkB,oBAAoBA,CAACd,QAAQ,EAAE;EACtC;EACA,MAAM;IACJK,kBAAkB;IAClB,GAAGQ;EACL,CAAC,GAAGrB,2BAA2B,CAACQ,QAAQ,CAAC;EACzC,OAAOa,kBAAkB;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASN,4BAA4BA,CAACS,KAAK,EAAEC,KAAK,EAAE;EAClD,IAAIC,QAAQ;EACZ,IAAIC,KAAK,CAACC,OAAO,CAACJ,KAAK,CAACC,KAAK,CAAC,CAAC,EAAE;IAC/BC,QAAQ,GAAGF,KAAK,CAACC,KAAK,CAAC;EACzB,CAAC,MAAM;IACLC,QAAQ,GAAG,EAAE;IACbF,KAAK,CAACC,KAAK,CAAC,GAAGC,QAAQ;EACzB;EACA,OAAOA,QAAQ;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}