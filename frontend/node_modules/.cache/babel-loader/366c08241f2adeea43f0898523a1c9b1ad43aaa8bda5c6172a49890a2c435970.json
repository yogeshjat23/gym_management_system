{"ast":null,"code":"import { defineGetter } from \"../../../../../helpers/object.mjs\";\nconst MIXIN_NAME = 'stickyRowsTop';\n\n/**\n * Mixin for the subclasses of `Table` with implementations of\n * helper methods that are related to rows.\n * This mixin is meant to be applied in the subclasses of `Table`\n * that use sticky rendering of the top rows in the vertical axis.\n *\n * @type {object}\n */\nconst stickyRowsTop = {\n  /**\n   * Get the source index of the first rendered row. If no rows are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstRenderedRow() {\n    const totalRows = this.wtSettings.getSetting('totalRows');\n    if (totalRows === 0) {\n      return -1;\n    }\n    return 0;\n  },\n  /**\n   * Get the source index of the first row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstVisibleRow() {\n    return this.getFirstRenderedRow();\n  },\n  /**\n   * Get the source index of the first row partially visible in the viewport. If no rows are partially visible, returns an error code: -1.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstPartiallyVisibleRow() {\n    return this.getFirstRenderedRow();\n  },\n  /**\n   * Get the source index of the last rendered row. If no rows are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastRenderedRow() {\n    return this.getRenderedRowsCount() - 1;\n  },\n  /**\n   * Get the source index of the last row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastVisibleRow() {\n    return this.getLastRenderedRow();\n  },\n  /**\n   * Get the source index of the last row partially visible in the viewport. If no rows are partially visible, returns an error code: -1.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastPartiallyVisibleRow() {\n    return this.getLastRenderedRow();\n  },\n  /**\n   * Get the number of rendered rows.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getRenderedRowsCount() {\n    const totalRows = this.wtSettings.getSetting('totalRows');\n    return Math.min(this.wtSettings.getSetting('fixedRowsTop'), totalRows);\n  },\n  /**\n   * Get the number of fully visible rows in the viewport.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getVisibleRowsCount() {\n    return this.getRenderedRowsCount();\n  },\n  /**\n   * Get the number of rendered column headers.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getColumnHeadersCount() {\n    return this.dataAccessObject.columnHeaders.length;\n  }\n};\ndefineGetter(stickyRowsTop, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nexport default stickyRowsTop;","map":{"version":3,"names":["defineGetter","MIXIN_NAME","stickyRowsTop","getFirstRenderedRow","totalRows","wtSettings","getSetting","getFirstVisibleRow","getFirstPartiallyVisibleRow","getLastRenderedRow","getRenderedRowsCount","getLastVisibleRow","getLastPartiallyVisibleRow","Math","min","getVisibleRowsCount","getColumnHeadersCount","dataAccessObject","columnHeaders","length","writable","enumerable"],"sources":["D:/gym-project/frontend/node_modules/handsontable/3rdparty/walkontable/src/table/mixin/stickyRowsTop.mjs"],"sourcesContent":["import { defineGetter } from \"../../../../../helpers/object.mjs\";\nconst MIXIN_NAME = 'stickyRowsTop';\n\n/**\n * Mixin for the subclasses of `Table` with implementations of\n * helper methods that are related to rows.\n * This mixin is meant to be applied in the subclasses of `Table`\n * that use sticky rendering of the top rows in the vertical axis.\n *\n * @type {object}\n */\nconst stickyRowsTop = {\n  /**\n   * Get the source index of the first rendered row. If no rows are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstRenderedRow() {\n    const totalRows = this.wtSettings.getSetting('totalRows');\n    if (totalRows === 0) {\n      return -1;\n    }\n    return 0;\n  },\n  /**\n   * Get the source index of the first row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstVisibleRow() {\n    return this.getFirstRenderedRow();\n  },\n  /**\n   * Get the source index of the first row partially visible in the viewport. If no rows are partially visible, returns an error code: -1.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstPartiallyVisibleRow() {\n    return this.getFirstRenderedRow();\n  },\n  /**\n   * Get the source index of the last rendered row. If no rows are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastRenderedRow() {\n    return this.getRenderedRowsCount() - 1;\n  },\n  /**\n   * Get the source index of the last row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastVisibleRow() {\n    return this.getLastRenderedRow();\n  },\n  /**\n   * Get the source index of the last row partially visible in the viewport. If no rows are partially visible, returns an error code: -1.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastPartiallyVisibleRow() {\n    return this.getLastRenderedRow();\n  },\n  /**\n   * Get the number of rendered rows.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getRenderedRowsCount() {\n    const totalRows = this.wtSettings.getSetting('totalRows');\n    return Math.min(this.wtSettings.getSetting('fixedRowsTop'), totalRows);\n  },\n  /**\n   * Get the number of fully visible rows in the viewport.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getVisibleRowsCount() {\n    return this.getRenderedRowsCount();\n  },\n  /**\n   * Get the number of rendered column headers.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getColumnHeadersCount() {\n    return this.dataAccessObject.columnHeaders.length;\n  }\n};\ndefineGetter(stickyRowsTop, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nexport default stickyRowsTop;"],"mappings":"AAAA,SAASA,YAAY,QAAQ,mCAAmC;AAChE,MAAMC,UAAU,GAAG,eAAe;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,aAAa,GAAG;EACpB;AACF;AACA;AACA;AACA;AACA;EACEC,mBAAmBA,CAAA,EAAG;IACpB,MAAMC,SAAS,GAAG,IAAI,CAACC,UAAU,CAACC,UAAU,CAAC,WAAW,CAAC;IACzD,IAAIF,SAAS,KAAK,CAAC,EAAE;MACnB,OAAO,CAAC,CAAC;IACX;IACA,OAAO,CAAC;EACV,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;EACEG,kBAAkBA,CAAA,EAAG;IACnB,OAAO,IAAI,CAACJ,mBAAmB,CAAC,CAAC;EACnC,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;EACEK,2BAA2BA,CAAA,EAAG;IAC5B,OAAO,IAAI,CAACL,mBAAmB,CAAC,CAAC;EACnC,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;EACEM,kBAAkBA,CAAA,EAAG;IACnB,OAAO,IAAI,CAACC,oBAAoB,CAAC,CAAC,GAAG,CAAC;EACxC,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,iBAAiBA,CAAA,EAAG;IAClB,OAAO,IAAI,CAACF,kBAAkB,CAAC,CAAC;EAClC,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;EACEG,0BAA0BA,CAAA,EAAG;IAC3B,OAAO,IAAI,CAACH,kBAAkB,CAAC,CAAC;EAClC,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;EACEC,oBAAoBA,CAAA,EAAG;IACrB,MAAMN,SAAS,GAAG,IAAI,CAACC,UAAU,CAACC,UAAU,CAAC,WAAW,CAAC;IACzD,OAAOO,IAAI,CAACC,GAAG,CAAC,IAAI,CAACT,UAAU,CAACC,UAAU,CAAC,cAAc,CAAC,EAAEF,SAAS,CAAC;EACxE,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;EACEW,mBAAmBA,CAAA,EAAG;IACpB,OAAO,IAAI,CAACL,oBAAoB,CAAC,CAAC;EACpC,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;EACEM,qBAAqBA,CAAA,EAAG;IACtB,OAAO,IAAI,CAACC,gBAAgB,CAACC,aAAa,CAACC,MAAM;EACnD;AACF,CAAC;AACDnB,YAAY,CAACE,aAAa,EAAE,YAAY,EAAED,UAAU,EAAE;EACpDmB,QAAQ,EAAE,KAAK;EACfC,UAAU,EAAE;AACd,CAAC,CAAC;AACF,eAAenB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}