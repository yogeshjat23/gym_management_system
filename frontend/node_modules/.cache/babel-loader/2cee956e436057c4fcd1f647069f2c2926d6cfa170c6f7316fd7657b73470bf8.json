{"ast":null,"code":"/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * autoResize - resizes a DOM element to the width and height of another DOM element\n *\n * Copyright 2014, Marcin Warpechowski\n * Licensed under the MIT license\n */\n/* eslint-enable jsdoc/require-description-complete-sentence */\n/**\n * Attaches an event listener to the given element.\n *\n * @param {HTMLElement} element The element to observe.\n * @param {string} eventName The name of the event to listen for.\n * @param {Function} handler The function to call when the event is triggered.\n */\nfunction observe(element, eventName, handler) {\n  element.addEventListener(eventName, handler, false);\n}\n\n/**\n * Removes an event listener from an element.\n *\n * @param {HTMLElement} element The element to remove the event listener from.\n * @param {string} eventName The name of the event to remove.\n * @param {Function} handler The function to remove as a listener.\n */\nfunction unObserve(element, eventName, handler) {\n  element.removeEventListener(eventName, handler, false);\n}\n\n/**\n * Returns the computed style of an element.\n *\n * @param {Element} element The element to get the computed style from.\n * @returns {CSSStyleDeclaration} The computed style of the element.\n */\nfunction getComputedStyle(element) {\n  return element.ownerDocument.defaultView.getComputedStyle(element);\n}\n\n/**\n * @typedef InputElementResizerConfig\n * @property {number} minWidth The minimum width of the element.\n * @property {number} maxWidth The maximum width of the element.\n * @property {number} minHeight The minimum height of the element.\n * @property {number} maxHeight The maximum height of the element.\n */\n/**\n * @typedef InputElementResizer\n * @property {function(HTMLElement, InputElementResizerConfig, boolean): void} init Initializes the resizer.\n * @property {function(): void} resize Resizes the element.\n * @property {function(): void} unObserve Removes the event listeners.\n */\n/**\n * Creates an input element resizer.\n *\n * @param {Document} ownerDocument The document to create the resizer for.\n * @returns {InputElementResizer}\n */\nexport function createInputElementResizer(ownerDocument) {\n  const defaults = {\n    minHeight: 200,\n    maxHeight: 300,\n    minWidth: 100,\n    maxWidth: 300\n  };\n  const body = ownerDocument.body;\n  const textHolder = ownerDocument.createTextNode('');\n  const textContainer = ownerDocument.createElement('span');\n  let observedElement;\n\n  /**\n   * Resizes the element.\n   */\n  function resize() {\n    textHolder.textContent = observedElement.value;\n    // Won't expand the element size for displaying body as for example, `grid`, `inline-grid` or `flex` with\n    // `flex-direction` set as `column`.\n    textContainer.style.position = 'absolute';\n    textContainer.style.fontSize = getComputedStyle(observedElement).fontSize;\n    textContainer.style.fontFamily = getComputedStyle(observedElement).fontFamily;\n    textContainer.style.whiteSpace = 'pre';\n    body.appendChild(textContainer);\n    const width = textContainer.clientWidth + 2;\n    body.removeChild(textContainer);\n    const elementStyle = observedElement.style;\n    elementStyle.height = `${defaults.minHeight}px`;\n    if (defaults.minWidth > width) {\n      elementStyle.width = `${defaults.minWidth}px`;\n    } else if (width > defaults.maxWidth) {\n      elementStyle.width = `${defaults.maxWidth}px`;\n    } else {\n      elementStyle.width = `${width}px`;\n    }\n    const scrollHeight = observedElement.scrollHeight ? observedElement.scrollHeight - 1 : 0;\n    if (defaults.minHeight > scrollHeight) {\n      elementStyle.height = `${defaults.minHeight}px`;\n    } else if (defaults.maxHeight < scrollHeight) {\n      elementStyle.height = `${defaults.maxHeight}px`;\n      elementStyle.overflowY = 'visible';\n    } else {\n      elementStyle.height = `${scrollHeight}px`;\n    }\n  }\n\n  /**\n   * Resizes the element after a delay.\n   */\n  function delayedResize() {\n    ownerDocument.defaultView.setTimeout(resize, 0);\n  }\n\n  /**\n   * Extends the default configuration.\n   *\n   * @param {InputElementResizerConfig} config The configuration to extend the defaults with.\n   */\n  function extendDefaults(config) {\n    if (config && config.minHeight) {\n      if (config.minHeight === 'inherit') {\n        defaults.minHeight = observedElement.clientHeight;\n      } else {\n        const minHeight = parseInt(config.minHeight, 10);\n        if (!isNaN(minHeight)) {\n          defaults.minHeight = minHeight;\n        }\n      }\n    }\n    if (config && config.maxHeight) {\n      if (config.maxHeight === 'inherit') {\n        defaults.maxHeight = observedElement.clientHeight;\n      } else {\n        const maxHeight = parseInt(config.maxHeight, 10);\n        if (!isNaN(maxHeight)) {\n          defaults.maxHeight = maxHeight;\n        }\n      }\n    }\n    if (config && config.minWidth) {\n      if (config.minWidth === 'inherit') {\n        defaults.minWidth = observedElement.clientWidth;\n      } else {\n        const minWidth = parseInt(config.minWidth, 10);\n        if (!isNaN(minWidth)) {\n          defaults.minWidth = minWidth;\n        }\n      }\n    }\n    if (config && config.maxWidth) {\n      if (config.maxWidth === 'inherit') {\n        defaults.maxWidth = observedElement.clientWidth;\n      } else {\n        const maxWidth = parseInt(config.maxWidth, 10);\n        if (!isNaN(maxWidth)) {\n          defaults.maxWidth = maxWidth;\n        }\n      }\n    }\n    if (!textContainer.firstChild) {\n      textContainer.className = 'autoResize';\n      textContainer.style.display = 'inline-block';\n      textContainer.appendChild(textHolder);\n    }\n  }\n\n  /**\n   * Initializes the resizer.\n   *\n   * @param {HTMLElement} elementToObserve The element to observe.\n   * @param {InputElementResizerConfig} config The configuration to extend the defaults with.\n   * @param {boolean} [doObserve=false] Whether to observe the element and resize it on every input change.\n   */\n  function init(elementToObserve, config) {\n    let doObserve = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    observedElement = elementToObserve;\n    extendDefaults(config);\n    if (observedElement.nodeName === 'TEXTAREA') {\n      observedElement.style.resize = 'none';\n      observedElement.style.height = `${defaults.minHeight}px`;\n      observedElement.style.minWidth = `${defaults.minWidth}px`;\n      observedElement.style.maxWidth = `${defaults.maxWidth}px`;\n      observedElement.style.overflowY = 'hidden';\n    }\n    if (doObserve) {\n      observe(observedElement, 'input', resize);\n      // the keydown event is necessary for undo stack to work properly\n      observe(observedElement, 'keydown', delayedResize);\n    }\n    resize();\n  }\n  return {\n    init,\n    resize,\n    unObserve() {\n      unObserve(observedElement, 'input', resize);\n      unObserve(observedElement, 'keydown', delayedResize);\n    }\n  };\n}","map":{"version":3,"names":["observe","element","eventName","handler","addEventListener","unObserve","removeEventListener","getComputedStyle","ownerDocument","defaultView","createInputElementResizer","defaults","minHeight","maxHeight","minWidth","maxWidth","body","textHolder","createTextNode","textContainer","createElement","observedElement","resize","textContent","value","style","position","fontSize","fontFamily","whiteSpace","appendChild","width","clientWidth","removeChild","elementStyle","height","scrollHeight","overflowY","delayedResize","setTimeout","extendDefaults","config","clientHeight","parseInt","isNaN","firstChild","className","display","init","elementToObserve","doObserve","arguments","length","undefined","nodeName"],"sources":["D:/gym-project/frontend/node_modules/handsontable/utils/autoResize.mjs"],"sourcesContent":["/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * autoResize - resizes a DOM element to the width and height of another DOM element\n *\n * Copyright 2014, Marcin Warpechowski\n * Licensed under the MIT license\n */\n/* eslint-enable jsdoc/require-description-complete-sentence */\n/**\n * Attaches an event listener to the given element.\n *\n * @param {HTMLElement} element The element to observe.\n * @param {string} eventName The name of the event to listen for.\n * @param {Function} handler The function to call when the event is triggered.\n */\nfunction observe(element, eventName, handler) {\n  element.addEventListener(eventName, handler, false);\n}\n\n/**\n * Removes an event listener from an element.\n *\n * @param {HTMLElement} element The element to remove the event listener from.\n * @param {string} eventName The name of the event to remove.\n * @param {Function} handler The function to remove as a listener.\n */\nfunction unObserve(element, eventName, handler) {\n  element.removeEventListener(eventName, handler, false);\n}\n\n/**\n * Returns the computed style of an element.\n *\n * @param {Element} element The element to get the computed style from.\n * @returns {CSSStyleDeclaration} The computed style of the element.\n */\nfunction getComputedStyle(element) {\n  return element.ownerDocument.defaultView.getComputedStyle(element);\n}\n\n/**\n * @typedef InputElementResizerConfig\n * @property {number} minWidth The minimum width of the element.\n * @property {number} maxWidth The maximum width of the element.\n * @property {number} minHeight The minimum height of the element.\n * @property {number} maxHeight The maximum height of the element.\n */\n/**\n * @typedef InputElementResizer\n * @property {function(HTMLElement, InputElementResizerConfig, boolean): void} init Initializes the resizer.\n * @property {function(): void} resize Resizes the element.\n * @property {function(): void} unObserve Removes the event listeners.\n */\n/**\n * Creates an input element resizer.\n *\n * @param {Document} ownerDocument The document to create the resizer for.\n * @returns {InputElementResizer}\n */\nexport function createInputElementResizer(ownerDocument) {\n  const defaults = {\n    minHeight: 200,\n    maxHeight: 300,\n    minWidth: 100,\n    maxWidth: 300\n  };\n  const body = ownerDocument.body;\n  const textHolder = ownerDocument.createTextNode('');\n  const textContainer = ownerDocument.createElement('span');\n  let observedElement;\n\n  /**\n   * Resizes the element.\n   */\n  function resize() {\n    textHolder.textContent = observedElement.value;\n    // Won't expand the element size for displaying body as for example, `grid`, `inline-grid` or `flex` with\n    // `flex-direction` set as `column`.\n    textContainer.style.position = 'absolute';\n    textContainer.style.fontSize = getComputedStyle(observedElement).fontSize;\n    textContainer.style.fontFamily = getComputedStyle(observedElement).fontFamily;\n    textContainer.style.whiteSpace = 'pre';\n    body.appendChild(textContainer);\n    const width = textContainer.clientWidth + 2;\n    body.removeChild(textContainer);\n    const elementStyle = observedElement.style;\n    elementStyle.height = `${defaults.minHeight}px`;\n    if (defaults.minWidth > width) {\n      elementStyle.width = `${defaults.minWidth}px`;\n    } else if (width > defaults.maxWidth) {\n      elementStyle.width = `${defaults.maxWidth}px`;\n    } else {\n      elementStyle.width = `${width}px`;\n    }\n    const scrollHeight = observedElement.scrollHeight ? observedElement.scrollHeight - 1 : 0;\n    if (defaults.minHeight > scrollHeight) {\n      elementStyle.height = `${defaults.minHeight}px`;\n    } else if (defaults.maxHeight < scrollHeight) {\n      elementStyle.height = `${defaults.maxHeight}px`;\n      elementStyle.overflowY = 'visible';\n    } else {\n      elementStyle.height = `${scrollHeight}px`;\n    }\n  }\n\n  /**\n   * Resizes the element after a delay.\n   */\n  function delayedResize() {\n    ownerDocument.defaultView.setTimeout(resize, 0);\n  }\n\n  /**\n   * Extends the default configuration.\n   *\n   * @param {InputElementResizerConfig} config The configuration to extend the defaults with.\n   */\n  function extendDefaults(config) {\n    if (config && config.minHeight) {\n      if (config.minHeight === 'inherit') {\n        defaults.minHeight = observedElement.clientHeight;\n      } else {\n        const minHeight = parseInt(config.minHeight, 10);\n        if (!isNaN(minHeight)) {\n          defaults.minHeight = minHeight;\n        }\n      }\n    }\n    if (config && config.maxHeight) {\n      if (config.maxHeight === 'inherit') {\n        defaults.maxHeight = observedElement.clientHeight;\n      } else {\n        const maxHeight = parseInt(config.maxHeight, 10);\n        if (!isNaN(maxHeight)) {\n          defaults.maxHeight = maxHeight;\n        }\n      }\n    }\n    if (config && config.minWidth) {\n      if (config.minWidth === 'inherit') {\n        defaults.minWidth = observedElement.clientWidth;\n      } else {\n        const minWidth = parseInt(config.minWidth, 10);\n        if (!isNaN(minWidth)) {\n          defaults.minWidth = minWidth;\n        }\n      }\n    }\n    if (config && config.maxWidth) {\n      if (config.maxWidth === 'inherit') {\n        defaults.maxWidth = observedElement.clientWidth;\n      } else {\n        const maxWidth = parseInt(config.maxWidth, 10);\n        if (!isNaN(maxWidth)) {\n          defaults.maxWidth = maxWidth;\n        }\n      }\n    }\n    if (!textContainer.firstChild) {\n      textContainer.className = 'autoResize';\n      textContainer.style.display = 'inline-block';\n      textContainer.appendChild(textHolder);\n    }\n  }\n\n  /**\n   * Initializes the resizer.\n   *\n   * @param {HTMLElement} elementToObserve The element to observe.\n   * @param {InputElementResizerConfig} config The configuration to extend the defaults with.\n   * @param {boolean} [doObserve=false] Whether to observe the element and resize it on every input change.\n   */\n  function init(elementToObserve, config) {\n    let doObserve = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    observedElement = elementToObserve;\n    extendDefaults(config);\n    if (observedElement.nodeName === 'TEXTAREA') {\n      observedElement.style.resize = 'none';\n      observedElement.style.height = `${defaults.minHeight}px`;\n      observedElement.style.minWidth = `${defaults.minWidth}px`;\n      observedElement.style.maxWidth = `${defaults.maxWidth}px`;\n      observedElement.style.overflowY = 'hidden';\n    }\n    if (doObserve) {\n      observe(observedElement, 'input', resize);\n      // the keydown event is necessary for undo stack to work properly\n      observe(observedElement, 'keydown', delayedResize);\n    }\n    resize();\n  }\n  return {\n    init,\n    resize,\n    unObserve() {\n      unObserve(observedElement, 'input', resize);\n      unObserve(observedElement, 'keydown', delayedResize);\n    }\n  };\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,OAAOA,CAACC,OAAO,EAAEC,SAAS,EAAEC,OAAO,EAAE;EAC5CF,OAAO,CAACG,gBAAgB,CAACF,SAAS,EAAEC,OAAO,EAAE,KAAK,CAAC;AACrD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,SAASA,CAACJ,OAAO,EAAEC,SAAS,EAAEC,OAAO,EAAE;EAC9CF,OAAO,CAACK,mBAAmB,CAACJ,SAAS,EAAEC,OAAO,EAAE,KAAK,CAAC;AACxD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,gBAAgBA,CAACN,OAAO,EAAE;EACjC,OAAOA,OAAO,CAACO,aAAa,CAACC,WAAW,CAACF,gBAAgB,CAACN,OAAO,CAAC;AACpE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASS,yBAAyBA,CAACF,aAAa,EAAE;EACvD,MAAMG,QAAQ,GAAG;IACfC,SAAS,EAAE,GAAG;IACdC,SAAS,EAAE,GAAG;IACdC,QAAQ,EAAE,GAAG;IACbC,QAAQ,EAAE;EACZ,CAAC;EACD,MAAMC,IAAI,GAAGR,aAAa,CAACQ,IAAI;EAC/B,MAAMC,UAAU,GAAGT,aAAa,CAACU,cAAc,CAAC,EAAE,CAAC;EACnD,MAAMC,aAAa,GAAGX,aAAa,CAACY,aAAa,CAAC,MAAM,CAAC;EACzD,IAAIC,eAAe;;EAEnB;AACF;AACA;EACE,SAASC,MAAMA,CAAA,EAAG;IAChBL,UAAU,CAACM,WAAW,GAAGF,eAAe,CAACG,KAAK;IAC9C;IACA;IACAL,aAAa,CAACM,KAAK,CAACC,QAAQ,GAAG,UAAU;IACzCP,aAAa,CAACM,KAAK,CAACE,QAAQ,GAAGpB,gBAAgB,CAACc,eAAe,CAAC,CAACM,QAAQ;IACzER,aAAa,CAACM,KAAK,CAACG,UAAU,GAAGrB,gBAAgB,CAACc,eAAe,CAAC,CAACO,UAAU;IAC7ET,aAAa,CAACM,KAAK,CAACI,UAAU,GAAG,KAAK;IACtCb,IAAI,CAACc,WAAW,CAACX,aAAa,CAAC;IAC/B,MAAMY,KAAK,GAAGZ,aAAa,CAACa,WAAW,GAAG,CAAC;IAC3ChB,IAAI,CAACiB,WAAW,CAACd,aAAa,CAAC;IAC/B,MAAMe,YAAY,GAAGb,eAAe,CAACI,KAAK;IAC1CS,YAAY,CAACC,MAAM,GAAG,GAAGxB,QAAQ,CAACC,SAAS,IAAI;IAC/C,IAAID,QAAQ,CAACG,QAAQ,GAAGiB,KAAK,EAAE;MAC7BG,YAAY,CAACH,KAAK,GAAG,GAAGpB,QAAQ,CAACG,QAAQ,IAAI;IAC/C,CAAC,MAAM,IAAIiB,KAAK,GAAGpB,QAAQ,CAACI,QAAQ,EAAE;MACpCmB,YAAY,CAACH,KAAK,GAAG,GAAGpB,QAAQ,CAACI,QAAQ,IAAI;IAC/C,CAAC,MAAM;MACLmB,YAAY,CAACH,KAAK,GAAG,GAAGA,KAAK,IAAI;IACnC;IACA,MAAMK,YAAY,GAAGf,eAAe,CAACe,YAAY,GAAGf,eAAe,CAACe,YAAY,GAAG,CAAC,GAAG,CAAC;IACxF,IAAIzB,QAAQ,CAACC,SAAS,GAAGwB,YAAY,EAAE;MACrCF,YAAY,CAACC,MAAM,GAAG,GAAGxB,QAAQ,CAACC,SAAS,IAAI;IACjD,CAAC,MAAM,IAAID,QAAQ,CAACE,SAAS,GAAGuB,YAAY,EAAE;MAC5CF,YAAY,CAACC,MAAM,GAAG,GAAGxB,QAAQ,CAACE,SAAS,IAAI;MAC/CqB,YAAY,CAACG,SAAS,GAAG,SAAS;IACpC,CAAC,MAAM;MACLH,YAAY,CAACC,MAAM,GAAG,GAAGC,YAAY,IAAI;IAC3C;EACF;;EAEA;AACF;AACA;EACE,SAASE,aAAaA,CAAA,EAAG;IACvB9B,aAAa,CAACC,WAAW,CAAC8B,UAAU,CAACjB,MAAM,EAAE,CAAC,CAAC;EACjD;;EAEA;AACF;AACA;AACA;AACA;EACE,SAASkB,cAAcA,CAACC,MAAM,EAAE;IAC9B,IAAIA,MAAM,IAAIA,MAAM,CAAC7B,SAAS,EAAE;MAC9B,IAAI6B,MAAM,CAAC7B,SAAS,KAAK,SAAS,EAAE;QAClCD,QAAQ,CAACC,SAAS,GAAGS,eAAe,CAACqB,YAAY;MACnD,CAAC,MAAM;QACL,MAAM9B,SAAS,GAAG+B,QAAQ,CAACF,MAAM,CAAC7B,SAAS,EAAE,EAAE,CAAC;QAChD,IAAI,CAACgC,KAAK,CAAChC,SAAS,CAAC,EAAE;UACrBD,QAAQ,CAACC,SAAS,GAAGA,SAAS;QAChC;MACF;IACF;IACA,IAAI6B,MAAM,IAAIA,MAAM,CAAC5B,SAAS,EAAE;MAC9B,IAAI4B,MAAM,CAAC5B,SAAS,KAAK,SAAS,EAAE;QAClCF,QAAQ,CAACE,SAAS,GAAGQ,eAAe,CAACqB,YAAY;MACnD,CAAC,MAAM;QACL,MAAM7B,SAAS,GAAG8B,QAAQ,CAACF,MAAM,CAAC5B,SAAS,EAAE,EAAE,CAAC;QAChD,IAAI,CAAC+B,KAAK,CAAC/B,SAAS,CAAC,EAAE;UACrBF,QAAQ,CAACE,SAAS,GAAGA,SAAS;QAChC;MACF;IACF;IACA,IAAI4B,MAAM,IAAIA,MAAM,CAAC3B,QAAQ,EAAE;MAC7B,IAAI2B,MAAM,CAAC3B,QAAQ,KAAK,SAAS,EAAE;QACjCH,QAAQ,CAACG,QAAQ,GAAGO,eAAe,CAACW,WAAW;MACjD,CAAC,MAAM;QACL,MAAMlB,QAAQ,GAAG6B,QAAQ,CAACF,MAAM,CAAC3B,QAAQ,EAAE,EAAE,CAAC;QAC9C,IAAI,CAAC8B,KAAK,CAAC9B,QAAQ,CAAC,EAAE;UACpBH,QAAQ,CAACG,QAAQ,GAAGA,QAAQ;QAC9B;MACF;IACF;IACA,IAAI2B,MAAM,IAAIA,MAAM,CAAC1B,QAAQ,EAAE;MAC7B,IAAI0B,MAAM,CAAC1B,QAAQ,KAAK,SAAS,EAAE;QACjCJ,QAAQ,CAACI,QAAQ,GAAGM,eAAe,CAACW,WAAW;MACjD,CAAC,MAAM;QACL,MAAMjB,QAAQ,GAAG4B,QAAQ,CAACF,MAAM,CAAC1B,QAAQ,EAAE,EAAE,CAAC;QAC9C,IAAI,CAAC6B,KAAK,CAAC7B,QAAQ,CAAC,EAAE;UACpBJ,QAAQ,CAACI,QAAQ,GAAGA,QAAQ;QAC9B;MACF;IACF;IACA,IAAI,CAACI,aAAa,CAAC0B,UAAU,EAAE;MAC7B1B,aAAa,CAAC2B,SAAS,GAAG,YAAY;MACtC3B,aAAa,CAACM,KAAK,CAACsB,OAAO,GAAG,cAAc;MAC5C5B,aAAa,CAACW,WAAW,CAACb,UAAU,CAAC;IACvC;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,SAAS+B,IAAIA,CAACC,gBAAgB,EAAER,MAAM,EAAE;IACtC,IAAIS,SAAS,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK;IACzF9B,eAAe,GAAG4B,gBAAgB;IAClCT,cAAc,CAACC,MAAM,CAAC;IACtB,IAAIpB,eAAe,CAACiC,QAAQ,KAAK,UAAU,EAAE;MAC3CjC,eAAe,CAACI,KAAK,CAACH,MAAM,GAAG,MAAM;MACrCD,eAAe,CAACI,KAAK,CAACU,MAAM,GAAG,GAAGxB,QAAQ,CAACC,SAAS,IAAI;MACxDS,eAAe,CAACI,KAAK,CAACX,QAAQ,GAAG,GAAGH,QAAQ,CAACG,QAAQ,IAAI;MACzDO,eAAe,CAACI,KAAK,CAACV,QAAQ,GAAG,GAAGJ,QAAQ,CAACI,QAAQ,IAAI;MACzDM,eAAe,CAACI,KAAK,CAACY,SAAS,GAAG,QAAQ;IAC5C;IACA,IAAIa,SAAS,EAAE;MACblD,OAAO,CAACqB,eAAe,EAAE,OAAO,EAAEC,MAAM,CAAC;MACzC;MACAtB,OAAO,CAACqB,eAAe,EAAE,SAAS,EAAEiB,aAAa,CAAC;IACpD;IACAhB,MAAM,CAAC,CAAC;EACV;EACA,OAAO;IACL0B,IAAI;IACJ1B,MAAM;IACNjB,SAASA,CAAA,EAAG;MACVA,SAAS,CAACgB,eAAe,EAAE,OAAO,EAAEC,MAAM,CAAC;MAC3CjB,SAAS,CAACgB,eAAe,EAAE,SAAS,EAAEiB,aAAa,CAAC;IACtD;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}