{"ast":null,"code":"function _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport { ViewportBaseCalculator } from \"./viewportBase.mjs\";\nexport const DEFAULT_WIDTH = 50;\n\n/**\n * @typedef {object} ViewportColumnsCalculatorOptions\n * @property {Map<string, ViewportBaseCalculator>} calculationTypes The calculation types to be performed.\n * @property {number} viewportWidth Width of the viewport.\n * @property {number} scrollOffset Current horizontal scroll position of the viewport.\n * @property {number} totalColumns Total number of columns.\n * @property {Function} columnWidthFn Function that returns the width of the column at a given index (in px).\n * @property {Function} overrideFn Function that allows to adjust the `startRow` and `endRow` parameters.\n * @property {string} inlineStartOffset Inline-start offset of the parent container.\n */\n/**\n * Calculates indexes of columns to render OR columns that are visible OR partially visible in the viewport.\n *\n * @class ViewportColumnsCalculator\n */\nexport class ViewportColumnsCalculator extends ViewportBaseCalculator {\n  /**\n   * @param {ViewportColumnsCalculatorOptions} options Object with all options specified for column viewport calculation.\n   */\n  constructor(_ref) {\n    let {\n      calculationTypes,\n      viewportWidth,\n      scrollOffset,\n      totalColumns,\n      columnWidthFn,\n      overrideFn,\n      inlineStartOffset\n    } = _ref;\n    super(calculationTypes);\n    _defineProperty(this, \"viewportWidth\", 0);\n    _defineProperty(this, \"scrollOffset\", 0);\n    _defineProperty(this, \"zeroBasedScrollOffset\", 0);\n    _defineProperty(this, \"totalColumns\", 0);\n    _defineProperty(this, \"columnWidthFn\", null);\n    _defineProperty(this, \"columnWidth\", 0);\n    _defineProperty(this, \"overrideFn\", null);\n    _defineProperty(this, \"inlineStartOffset\", 0);\n    _defineProperty(this, \"totalCalculatedWidth\", 0);\n    _defineProperty(this, \"startPositions\", []);\n    _defineProperty(this, \"needReverse\", true);\n    this.viewportWidth = viewportWidth;\n    this.scrollOffset = scrollOffset;\n    this.zeroBasedScrollOffset = Math.max(scrollOffset, 0);\n    this.totalColumns = totalColumns;\n    this.columnWidthFn = columnWidthFn;\n    this.overrideFn = overrideFn;\n    this.inlineStartOffset = inlineStartOffset;\n    this.calculate();\n  }\n\n  /**\n   * Calculates viewport.\n   */\n  calculate() {\n    this._initialize(this);\n    for (let column = 0; column < this.totalColumns; column++) {\n      this.columnWidth = this.getColumnWidth(column);\n      this._process(column, this);\n      this.startPositions.push(this.totalCalculatedWidth);\n      this.totalCalculatedWidth += this.columnWidth;\n      if (this.totalCalculatedWidth >= this.zeroBasedScrollOffset + this.viewportWidth) {\n        this.needReverse = false;\n        break;\n      }\n    }\n    this._finalize(this);\n  }\n\n  /**\n   * Gets the column width at the specified column index.\n   *\n   * @param {number} column Column index.\n   * @returns {number}\n   */\n  getColumnWidth(column) {\n    const width = this.columnWidthFn(column);\n    if (isNaN(width)) {\n      return DEFAULT_WIDTH;\n    }\n    return width;\n  }\n}","map":{"version":3,"names":["_defineProperty","e","r","t","_toPropertyKey","Object","defineProperty","value","enumerable","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","ViewportBaseCalculator","DEFAULT_WIDTH","ViewportColumnsCalculator","constructor","_ref","calculationTypes","viewportWidth","scrollOffset","totalColumns","columnWidthFn","overrideFn","inlineStartOffset","zeroBasedScrollOffset","Math","max","calculate","_initialize","column","columnWidth","getColumnWidth","_process","startPositions","push","totalCalculatedWidth","needReverse","_finalize","width","isNaN"],"sources":["D:/gym-project/frontend/node_modules/handsontable/3rdparty/walkontable/src/calculator/viewportColumns.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport { ViewportBaseCalculator } from \"./viewportBase.mjs\";\nexport const DEFAULT_WIDTH = 50;\n\n/**\n * @typedef {object} ViewportColumnsCalculatorOptions\n * @property {Map<string, ViewportBaseCalculator>} calculationTypes The calculation types to be performed.\n * @property {number} viewportWidth Width of the viewport.\n * @property {number} scrollOffset Current horizontal scroll position of the viewport.\n * @property {number} totalColumns Total number of columns.\n * @property {Function} columnWidthFn Function that returns the width of the column at a given index (in px).\n * @property {Function} overrideFn Function that allows to adjust the `startRow` and `endRow` parameters.\n * @property {string} inlineStartOffset Inline-start offset of the parent container.\n */\n/**\n * Calculates indexes of columns to render OR columns that are visible OR partially visible in the viewport.\n *\n * @class ViewportColumnsCalculator\n */\nexport class ViewportColumnsCalculator extends ViewportBaseCalculator {\n  /**\n   * @param {ViewportColumnsCalculatorOptions} options Object with all options specified for column viewport calculation.\n   */\n  constructor(_ref) {\n    let {\n      calculationTypes,\n      viewportWidth,\n      scrollOffset,\n      totalColumns,\n      columnWidthFn,\n      overrideFn,\n      inlineStartOffset\n    } = _ref;\n    super(calculationTypes);\n    _defineProperty(this, \"viewportWidth\", 0);\n    _defineProperty(this, \"scrollOffset\", 0);\n    _defineProperty(this, \"zeroBasedScrollOffset\", 0);\n    _defineProperty(this, \"totalColumns\", 0);\n    _defineProperty(this, \"columnWidthFn\", null);\n    _defineProperty(this, \"columnWidth\", 0);\n    _defineProperty(this, \"overrideFn\", null);\n    _defineProperty(this, \"inlineStartOffset\", 0);\n    _defineProperty(this, \"totalCalculatedWidth\", 0);\n    _defineProperty(this, \"startPositions\", []);\n    _defineProperty(this, \"needReverse\", true);\n    this.viewportWidth = viewportWidth;\n    this.scrollOffset = scrollOffset;\n    this.zeroBasedScrollOffset = Math.max(scrollOffset, 0);\n    this.totalColumns = totalColumns;\n    this.columnWidthFn = columnWidthFn;\n    this.overrideFn = overrideFn;\n    this.inlineStartOffset = inlineStartOffset;\n    this.calculate();\n  }\n\n  /**\n   * Calculates viewport.\n   */\n  calculate() {\n    this._initialize(this);\n    for (let column = 0; column < this.totalColumns; column++) {\n      this.columnWidth = this.getColumnWidth(column);\n      this._process(column, this);\n      this.startPositions.push(this.totalCalculatedWidth);\n      this.totalCalculatedWidth += this.columnWidth;\n      if (this.totalCalculatedWidth >= this.zeroBasedScrollOffset + this.viewportWidth) {\n        this.needReverse = false;\n        break;\n      }\n    }\n    this._finalize(this);\n  }\n\n  /**\n   * Gets the column width at the specified column index.\n   *\n   * @param {number} column Column index.\n   * @returns {number}\n   */\n  getColumnWidth(column) {\n    const width = this.columnWidthFn(column);\n    if (isNaN(width)) {\n      return DEFAULT_WIDTH;\n    }\n    return width;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}