{"ast":null,"code":"import { mixin } from \"../../../../helpers/object.mjs\";\nimport localHooks from \"../../../../mixins/localHooks.mjs\";\n/**\n * The Selection class allows highlighting (by applying CSS class) the table's cells or headers\n * and setting up the borders if defined in the settings.\n *\n * The Selection coordinates may point to the cells (positive numbers) or headers (negative numbers).\n *\n * @class Selection\n */\nclass Selection {\n  /**\n   * @param {object} settings The selection settings object. @todo type.\n   * @param {CellRange} cellRange The cell range instance.\n   */\n  constructor(settings, cellRange) {\n    this.settings = settings;\n    this.cellRange = cellRange || null;\n  }\n\n  /**\n   * Checks if selection is empty.\n   *\n   * @returns {boolean}\n   */\n  isEmpty() {\n    return this.cellRange === null;\n  }\n\n  /**\n   * Adds a cell coords to the selection.\n   *\n   * @param {CellCoords} coords The cell coordinates to add.\n   * @returns {Selection}\n   */\n  add(coords) {\n    if (this.isEmpty()) {\n      this.cellRange = this.settings.createCellRange(coords);\n    } else {\n      this.cellRange.expand(coords);\n    }\n    return this;\n  }\n\n  /**\n   * If selection range from or to property equals oldCoords, replace it with newCoords. Return boolean\n   * information about success.\n   *\n   * @param {CellCoords} oldCoords An old cell coordinates to replace.\n   * @param {CellCoords} newCoords The new cell coordinates.\n   * @returns {boolean}\n   */\n  replace(oldCoords, newCoords) {\n    if (!this.isEmpty()) {\n      if (this.cellRange.from.isEqual(oldCoords)) {\n        this.cellRange.from = newCoords;\n        return true;\n      }\n      if (this.cellRange.to.isEqual(oldCoords)) {\n        this.cellRange.to = newCoords;\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Clears selection.\n   *\n   * @returns {Selection}\n   */\n  clear() {\n    this.cellRange = null;\n    return this;\n  }\n\n  /**\n   * Returns the top left (or top right in RTL) and bottom right (or bottom left in RTL) selection coordinates.\n   *\n   * @returns {number[]} Returns array of coordinates for example `[1, 1, 5, 5]`.\n   */\n  getCorners() {\n    const topStart = this.cellRange.getOuterTopStartCorner();\n    const bottomEnd = this.cellRange.getOuterBottomEndCorner();\n    return [topStart.row, topStart.col, bottomEnd.row, bottomEnd.col];\n  }\n\n  /**\n   * Destroys the instance.\n   */\n  destroy() {\n    this.runLocalHooks('destroy');\n  }\n}\nmixin(Selection, localHooks);\nexport default Selection;","map":{"version":3,"names":["mixin","localHooks","Selection","constructor","settings","cellRange","isEmpty","add","coords","createCellRange","expand","replace","oldCoords","newCoords","from","isEqual","to","clear","getCorners","topStart","getOuterTopStartCorner","bottomEnd","getOuterBottomEndCorner","row","col","destroy","runLocalHooks"],"sources":["D:/gym-project/frontend/node_modules/handsontable/3rdparty/walkontable/src/selection/selection.mjs"],"sourcesContent":["import { mixin } from \"../../../../helpers/object.mjs\";\nimport localHooks from \"../../../../mixins/localHooks.mjs\";\n/**\n * The Selection class allows highlighting (by applying CSS class) the table's cells or headers\n * and setting up the borders if defined in the settings.\n *\n * The Selection coordinates may point to the cells (positive numbers) or headers (negative numbers).\n *\n * @class Selection\n */\nclass Selection {\n  /**\n   * @param {object} settings The selection settings object. @todo type.\n   * @param {CellRange} cellRange The cell range instance.\n   */\n  constructor(settings, cellRange) {\n    this.settings = settings;\n    this.cellRange = cellRange || null;\n  }\n\n  /**\n   * Checks if selection is empty.\n   *\n   * @returns {boolean}\n   */\n  isEmpty() {\n    return this.cellRange === null;\n  }\n\n  /**\n   * Adds a cell coords to the selection.\n   *\n   * @param {CellCoords} coords The cell coordinates to add.\n   * @returns {Selection}\n   */\n  add(coords) {\n    if (this.isEmpty()) {\n      this.cellRange = this.settings.createCellRange(coords);\n    } else {\n      this.cellRange.expand(coords);\n    }\n    return this;\n  }\n\n  /**\n   * If selection range from or to property equals oldCoords, replace it with newCoords. Return boolean\n   * information about success.\n   *\n   * @param {CellCoords} oldCoords An old cell coordinates to replace.\n   * @param {CellCoords} newCoords The new cell coordinates.\n   * @returns {boolean}\n   */\n  replace(oldCoords, newCoords) {\n    if (!this.isEmpty()) {\n      if (this.cellRange.from.isEqual(oldCoords)) {\n        this.cellRange.from = newCoords;\n        return true;\n      }\n      if (this.cellRange.to.isEqual(oldCoords)) {\n        this.cellRange.to = newCoords;\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Clears selection.\n   *\n   * @returns {Selection}\n   */\n  clear() {\n    this.cellRange = null;\n    return this;\n  }\n\n  /**\n   * Returns the top left (or top right in RTL) and bottom right (or bottom left in RTL) selection coordinates.\n   *\n   * @returns {number[]} Returns array of coordinates for example `[1, 1, 5, 5]`.\n   */\n  getCorners() {\n    const topStart = this.cellRange.getOuterTopStartCorner();\n    const bottomEnd = this.cellRange.getOuterBottomEndCorner();\n    return [topStart.row, topStart.col, bottomEnd.row, bottomEnd.col];\n  }\n\n  /**\n   * Destroys the instance.\n   */\n  destroy() {\n    this.runLocalHooks('destroy');\n  }\n}\nmixin(Selection, localHooks);\nexport default Selection;"],"mappings":"AAAA,SAASA,KAAK,QAAQ,gCAAgC;AACtD,OAAOC,UAAU,MAAM,mCAAmC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,CAAC;EACd;AACF;AACA;AACA;EACEC,WAAWA,CAACC,QAAQ,EAAEC,SAAS,EAAE;IAC/B,IAAI,CAACD,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,SAAS,GAAGA,SAAS,IAAI,IAAI;EACpC;;EAEA;AACF;AACA;AACA;AACA;EACEC,OAAOA,CAAA,EAAG;IACR,OAAO,IAAI,CAACD,SAAS,KAAK,IAAI;EAChC;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEE,GAAGA,CAACC,MAAM,EAAE;IACV,IAAI,IAAI,CAACF,OAAO,CAAC,CAAC,EAAE;MAClB,IAAI,CAACD,SAAS,GAAG,IAAI,CAACD,QAAQ,CAACK,eAAe,CAACD,MAAM,CAAC;IACxD,CAAC,MAAM;MACL,IAAI,CAACH,SAAS,CAACK,MAAM,CAACF,MAAM,CAAC;IAC/B;IACA,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEG,OAAOA,CAACC,SAAS,EAAEC,SAAS,EAAE;IAC5B,IAAI,CAAC,IAAI,CAACP,OAAO,CAAC,CAAC,EAAE;MACnB,IAAI,IAAI,CAACD,SAAS,CAACS,IAAI,CAACC,OAAO,CAACH,SAAS,CAAC,EAAE;QAC1C,IAAI,CAACP,SAAS,CAACS,IAAI,GAAGD,SAAS;QAC/B,OAAO,IAAI;MACb;MACA,IAAI,IAAI,CAACR,SAAS,CAACW,EAAE,CAACD,OAAO,CAACH,SAAS,CAAC,EAAE;QACxC,IAAI,CAACP,SAAS,CAACW,EAAE,GAAGH,SAAS;QAC7B,OAAO,IAAI;MACb;IACF;IACA,OAAO,KAAK;EACd;;EAEA;AACF;AACA;AACA;AACA;EACEI,KAAKA,CAAA,EAAG;IACN,IAAI,CAACZ,SAAS,GAAG,IAAI;IACrB,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;EACEa,UAAUA,CAAA,EAAG;IACX,MAAMC,QAAQ,GAAG,IAAI,CAACd,SAAS,CAACe,sBAAsB,CAAC,CAAC;IACxD,MAAMC,SAAS,GAAG,IAAI,CAAChB,SAAS,CAACiB,uBAAuB,CAAC,CAAC;IAC1D,OAAO,CAACH,QAAQ,CAACI,GAAG,EAAEJ,QAAQ,CAACK,GAAG,EAAEH,SAAS,CAACE,GAAG,EAAEF,SAAS,CAACG,GAAG,CAAC;EACnE;;EAEA;AACF;AACA;EACEC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,aAAa,CAAC,SAAS,CAAC;EAC/B;AACF;AACA1B,KAAK,CAACE,SAAS,EAAED,UAAU,CAAC;AAC5B,eAAeC,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}