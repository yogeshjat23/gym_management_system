{"ast":null,"code":"function _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport { arrayEach } from \"../../helpers/array.mjs\";\n/**\n * @private\n * @class DataFilter\n */\nclass DataFilter {\n  constructor(conditionCollection) {\n    let columnDataFactory = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => [];\n    /**\n     * Reference to the instance of {ConditionCollection}.\n     *\n     * @type {ConditionCollection}\n     */\n    _defineProperty(this, \"conditionCollection\", void 0);\n    /**\n     * Function which provide source data factory for specified column.\n     *\n     * @type {Function}\n     */\n    _defineProperty(this, \"columnDataFactory\", void 0);\n    this.conditionCollection = conditionCollection;\n    this.columnDataFactory = columnDataFactory;\n  }\n\n  /**\n   * Filter data based on the conditions collection.\n   *\n   * @returns {Array}\n   */\n  filter() {\n    let filteredData = [];\n    arrayEach(this.conditionCollection.getFilteredColumns(), (physicalColumn, index) => {\n      let columnData = this.columnDataFactory(physicalColumn);\n      if (index) {\n        columnData = this._getIntersectData(columnData, filteredData);\n      }\n      filteredData = this.filterByColumn(physicalColumn, columnData);\n    });\n    return filteredData;\n  }\n\n  /**\n   * Filter data based on specified physical column index.\n   *\n   * @param {number} column The physical column index.\n   * @param {Array} [dataSource] Data source as array of objects with `value` and `meta` keys (e.g. `{value: 'foo', meta: {}}`).\n   * @returns {Array} Returns filtered data.\n   */\n  filterByColumn(column) {\n    let dataSource = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    const filteredData = [];\n    arrayEach(dataSource, dataRow => {\n      if (dataRow !== undefined && this.conditionCollection.isMatch(dataRow, column)) {\n        filteredData.push(dataRow);\n      }\n    });\n    return filteredData;\n  }\n\n  /**\n   * Intersect data.\n   *\n   * @private\n   * @param {Array} data The data to intersect.\n   * @param {Array} needles The collection intersected rows with the data.\n   * @returns {Array}\n   */\n  _getIntersectData(data, needles) {\n    const result = [];\n    arrayEach(needles, needleRow => {\n      const row = needleRow.meta.visualRow;\n      if (data[row] !== undefined) {\n        result[row] = data[row];\n      }\n    });\n    return result;\n  }\n}\nexport default DataFilter;","map":{"version":3,"names":["_defineProperty","e","r","t","_toPropertyKey","Object","defineProperty","value","enumerable","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","arrayEach","DataFilter","constructor","conditionCollection","columnDataFactory","arguments","length","undefined","filter","filteredData","getFilteredColumns","physicalColumn","index","columnData","_getIntersectData","filterByColumn","column","dataSource","dataRow","isMatch","push","data","needles","result","needleRow","row","meta","visualRow"],"sources":["D:/gym-project/frontend/node_modules/handsontable/plugins/filters/dataFilter.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport { arrayEach } from \"../../helpers/array.mjs\";\n/**\n * @private\n * @class DataFilter\n */\nclass DataFilter {\n  constructor(conditionCollection) {\n    let columnDataFactory = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => [];\n    /**\n     * Reference to the instance of {ConditionCollection}.\n     *\n     * @type {ConditionCollection}\n     */\n    _defineProperty(this, \"conditionCollection\", void 0);\n    /**\n     * Function which provide source data factory for specified column.\n     *\n     * @type {Function}\n     */\n    _defineProperty(this, \"columnDataFactory\", void 0);\n    this.conditionCollection = conditionCollection;\n    this.columnDataFactory = columnDataFactory;\n  }\n\n  /**\n   * Filter data based on the conditions collection.\n   *\n   * @returns {Array}\n   */\n  filter() {\n    let filteredData = [];\n    arrayEach(this.conditionCollection.getFilteredColumns(), (physicalColumn, index) => {\n      let columnData = this.columnDataFactory(physicalColumn);\n      if (index) {\n        columnData = this._getIntersectData(columnData, filteredData);\n      }\n      filteredData = this.filterByColumn(physicalColumn, columnData);\n    });\n    return filteredData;\n  }\n\n  /**\n   * Filter data based on specified physical column index.\n   *\n   * @param {number} column The physical column index.\n   * @param {Array} [dataSource] Data source as array of objects with `value` and `meta` keys (e.g. `{value: 'foo', meta: {}}`).\n   * @returns {Array} Returns filtered data.\n   */\n  filterByColumn(column) {\n    let dataSource = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    const filteredData = [];\n    arrayEach(dataSource, dataRow => {\n      if (dataRow !== undefined && this.conditionCollection.isMatch(dataRow, column)) {\n        filteredData.push(dataRow);\n      }\n    });\n    return filteredData;\n  }\n\n  /**\n   * Intersect data.\n   *\n   * @private\n   * @param {Array} data The data to intersect.\n   * @param {Array} needles The collection intersected rows with the data.\n   * @returns {Array}\n   */\n  _getIntersectData(data, needles) {\n    const result = [];\n    arrayEach(needles, needleRow => {\n      const row = needleRow.meta.visualRow;\n      if (data[row] !== undefined) {\n        result[row] = data[row];\n      }\n    });\n    return result;\n  }\n}\nexport default DataFilter;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}