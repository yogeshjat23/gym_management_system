{"ast":null,"code":"import { DO_NOT_SWAP, FIRST_BEFORE_SECOND, FIRST_AFTER_SECOND } from \"../sortService/index.mjs\";\nimport { compareFunctionFactory as defaultCompareFunctionFactory } from \"../sortFunction/default.mjs\";\nimport { isEmpty } from \"../../../helpers/mixed.mjs\";\n/**\n * Checkbox sorting compare function factory. Method get as parameters `sortOrder` and `columnMeta` and return compare function.\n *\n * @param {string} sortOrder Sort order (`asc` for ascending, `desc` for descending).\n * @param {object} columnMeta Column meta object.\n * @param {object} columnPluginSettings Plugin settings for the column.\n * @returns {Function} The compare function.\n */\nexport function compareFunctionFactory(sortOrder, columnMeta, columnPluginSettings) {\n  const checkedTemplate = columnMeta.checkedTemplate;\n  const uncheckedTemplate = columnMeta.uncheckedTemplate;\n  const {\n    sortEmptyCells\n  } = columnPluginSettings;\n  return function (value, nextValue) {\n    const isEmptyValue = isEmpty(value);\n    const isEmptyNextValue = isEmpty(nextValue);\n    const unifiedValue = isEmptyValue ? uncheckedTemplate : value;\n    const unifiedNextValue = isEmptyNextValue ? uncheckedTemplate : nextValue;\n    const isValueFromTemplate = unifiedValue === uncheckedTemplate || unifiedValue === checkedTemplate;\n    const isNextValueFromTemplate = unifiedNextValue === uncheckedTemplate || unifiedNextValue === checkedTemplate;\n\n    // As an empty cell we recognize cells with undefined, null and '' values.\n    if (sortEmptyCells === false) {\n      if (isEmptyValue && isEmptyNextValue === false) {\n        return FIRST_AFTER_SECOND;\n      }\n      if (isEmptyValue === false && isEmptyNextValue) {\n        return FIRST_BEFORE_SECOND;\n      }\n    }\n\n    // 1st value === #BAD_VALUE#\n    if (isValueFromTemplate === false && isNextValueFromTemplate) {\n      return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\n    }\n\n    // 2nd value === #BAD_VALUE#\n    if (isValueFromTemplate && isNextValueFromTemplate === false) {\n      return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\n    }\n\n    // 1st value === #BAD_VALUE# && 2nd value === #BAD_VALUE#\n    if (isValueFromTemplate === false && isNextValueFromTemplate === false) {\n      // Sorting by values (not just by visual representation).\n      return defaultCompareFunctionFactory(sortOrder, columnMeta, columnPluginSettings)(value, nextValue);\n    }\n    if (unifiedValue === uncheckedTemplate && unifiedNextValue === checkedTemplate) {\n      return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\n    }\n    if (unifiedValue === checkedTemplate && unifiedNextValue === uncheckedTemplate) {\n      return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\n    }\n    return DO_NOT_SWAP;\n  };\n}\nexport const COLUMN_DATA_TYPE = 'checkbox';","map":{"version":3,"names":["DO_NOT_SWAP","FIRST_BEFORE_SECOND","FIRST_AFTER_SECOND","compareFunctionFactory","defaultCompareFunctionFactory","isEmpty","sortOrder","columnMeta","columnPluginSettings","checkedTemplate","uncheckedTemplate","sortEmptyCells","value","nextValue","isEmptyValue","isEmptyNextValue","unifiedValue","unifiedNextValue","isValueFromTemplate","isNextValueFromTemplate","COLUMN_DATA_TYPE"],"sources":["D:/gym-project/frontend/node_modules/handsontable/plugins/columnSorting/sortFunction/checkbox.mjs"],"sourcesContent":["import { DO_NOT_SWAP, FIRST_BEFORE_SECOND, FIRST_AFTER_SECOND } from \"../sortService/index.mjs\";\nimport { compareFunctionFactory as defaultCompareFunctionFactory } from \"../sortFunction/default.mjs\";\nimport { isEmpty } from \"../../../helpers/mixed.mjs\";\n/**\n * Checkbox sorting compare function factory. Method get as parameters `sortOrder` and `columnMeta` and return compare function.\n *\n * @param {string} sortOrder Sort order (`asc` for ascending, `desc` for descending).\n * @param {object} columnMeta Column meta object.\n * @param {object} columnPluginSettings Plugin settings for the column.\n * @returns {Function} The compare function.\n */\nexport function compareFunctionFactory(sortOrder, columnMeta, columnPluginSettings) {\n  const checkedTemplate = columnMeta.checkedTemplate;\n  const uncheckedTemplate = columnMeta.uncheckedTemplate;\n  const {\n    sortEmptyCells\n  } = columnPluginSettings;\n  return function (value, nextValue) {\n    const isEmptyValue = isEmpty(value);\n    const isEmptyNextValue = isEmpty(nextValue);\n    const unifiedValue = isEmptyValue ? uncheckedTemplate : value;\n    const unifiedNextValue = isEmptyNextValue ? uncheckedTemplate : nextValue;\n    const isValueFromTemplate = unifiedValue === uncheckedTemplate || unifiedValue === checkedTemplate;\n    const isNextValueFromTemplate = unifiedNextValue === uncheckedTemplate || unifiedNextValue === checkedTemplate;\n\n    // As an empty cell we recognize cells with undefined, null and '' values.\n    if (sortEmptyCells === false) {\n      if (isEmptyValue && isEmptyNextValue === false) {\n        return FIRST_AFTER_SECOND;\n      }\n      if (isEmptyValue === false && isEmptyNextValue) {\n        return FIRST_BEFORE_SECOND;\n      }\n    }\n\n    // 1st value === #BAD_VALUE#\n    if (isValueFromTemplate === false && isNextValueFromTemplate) {\n      return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\n    }\n\n    // 2nd value === #BAD_VALUE#\n    if (isValueFromTemplate && isNextValueFromTemplate === false) {\n      return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\n    }\n\n    // 1st value === #BAD_VALUE# && 2nd value === #BAD_VALUE#\n    if (isValueFromTemplate === false && isNextValueFromTemplate === false) {\n      // Sorting by values (not just by visual representation).\n      return defaultCompareFunctionFactory(sortOrder, columnMeta, columnPluginSettings)(value, nextValue);\n    }\n    if (unifiedValue === uncheckedTemplate && unifiedNextValue === checkedTemplate) {\n      return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\n    }\n    if (unifiedValue === checkedTemplate && unifiedNextValue === uncheckedTemplate) {\n      return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\n    }\n    return DO_NOT_SWAP;\n  };\n}\nexport const COLUMN_DATA_TYPE = 'checkbox';"],"mappings":"AAAA,SAASA,WAAW,EAAEC,mBAAmB,EAAEC,kBAAkB,QAAQ,0BAA0B;AAC/F,SAASC,sBAAsB,IAAIC,6BAA6B,QAAQ,6BAA6B;AACrG,SAASC,OAAO,QAAQ,4BAA4B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASF,sBAAsBA,CAACG,SAAS,EAAEC,UAAU,EAAEC,oBAAoB,EAAE;EAClF,MAAMC,eAAe,GAAGF,UAAU,CAACE,eAAe;EAClD,MAAMC,iBAAiB,GAAGH,UAAU,CAACG,iBAAiB;EACtD,MAAM;IACJC;EACF,CAAC,GAAGH,oBAAoB;EACxB,OAAO,UAAUI,KAAK,EAAEC,SAAS,EAAE;IACjC,MAAMC,YAAY,GAAGT,OAAO,CAACO,KAAK,CAAC;IACnC,MAAMG,gBAAgB,GAAGV,OAAO,CAACQ,SAAS,CAAC;IAC3C,MAAMG,YAAY,GAAGF,YAAY,GAAGJ,iBAAiB,GAAGE,KAAK;IAC7D,MAAMK,gBAAgB,GAAGF,gBAAgB,GAAGL,iBAAiB,GAAGG,SAAS;IACzE,MAAMK,mBAAmB,GAAGF,YAAY,KAAKN,iBAAiB,IAAIM,YAAY,KAAKP,eAAe;IAClG,MAAMU,uBAAuB,GAAGF,gBAAgB,KAAKP,iBAAiB,IAAIO,gBAAgB,KAAKR,eAAe;;IAE9G;IACA,IAAIE,cAAc,KAAK,KAAK,EAAE;MAC5B,IAAIG,YAAY,IAAIC,gBAAgB,KAAK,KAAK,EAAE;QAC9C,OAAOb,kBAAkB;MAC3B;MACA,IAAIY,YAAY,KAAK,KAAK,IAAIC,gBAAgB,EAAE;QAC9C,OAAOd,mBAAmB;MAC5B;IACF;;IAEA;IACA,IAAIiB,mBAAmB,KAAK,KAAK,IAAIC,uBAAuB,EAAE;MAC5D,OAAOb,SAAS,KAAK,KAAK,GAAGL,mBAAmB,GAAGC,kBAAkB;IACvE;;IAEA;IACA,IAAIgB,mBAAmB,IAAIC,uBAAuB,KAAK,KAAK,EAAE;MAC5D,OAAOb,SAAS,KAAK,KAAK,GAAGJ,kBAAkB,GAAGD,mBAAmB;IACvE;;IAEA;IACA,IAAIiB,mBAAmB,KAAK,KAAK,IAAIC,uBAAuB,KAAK,KAAK,EAAE;MACtE;MACA,OAAOf,6BAA6B,CAACE,SAAS,EAAEC,UAAU,EAAEC,oBAAoB,CAAC,CAACI,KAAK,EAAEC,SAAS,CAAC;IACrG;IACA,IAAIG,YAAY,KAAKN,iBAAiB,IAAIO,gBAAgB,KAAKR,eAAe,EAAE;MAC9E,OAAOH,SAAS,KAAK,KAAK,GAAGL,mBAAmB,GAAGC,kBAAkB;IACvE;IACA,IAAIc,YAAY,KAAKP,eAAe,IAAIQ,gBAAgB,KAAKP,iBAAiB,EAAE;MAC9E,OAAOJ,SAAS,KAAK,KAAK,GAAGJ,kBAAkB,GAAGD,mBAAmB;IACvE;IACA,OAAOD,WAAW;EACpB,CAAC;AACH;AACA,OAAO,MAAMoB,gBAAgB,GAAG,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}