{"ast":null,"code":"import RowHeadersRenderer from \"./rowHeaders.mjs\";\nimport ColumnHeadersRenderer from \"./columnHeaders.mjs\";\nimport ColGroupRenderer from \"./colGroup.mjs\";\nimport RowsRenderer from \"./rows.mjs\";\nimport CellsRenderer from \"./cells.mjs\";\nimport TableRenderer from \"./table.mjs\";\n/**\n * Content renderer.\n *\n * @class Renderer\n */\nclass Renderer {\n  constructor() {\n    let {\n      TABLE,\n      THEAD,\n      COLGROUP,\n      TBODY,\n      rowUtils,\n      columnUtils,\n      cellRenderer\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    /**\n     * General renderer class used to render Walkontable content on screen.\n     *\n     * @type {TableRenderer}\n     */\n    this.renderer = new TableRenderer(TABLE, {\n      cellRenderer\n    });\n    this.renderer.setRenderers({\n      rowHeaders: new RowHeadersRenderer(),\n      columnHeaders: new ColumnHeadersRenderer(THEAD),\n      colGroup: new ColGroupRenderer(COLGROUP),\n      rows: new RowsRenderer(TBODY),\n      cells: new CellsRenderer()\n    });\n    this.renderer.setAxisUtils(rowUtils, columnUtils);\n  }\n\n  /**\n   * Sets the overlay that is currently rendered. If `null` is provided, the master overlay is set.\n   *\n   * @param {'inline_start'|'top'|'top_inline_start_corner'|'bottom'|'bottom_inline_start_corner'|'master'} overlayName The overlay name.\n   * @returns {Renderer}\n   */\n  setActiveOverlayName(overlayName) {\n    this.renderer.setActiveOverlayName(overlayName);\n    return this;\n  }\n\n  /**\n   * Sets filter calculators for newly calculated row and column position. The filters are used to transform visual\n   * indexes (0 to N) to source indexes provided by Handsontable.\n   *\n   * @param {RowFilter} rowFilter The row filter instance.\n   * @param {ColumnFilter} columnFilter The column filter instance.\n   * @returns {Renderer}\n   */\n  setFilters(rowFilter, columnFilter) {\n    this.renderer.setFilters(rowFilter, columnFilter);\n    return this;\n  }\n\n  /**\n   * Sets the viewport size of the rendered table.\n   *\n   * @param {number} rowsCount An amount of rows to render.\n   * @param {number} columnsCount An amount of columns to render.\n   * @returns {Renderer}\n   */\n  setViewportSize(rowsCount, columnsCount) {\n    this.renderer.setViewportSize(rowsCount, columnsCount);\n    return this;\n  }\n\n  /**\n   * Sets row and column header functions.\n   *\n   * @param {Function[]} rowHeaders Row header functions. Factories for creating content for row headers.\n   * @param {Function[]} columnHeaders Column header functions. Factories for creating content for column headers.\n   * @returns {Renderer}\n   */\n  setHeaderContentRenderers(rowHeaders, columnHeaders) {\n    this.renderer.setHeaderContentRenderers(rowHeaders, columnHeaders);\n    return this;\n  }\n\n  /**\n   * Adjusts the table (preparing for render).\n   */\n  adjust() {\n    this.renderer.adjust();\n  }\n\n  /**\n   * Renders the table.\n   */\n  render() {\n    this.renderer.render();\n  }\n}\nexport { RowHeadersRenderer, ColumnHeadersRenderer, ColGroupRenderer, RowsRenderer, CellsRenderer, TableRenderer, Renderer };","map":{"version":3,"names":["RowHeadersRenderer","ColumnHeadersRenderer","ColGroupRenderer","RowsRenderer","CellsRenderer","TableRenderer","Renderer","constructor","TABLE","THEAD","COLGROUP","TBODY","rowUtils","columnUtils","cellRenderer","arguments","length","undefined","renderer","setRenderers","rowHeaders","columnHeaders","colGroup","rows","cells","setAxisUtils","setActiveOverlayName","overlayName","setFilters","rowFilter","columnFilter","setViewportSize","rowsCount","columnsCount","setHeaderContentRenderers","adjust","render"],"sources":["D:/gym-project/frontend/node_modules/handsontable/3rdparty/walkontable/src/renderer/index.mjs"],"sourcesContent":["import RowHeadersRenderer from \"./rowHeaders.mjs\";\nimport ColumnHeadersRenderer from \"./columnHeaders.mjs\";\nimport ColGroupRenderer from \"./colGroup.mjs\";\nimport RowsRenderer from \"./rows.mjs\";\nimport CellsRenderer from \"./cells.mjs\";\nimport TableRenderer from \"./table.mjs\";\n/**\n * Content renderer.\n *\n * @class Renderer\n */\nclass Renderer {\n  constructor() {\n    let {\n      TABLE,\n      THEAD,\n      COLGROUP,\n      TBODY,\n      rowUtils,\n      columnUtils,\n      cellRenderer\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    /**\n     * General renderer class used to render Walkontable content on screen.\n     *\n     * @type {TableRenderer}\n     */\n    this.renderer = new TableRenderer(TABLE, {\n      cellRenderer\n    });\n    this.renderer.setRenderers({\n      rowHeaders: new RowHeadersRenderer(),\n      columnHeaders: new ColumnHeadersRenderer(THEAD),\n      colGroup: new ColGroupRenderer(COLGROUP),\n      rows: new RowsRenderer(TBODY),\n      cells: new CellsRenderer()\n    });\n    this.renderer.setAxisUtils(rowUtils, columnUtils);\n  }\n\n  /**\n   * Sets the overlay that is currently rendered. If `null` is provided, the master overlay is set.\n   *\n   * @param {'inline_start'|'top'|'top_inline_start_corner'|'bottom'|'bottom_inline_start_corner'|'master'} overlayName The overlay name.\n   * @returns {Renderer}\n   */\n  setActiveOverlayName(overlayName) {\n    this.renderer.setActiveOverlayName(overlayName);\n    return this;\n  }\n\n  /**\n   * Sets filter calculators for newly calculated row and column position. The filters are used to transform visual\n   * indexes (0 to N) to source indexes provided by Handsontable.\n   *\n   * @param {RowFilter} rowFilter The row filter instance.\n   * @param {ColumnFilter} columnFilter The column filter instance.\n   * @returns {Renderer}\n   */\n  setFilters(rowFilter, columnFilter) {\n    this.renderer.setFilters(rowFilter, columnFilter);\n    return this;\n  }\n\n  /**\n   * Sets the viewport size of the rendered table.\n   *\n   * @param {number} rowsCount An amount of rows to render.\n   * @param {number} columnsCount An amount of columns to render.\n   * @returns {Renderer}\n   */\n  setViewportSize(rowsCount, columnsCount) {\n    this.renderer.setViewportSize(rowsCount, columnsCount);\n    return this;\n  }\n\n  /**\n   * Sets row and column header functions.\n   *\n   * @param {Function[]} rowHeaders Row header functions. Factories for creating content for row headers.\n   * @param {Function[]} columnHeaders Column header functions. Factories for creating content for column headers.\n   * @returns {Renderer}\n   */\n  setHeaderContentRenderers(rowHeaders, columnHeaders) {\n    this.renderer.setHeaderContentRenderers(rowHeaders, columnHeaders);\n    return this;\n  }\n\n  /**\n   * Adjusts the table (preparing for render).\n   */\n  adjust() {\n    this.renderer.adjust();\n  }\n\n  /**\n   * Renders the table.\n   */\n  render() {\n    this.renderer.render();\n  }\n}\nexport { RowHeadersRenderer, ColumnHeadersRenderer, ColGroupRenderer, RowsRenderer, CellsRenderer, TableRenderer, Renderer };"],"mappings":"AAAA,OAAOA,kBAAkB,MAAM,kBAAkB;AACjD,OAAOC,qBAAqB,MAAM,qBAAqB;AACvD,OAAOC,gBAAgB,MAAM,gBAAgB;AAC7C,OAAOC,YAAY,MAAM,YAAY;AACrC,OAAOC,aAAa,MAAM,aAAa;AACvC,OAAOC,aAAa,MAAM,aAAa;AACvC;AACA;AACA;AACA;AACA;AACA,MAAMC,QAAQ,CAAC;EACbC,WAAWA,CAAA,EAAG;IACZ,IAAI;MACFC,KAAK;MACLC,KAAK;MACLC,QAAQ;MACRC,KAAK;MACLC,QAAQ;MACRC,WAAW;MACXC;IACF,CAAC,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC1E;AACJ;AACA;AACA;AACA;IACI,IAAI,CAACG,QAAQ,GAAG,IAAIb,aAAa,CAACG,KAAK,EAAE;MACvCM;IACF,CAAC,CAAC;IACF,IAAI,CAACI,QAAQ,CAACC,YAAY,CAAC;MACzBC,UAAU,EAAE,IAAIpB,kBAAkB,CAAC,CAAC;MACpCqB,aAAa,EAAE,IAAIpB,qBAAqB,CAACQ,KAAK,CAAC;MAC/Ca,QAAQ,EAAE,IAAIpB,gBAAgB,CAACQ,QAAQ,CAAC;MACxCa,IAAI,EAAE,IAAIpB,YAAY,CAACQ,KAAK,CAAC;MAC7Ba,KAAK,EAAE,IAAIpB,aAAa,CAAC;IAC3B,CAAC,CAAC;IACF,IAAI,CAACc,QAAQ,CAACO,YAAY,CAACb,QAAQ,EAAEC,WAAW,CAAC;EACnD;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEa,oBAAoBA,CAACC,WAAW,EAAE;IAChC,IAAI,CAACT,QAAQ,CAACQ,oBAAoB,CAACC,WAAW,CAAC;IAC/C,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,UAAUA,CAACC,SAAS,EAAEC,YAAY,EAAE;IAClC,IAAI,CAACZ,QAAQ,CAACU,UAAU,CAACC,SAAS,EAAEC,YAAY,CAAC;IACjD,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,eAAeA,CAACC,SAAS,EAAEC,YAAY,EAAE;IACvC,IAAI,CAACf,QAAQ,CAACa,eAAe,CAACC,SAAS,EAAEC,YAAY,CAAC;IACtD,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,yBAAyBA,CAACd,UAAU,EAAEC,aAAa,EAAE;IACnD,IAAI,CAACH,QAAQ,CAACgB,yBAAyB,CAACd,UAAU,EAAEC,aAAa,CAAC;IAClE,OAAO,IAAI;EACb;;EAEA;AACF;AACA;EACEc,MAAMA,CAAA,EAAG;IACP,IAAI,CAACjB,QAAQ,CAACiB,MAAM,CAAC,CAAC;EACxB;;EAEA;AACF;AACA;EACEC,MAAMA,CAAA,EAAG;IACP,IAAI,CAAClB,QAAQ,CAACkB,MAAM,CAAC,CAAC;EACxB;AACF;AACA,SAASpC,kBAAkB,EAAEC,qBAAqB,EAAEC,gBAAgB,EAAEC,YAAY,EAAEC,aAAa,EAAEC,aAAa,EAAEC,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}