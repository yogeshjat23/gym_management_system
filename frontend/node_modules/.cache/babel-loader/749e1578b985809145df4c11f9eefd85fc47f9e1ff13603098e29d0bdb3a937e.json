{"ast":null,"code":"/**\n * An array diff implementation. The function iterates through the arrays and depends\n * on the diff results, collect the changes as a list of the objects.\n *\n * Each object contains information about the differences in the indexes of the arrays.\n * The changes also contain data about the new and previous array values.\n *\n * @private\n * @param {Array} baseArray The base array to diff from.\n * @param {Array} newArray The new array to compare with.\n * @returns {Array}\n */\nexport function arrayDiff(baseArray, newArray) {\n  const changes = [];\n  let i = 0;\n  let j = 0;\n\n  /* eslint-disable no-plusplus */\n  for (; i < baseArray.length && j < newArray.length; i++, j++) {\n    if (baseArray[i] !== newArray[j]) {\n      changes.push({\n        op: 'replace',\n        index: j,\n        oldValue: baseArray[i],\n        newValue: newArray[j]\n      });\n    }\n  }\n  for (; i < newArray.length; i++) {\n    changes.push({\n      op: 'insert',\n      index: i,\n      oldValue: undefined,\n      newValue: newArray[i]\n    });\n  }\n  for (; j < baseArray.length; j++) {\n    changes.push({\n      op: 'remove',\n      index: j,\n      oldValue: baseArray[j],\n      newValue: undefined\n    });\n  }\n  return changes;\n}","map":{"version":3,"names":["arrayDiff","baseArray","newArray","changes","i","j","length","push","op","index","oldValue","newValue","undefined"],"sources":["D:/gym-project/frontend/node_modules/handsontable/translations/changesObservable/utils.mjs"],"sourcesContent":["import \"core-js/modules/es.array.push.js\";\n/**\n * An array diff implementation. The function iterates through the arrays and depends\n * on the diff results, collect the changes as a list of the objects.\n *\n * Each object contains information about the differences in the indexes of the arrays.\n * The changes also contain data about the new and previous array values.\n *\n * @private\n * @param {Array} baseArray The base array to diff from.\n * @param {Array} newArray The new array to compare with.\n * @returns {Array}\n */\nexport function arrayDiff(baseArray, newArray) {\n  const changes = [];\n  let i = 0;\n  let j = 0;\n\n  /* eslint-disable no-plusplus */\n  for (; i < baseArray.length && j < newArray.length; i++, j++) {\n    if (baseArray[i] !== newArray[j]) {\n      changes.push({\n        op: 'replace',\n        index: j,\n        oldValue: baseArray[i],\n        newValue: newArray[j]\n      });\n    }\n  }\n  for (; i < newArray.length; i++) {\n    changes.push({\n      op: 'insert',\n      index: i,\n      oldValue: undefined,\n      newValue: newArray[i]\n    });\n  }\n  for (; j < baseArray.length; j++) {\n    changes.push({\n      op: 'remove',\n      index: j,\n      oldValue: baseArray[j],\n      newValue: undefined\n    });\n  }\n  return changes;\n}"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,SAASA,CAACC,SAAS,EAAEC,QAAQ,EAAE;EAC7C,MAAMC,OAAO,GAAG,EAAE;EAClB,IAAIC,CAAC,GAAG,CAAC;EACT,IAAIC,CAAC,GAAG,CAAC;;EAET;EACA,OAAOD,CAAC,GAAGH,SAAS,CAACK,MAAM,IAAID,CAAC,GAAGH,QAAQ,CAACI,MAAM,EAAEF,CAAC,EAAE,EAAEC,CAAC,EAAE,EAAE;IAC5D,IAAIJ,SAAS,CAACG,CAAC,CAAC,KAAKF,QAAQ,CAACG,CAAC,CAAC,EAAE;MAChCF,OAAO,CAACI,IAAI,CAAC;QACXC,EAAE,EAAE,SAAS;QACbC,KAAK,EAAEJ,CAAC;QACRK,QAAQ,EAAET,SAAS,CAACG,CAAC,CAAC;QACtBO,QAAQ,EAAET,QAAQ,CAACG,CAAC;MACtB,CAAC,CAAC;IACJ;EACF;EACA,OAAOD,CAAC,GAAGF,QAAQ,CAACI,MAAM,EAAEF,CAAC,EAAE,EAAE;IAC/BD,OAAO,CAACI,IAAI,CAAC;MACXC,EAAE,EAAE,QAAQ;MACZC,KAAK,EAAEL,CAAC;MACRM,QAAQ,EAAEE,SAAS;MACnBD,QAAQ,EAAET,QAAQ,CAACE,CAAC;IACtB,CAAC,CAAC;EACJ;EACA,OAAOC,CAAC,GAAGJ,SAAS,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;IAChCF,OAAO,CAACI,IAAI,CAAC;MACXC,EAAE,EAAE,QAAQ;MACZC,KAAK,EAAEJ,CAAC;MACRK,QAAQ,EAAET,SAAS,CAACI,CAAC,CAAC;MACtBM,QAAQ,EAAEC;IACZ,CAAC,CAAC;EACJ;EACA,OAAOT,OAAO;AAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}