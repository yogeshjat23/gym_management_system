{"ast":null,"code":"function _classPrivateMethodInitSpec(e, a) {\n  _checkPrivateRedeclaration(e, a), a.add(e);\n}\nfunction _classPrivateFieldInitSpec(e, t, a) {\n  _checkPrivateRedeclaration(e, t), t.set(e, a);\n}\nfunction _checkPrivateRedeclaration(e, t) {\n  if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n}\nfunction _classPrivateFieldGet(s, a) {\n  return s.get(_assertClassBrand(s, a));\n}\nfunction _classPrivateFieldSet(s, a, r) {\n  return s.set(_assertClassBrand(s, a), r), r;\n}\nfunction _assertClassBrand(e, t, n) {\n  if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n;\n  throw new TypeError(\"Private element is not present on this object\");\n}\nimport { BasePlugin } from \"../base/index.mjs\";\nimport { addClass } from \"../../helpers/dom/element.mjs\";\nimport { rangeEach } from \"../../helpers/number.mjs\";\nimport { arrayEach, arrayMap, arrayReduce } from \"../../helpers/array.mjs\";\nimport { isObject } from \"../../helpers/object.mjs\";\nimport { isUndefined } from \"../../helpers/mixed.mjs\";\nimport { SEPARATOR } from \"../contextMenu/predefinedItems/index.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nimport hideColumnItem from \"./contextMenuItem/hideColumn.mjs\";\nimport showColumnItem from \"./contextMenuItem/showColumn.mjs\";\nimport { HidingMap } from \"../../translations/index.mjs\";\nHooks.getSingleton().register('beforeHideColumns');\nHooks.getSingleton().register('afterHideColumns');\nHooks.getSingleton().register('beforeUnhideColumns');\nHooks.getSingleton().register('afterUnhideColumns');\nexport const PLUGIN_KEY = 'hiddenColumns';\nexport const PLUGIN_PRIORITY = 310;\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @plugin HiddenColumns\n * @class HiddenColumns\n *\n * @description\n * The `HiddenColumns` plugin lets you [hide specified columns](@/guides/columns/column-hiding/column-hiding.md).\n *\n * \"Hiding a column\" means that the hidden column doesn't get rendered as a DOM element.\n *\n * The `HiddenColumns` plugin doesn't modify the source data,\n * and doesn't participate in data transformation\n * (the shape of the data returned by the [`getData*()` methods](@/api/core.md#getdata) stays intact).\n *\n * You can set the following configuration options:\n *\n * | Option | Required | Type | Default | Description |\n * |---|---|---|---|---|\n * | `columns` | No | Array | - | [Hides specified columns by default](@/guides/columns/column-hiding/column-hiding.md#step-1-specify-columns-hidden-by-default) |\n * | `indicators` | No | Boolean | `false` | [Shows UI indicators](@/guides/columns/column-hiding/column-hiding.md#step-2-show-ui-indicators) |\n * | `copyPasteEnabled` | No | Boolean | `true` | [Sets up copy/paste behavior](@/guides/columns/column-hiding/column-hiding.md#step-4-set-up-copy-and-paste-behavior) |\n *\n * @example\n *\n * ::: only-for javascript\n * ```js\n * const container = document.getElementById('example');\n * const hot = new Handsontable(container, {\n *   data: getData(),\n *   hiddenColumns: {\n *     copyPasteEnabled: true,\n *     indicators: true,\n *     columns: [1, 2, 5]\n *   }\n * });\n *\n * // access the `HiddenColumns` plugin's instance\n * const hiddenColumnsPlugin = hot.getPlugin('hiddenColumns');\n *\n * // hide a single column\n * hiddenColumnsPlugin.hideColumn(1);\n *\n * // hide multiple columns\n * hiddenColumnsPlugin.hideColumn(1, 2, 9);\n *\n * // hide multiple columns as an array\n * hiddenColumnsPlugin.hideColumns([1, 2, 9]);\n *\n * // unhide a single column\n * hiddenColumnsPlugin.showColumn(1);\n *\n * // unhide multiple columns\n * hiddenColumnsPlugin.showColumn(1, 2, 9);\n *\n * // unhide multiple columns as an array\n * hiddenColumnsPlugin.showColumns([1, 2, 9]);\n *\n * // to see your changes, re-render your Handsontable instance\n * hot.render();\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * const hotRef = useRef(null);\n *\n * ...\n *\n * <HotTable\n *   ref={hotRef}\n *   data={getData()}\n *   hiddenColumns={{\n *     copyPasteEnabled: true,\n *     indicators: true,\n *     columns: [1, 2, 5]\n *   }}\n * />\n *\n * // access the `HiddenColumns` plugin's instance\n * const hot = hotRef.current.hotInstance;\n * const hiddenColumnsPlugin = hot.getPlugin('hiddenColumns');\n *\n * // hide a single column\n * hiddenColumnsPlugin.hideColumn(1);\n *\n * // hide multiple columns\n * hiddenColumnsPlugin.hideColumn(1, 2, 9);\n *\n * // hide multiple columns as an array\n * hiddenColumnsPlugin.hideColumns([1, 2, 9]);\n *\n * // unhide a single column\n * hiddenColumnsPlugin.showColumn(1);\n *\n * // unhide multiple columns\n * hiddenColumnsPlugin.showColumn(1, 2, 9);\n *\n * // unhide multiple columns as an array\n * hiddenColumnsPlugin.showColumns([1, 2, 9]);\n *\n * // to see your changes, re-render your Handsontable instance\n * hot.render();\n * ```\n * :::\n */\nvar _settings = /*#__PURE__*/new WeakMap();\nvar _hiddenColumnsMap = /*#__PURE__*/new WeakMap();\nvar _HiddenColumns_brand = /*#__PURE__*/new WeakSet();\nexport class HiddenColumns extends BasePlugin {\n  constructor() {\n    super(...arguments);\n    /**\n     * Adds the additional column width for the hidden column indicators.\n     *\n     * @param {number|undefined} width Column width.\n     * @param {number} column Visual column index.\n     * @returns {number}\n     */\n    _classPrivateMethodInitSpec(this, _HiddenColumns_brand);\n    /**\n     * Cached plugin settings.\n     *\n     * @private\n     * @type {object}\n     */\n    _classPrivateFieldInitSpec(this, _settings, {});\n    /**\n     * Map of hidden columns by the plugin.\n     *\n     * @private\n     * @type {null|HidingMap}\n     */\n    _classPrivateFieldInitSpec(this, _hiddenColumnsMap, null);\n  }\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link HiddenColumns#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return !!this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    var _this = this;\n    if (this.enabled) {\n      return;\n    }\n    const pluginSettings = this.hot.getSettings()[PLUGIN_KEY];\n    if (isObject(pluginSettings)) {\n      _classPrivateFieldSet(_settings, this, pluginSettings);\n      if (isUndefined(pluginSettings.copyPasteEnabled)) {\n        pluginSettings.copyPasteEnabled = true;\n      }\n    }\n    _classPrivateFieldSet(_hiddenColumnsMap, this, new HidingMap());\n    _classPrivateFieldGet(_hiddenColumnsMap, this).addLocalHook('init', () => _assertClassBrand(_HiddenColumns_brand, this, _onMapInit).call(this));\n    this.hot.columnIndexMapper.registerMap(this.pluginName, _classPrivateFieldGet(_hiddenColumnsMap, this));\n    this.addHook('afterContextMenuDefaultOptions', function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return _assertClassBrand(_HiddenColumns_brand, _this, _onAfterContextMenuDefaultOptions).call(_this, ...args);\n    });\n    this.addHook('afterGetCellMeta', (row, col, cellProperties) => _assertClassBrand(_HiddenColumns_brand, this, _onAfterGetCellMeta).call(this, row, col, cellProperties));\n    this.addHook('modifyColWidth', (width, col) => _assertClassBrand(_HiddenColumns_brand, this, _onModifyColWidth).call(this, width, col), 2);\n    this.addHook('afterGetColHeader', function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      return _assertClassBrand(_HiddenColumns_brand, _this, _onAfterGetColHeader).call(_this, ...args);\n    });\n    this.addHook('modifyCopyableRange', ranges => _assertClassBrand(_HiddenColumns_brand, this, _onModifyCopyableRange).call(this, ranges));\n    super.enablePlugin();\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:\n   *  - [`hiddenColumns`](@/api/options.md#hiddencolumns)\n   */\n  updatePlugin() {\n    this.disablePlugin();\n    this.enablePlugin();\n    super.updatePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    this.hot.columnIndexMapper.unregisterMap(this.pluginName);\n    _classPrivateFieldSet(_settings, this, {});\n    super.disablePlugin();\n    this.resetCellsMeta();\n  }\n\n  /**\n   * Shows the provided columns.\n   *\n   * @param {number[]} columns Array of visual column indexes.\n   */\n  showColumns(columns) {\n    const currentHideConfig = this.getHiddenColumns();\n    const isValidConfig = this.isValidConfig(columns);\n    let destinationHideConfig = currentHideConfig;\n    const hidingMapValues = _classPrivateFieldGet(_hiddenColumnsMap, this).getValues().slice();\n    const isAnyColumnShowed = columns.length > 0;\n    if (isValidConfig && isAnyColumnShowed) {\n      const physicalColumns = columns.map(visualColumn => this.hot.toPhysicalColumn(visualColumn));\n\n      // Preparing new values for hiding map.\n      arrayEach(physicalColumns, physicalColumn => {\n        hidingMapValues[physicalColumn] = false;\n      });\n\n      // Preparing new hiding config.\n      destinationHideConfig = arrayReduce(hidingMapValues, (hiddenIndexes, isHidden, physicalIndex) => {\n        if (isHidden) {\n          hiddenIndexes.push(this.hot.toVisualColumn(physicalIndex));\n        }\n        return hiddenIndexes;\n      }, []);\n    }\n    const continueHiding = this.hot.runHooks('beforeUnhideColumns', currentHideConfig, destinationHideConfig, isValidConfig && isAnyColumnShowed);\n    if (continueHiding === false) {\n      return;\n    }\n    if (isValidConfig && isAnyColumnShowed) {\n      _classPrivateFieldGet(_hiddenColumnsMap, this).setValues(hidingMapValues);\n    }\n\n    // @TODO Should call once per render cycle, currently fired separately in different plugins\n    this.hot.view.adjustElementsSize();\n    this.hot.runHooks('afterUnhideColumns', currentHideConfig, destinationHideConfig, isValidConfig && isAnyColumnShowed, isValidConfig && destinationHideConfig.length < currentHideConfig.length);\n  }\n\n  /**\n   * Shows a single column.\n   *\n   * @param {...number} column Visual column index.\n   */\n  showColumn() {\n    for (var _len3 = arguments.length, column = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      column[_key3] = arguments[_key3];\n    }\n    this.showColumns(column);\n  }\n\n  /**\n   * Hides the columns provided in the array.\n   *\n   * @param {number[]} columns Array of visual column indexes.\n   */\n  hideColumns(columns) {\n    const currentHideConfig = this.getHiddenColumns();\n    const isConfigValid = this.isValidConfig(columns);\n    let destinationHideConfig = currentHideConfig;\n    if (isConfigValid) {\n      destinationHideConfig = Array.from(new Set(currentHideConfig.concat(columns)));\n    }\n    const continueHiding = this.hot.runHooks('beforeHideColumns', currentHideConfig, destinationHideConfig, isConfigValid);\n    if (continueHiding === false) {\n      return;\n    }\n    if (isConfigValid) {\n      this.hot.batchExecution(() => {\n        arrayEach(columns, visualColumn => {\n          _classPrivateFieldGet(_hiddenColumnsMap, this).setValueAtIndex(this.hot.toPhysicalColumn(visualColumn), true);\n        });\n      }, true);\n    }\n    this.hot.runHooks('afterHideColumns', currentHideConfig, destinationHideConfig, isConfigValid, isConfigValid && destinationHideConfig.length > currentHideConfig.length);\n  }\n\n  /**\n   * Hides a single column.\n   *\n   * @param {...number} column Visual column index.\n   */\n  hideColumn() {\n    for (var _len4 = arguments.length, column = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      column[_key4] = arguments[_key4];\n    }\n    this.hideColumns(column);\n  }\n\n  /**\n   * Returns an array of visual indexes of hidden columns.\n   *\n   * @returns {number[]}\n   */\n  getHiddenColumns() {\n    return arrayMap(_classPrivateFieldGet(_hiddenColumnsMap, this).getHiddenIndexes(), physicalColumnIndex => {\n      return this.hot.toVisualColumn(physicalColumnIndex);\n    });\n  }\n\n  /**\n   * Checks if the provided column is hidden.\n   *\n   * @param {number} column Visual column index.\n   * @returns {boolean}\n   */\n  isHidden(column) {\n    return _classPrivateFieldGet(_hiddenColumnsMap, this).getValueAtIndex(this.hot.toPhysicalColumn(column)) || false;\n  }\n\n  /**\n   * Get if trim config is valid. Check whether all of the provided column indexes are within the bounds of the table.\n   *\n   * @param {Array} hiddenColumns List of hidden column indexes.\n   * @returns {boolean}\n   */\n  isValidConfig(hiddenColumns) {\n    const nrOfColumns = this.hot.countCols();\n    if (Array.isArray(hiddenColumns) && hiddenColumns.length > 0) {\n      return hiddenColumns.every(visualColumn => Number.isInteger(visualColumn) && visualColumn >= 0 && visualColumn < nrOfColumns);\n    }\n    return false;\n  }\n\n  /**\n   * Reset all rendered cells meta.\n   *\n   * @private\n   */\n  resetCellsMeta() {\n    arrayEach(this.hot.getCellsMeta(), meta => {\n      if (meta) {\n        meta.skipColumnOnPaste = false;\n      }\n    });\n  }\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    _classPrivateFieldSet(_settings, this, null);\n    _classPrivateFieldSet(_hiddenColumnsMap, this, null);\n    super.destroy();\n  }\n}\nfunction _onModifyColWidth(width, column) {\n  // Hook is triggered internally only for the visible columns. Conditional will be handled for the API\n  // calls of the `getColWidth` function on not visible indexes.\n  if (this.isHidden(column)) {\n    return 0;\n  }\n  if (_classPrivateFieldGet(_settings, this).indicators && (this.isHidden(column + 1) || this.isHidden(column - 1))) {\n    // Add additional space for hidden column indicator.\n    if (typeof width === 'number' && this.hot.hasColHeaders()) {\n      return width + 15;\n    }\n  }\n}\n/**\n * Sets the copy-related cell meta.\n *\n * @param {number} row Visual row index.\n * @param {number} column Visual column index.\n * @param {object} cellProperties Object containing the cell properties.\n */\nfunction _onAfterGetCellMeta(row, column, cellProperties) {\n  if (_classPrivateFieldGet(_settings, this).copyPasteEnabled === false && this.isHidden(column)) {\n    // Cell property handled by the `Autofill` and the `CopyPaste` plugins.\n    cellProperties.skipColumnOnPaste = true;\n  }\n  if (this.isHidden(column - 1)) {\n    cellProperties.className = cellProperties.className || '';\n    if (cellProperties.className.indexOf('afterHiddenColumn') === -1) {\n      cellProperties.className += ' afterHiddenColumn';\n    }\n  } else if (cellProperties.className) {\n    const classArr = cellProperties.className.split(' ');\n    if (classArr.length > 0) {\n      const containAfterHiddenColumn = classArr.indexOf('afterHiddenColumn');\n      if (containAfterHiddenColumn > -1) {\n        classArr.splice(containAfterHiddenColumn, 1);\n      }\n      cellProperties.className = classArr.join(' ');\n    }\n  }\n}\n/**\n * Modifies the copyable range, accordingly to the provided config.\n *\n * @param {Array} ranges An array of objects defining copyable cells.\n * @returns {Array}\n */\nfunction _onModifyCopyableRange(ranges) {\n  // Ranges shouldn't be modified when `copyPasteEnabled` option is set to `true` (by default).\n  if (_classPrivateFieldGet(_settings, this).copyPasteEnabled) {\n    return ranges;\n  }\n  const newRanges = [];\n  const pushRange = (startRow, endRow, startCol, endCol) => {\n    newRanges.push({\n      startRow,\n      endRow,\n      startCol,\n      endCol\n    });\n  };\n  arrayEach(ranges, range => {\n    let isHidden = true;\n    let rangeStart = 0;\n    rangeEach(range.startCol, range.endCol, visualColumn => {\n      if (this.isHidden(visualColumn)) {\n        if (!isHidden) {\n          pushRange(range.startRow, range.endRow, rangeStart, visualColumn - 1);\n        }\n        isHidden = true;\n      } else {\n        if (isHidden) {\n          rangeStart = visualColumn;\n        }\n        if (visualColumn === range.endCol) {\n          pushRange(range.startRow, range.endRow, rangeStart, visualColumn);\n        }\n        isHidden = false;\n      }\n    });\n  });\n  return newRanges;\n}\n/**\n * Adds the needed classes to the headers.\n *\n * @param {number} column Visual column index.\n * @param {HTMLElement} TH Header's TH element.\n */\nfunction _onAfterGetColHeader(column, TH) {\n  if (!_classPrivateFieldGet(_settings, this).indicators || column < 0) {\n    return;\n  }\n  const classList = [];\n  if (column >= 1 && this.isHidden(column - 1)) {\n    classList.push('afterHiddenColumn');\n  }\n  if (column < this.hot.countCols() - 1 && this.isHidden(column + 1)) {\n    classList.push('beforeHiddenColumn');\n  }\n  addClass(TH, classList);\n}\n/**\n * Add Show-hide columns to context menu.\n *\n * @param {object} options An array of objects containing information about the pre-defined Context Menu items.\n */\nfunction _onAfterContextMenuDefaultOptions(options) {\n  options.items.push({\n    name: SEPARATOR\n  }, hideColumnItem(this), showColumnItem(this));\n}\n/**\n * On map initialized hook callback.\n */\nfunction _onMapInit() {\n  if (Array.isArray(_classPrivateFieldGet(_settings, this).columns)) {\n    this.hideColumns(_classPrivateFieldGet(_settings, this).columns);\n  }\n}","map":{"version":3,"names":["_classPrivateMethodInitSpec","e","a","_checkPrivateRedeclaration","add","_classPrivateFieldInitSpec","t","set","has","TypeError","_classPrivateFieldGet","s","get","_assertClassBrand","_classPrivateFieldSet","r","n","arguments","length","BasePlugin","addClass","rangeEach","arrayEach","arrayMap","arrayReduce","isObject","isUndefined","SEPARATOR","Hooks","hideColumnItem","showColumnItem","HidingMap","getSingleton","register","PLUGIN_KEY","PLUGIN_PRIORITY","_settings","WeakMap","_hiddenColumnsMap","_HiddenColumns_brand","WeakSet","HiddenColumns","constructor","isEnabled","hot","getSettings","enablePlugin","_this","enabled","pluginSettings","copyPasteEnabled","addLocalHook","_onMapInit","call","columnIndexMapper","registerMap","pluginName","addHook","_len","args","Array","_key","_onAfterContextMenuDefaultOptions","row","col","cellProperties","_onAfterGetCellMeta","width","_onModifyColWidth","_len2","_key2","_onAfterGetColHeader","ranges","_onModifyCopyableRange","updatePlugin","disablePlugin","unregisterMap","resetCellsMeta","showColumns","columns","currentHideConfig","getHiddenColumns","isValidConfig","destinationHideConfig","hidingMapValues","getValues","slice","isAnyColumnShowed","physicalColumns","map","visualColumn","toPhysicalColumn","physicalColumn","hiddenIndexes","isHidden","physicalIndex","push","toVisualColumn","continueHiding","runHooks","setValues","view","adjustElementsSize","showColumn","_len3","column","_key3","hideColumns","isConfigValid","from","Set","concat","batchExecution","setValueAtIndex","hideColumn","_len4","_key4","getHiddenIndexes","physicalColumnIndex","getValueAtIndex","hiddenColumns","nrOfColumns","countCols","isArray","every","Number","isInteger","getCellsMeta","meta","skipColumnOnPaste","destroy","indicators","hasColHeaders","className","indexOf","classArr","split","containAfterHiddenColumn","splice","join","newRanges","pushRange","startRow","endRow","startCol","endCol","range","rangeStart","TH","classList","options","items","name"],"sources":["D:/gym-project/frontend/node_modules/handsontable/plugins/hiddenColumns/hiddenColumns.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nfunction _classPrivateMethodInitSpec(e, a) { _checkPrivateRedeclaration(e, a), a.add(e); }\nfunction _classPrivateFieldInitSpec(e, t, a) { _checkPrivateRedeclaration(e, t), t.set(e, a); }\nfunction _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); }\nfunction _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }\nfunction _classPrivateFieldSet(s, a, r) { return s.set(_assertClassBrand(s, a), r), r; }\nfunction _assertClassBrand(e, t, n) { if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError(\"Private element is not present on this object\"); }\nimport { BasePlugin } from \"../base/index.mjs\";\nimport { addClass } from \"../../helpers/dom/element.mjs\";\nimport { rangeEach } from \"../../helpers/number.mjs\";\nimport { arrayEach, arrayMap, arrayReduce } from \"../../helpers/array.mjs\";\nimport { isObject } from \"../../helpers/object.mjs\";\nimport { isUndefined } from \"../../helpers/mixed.mjs\";\nimport { SEPARATOR } from \"../contextMenu/predefinedItems/index.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nimport hideColumnItem from \"./contextMenuItem/hideColumn.mjs\";\nimport showColumnItem from \"./contextMenuItem/showColumn.mjs\";\nimport { HidingMap } from \"../../translations/index.mjs\";\nHooks.getSingleton().register('beforeHideColumns');\nHooks.getSingleton().register('afterHideColumns');\nHooks.getSingleton().register('beforeUnhideColumns');\nHooks.getSingleton().register('afterUnhideColumns');\nexport const PLUGIN_KEY = 'hiddenColumns';\nexport const PLUGIN_PRIORITY = 310;\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @plugin HiddenColumns\n * @class HiddenColumns\n *\n * @description\n * The `HiddenColumns` plugin lets you [hide specified columns](@/guides/columns/column-hiding/column-hiding.md).\n *\n * \"Hiding a column\" means that the hidden column doesn't get rendered as a DOM element.\n *\n * The `HiddenColumns` plugin doesn't modify the source data,\n * and doesn't participate in data transformation\n * (the shape of the data returned by the [`getData*()` methods](@/api/core.md#getdata) stays intact).\n *\n * You can set the following configuration options:\n *\n * | Option | Required | Type | Default | Description |\n * |---|---|---|---|---|\n * | `columns` | No | Array | - | [Hides specified columns by default](@/guides/columns/column-hiding/column-hiding.md#step-1-specify-columns-hidden-by-default) |\n * | `indicators` | No | Boolean | `false` | [Shows UI indicators](@/guides/columns/column-hiding/column-hiding.md#step-2-show-ui-indicators) |\n * | `copyPasteEnabled` | No | Boolean | `true` | [Sets up copy/paste behavior](@/guides/columns/column-hiding/column-hiding.md#step-4-set-up-copy-and-paste-behavior) |\n *\n * @example\n *\n * ::: only-for javascript\n * ```js\n * const container = document.getElementById('example');\n * const hot = new Handsontable(container, {\n *   data: getData(),\n *   hiddenColumns: {\n *     copyPasteEnabled: true,\n *     indicators: true,\n *     columns: [1, 2, 5]\n *   }\n * });\n *\n * // access the `HiddenColumns` plugin's instance\n * const hiddenColumnsPlugin = hot.getPlugin('hiddenColumns');\n *\n * // hide a single column\n * hiddenColumnsPlugin.hideColumn(1);\n *\n * // hide multiple columns\n * hiddenColumnsPlugin.hideColumn(1, 2, 9);\n *\n * // hide multiple columns as an array\n * hiddenColumnsPlugin.hideColumns([1, 2, 9]);\n *\n * // unhide a single column\n * hiddenColumnsPlugin.showColumn(1);\n *\n * // unhide multiple columns\n * hiddenColumnsPlugin.showColumn(1, 2, 9);\n *\n * // unhide multiple columns as an array\n * hiddenColumnsPlugin.showColumns([1, 2, 9]);\n *\n * // to see your changes, re-render your Handsontable instance\n * hot.render();\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * const hotRef = useRef(null);\n *\n * ...\n *\n * <HotTable\n *   ref={hotRef}\n *   data={getData()}\n *   hiddenColumns={{\n *     copyPasteEnabled: true,\n *     indicators: true,\n *     columns: [1, 2, 5]\n *   }}\n * />\n *\n * // access the `HiddenColumns` plugin's instance\n * const hot = hotRef.current.hotInstance;\n * const hiddenColumnsPlugin = hot.getPlugin('hiddenColumns');\n *\n * // hide a single column\n * hiddenColumnsPlugin.hideColumn(1);\n *\n * // hide multiple columns\n * hiddenColumnsPlugin.hideColumn(1, 2, 9);\n *\n * // hide multiple columns as an array\n * hiddenColumnsPlugin.hideColumns([1, 2, 9]);\n *\n * // unhide a single column\n * hiddenColumnsPlugin.showColumn(1);\n *\n * // unhide multiple columns\n * hiddenColumnsPlugin.showColumn(1, 2, 9);\n *\n * // unhide multiple columns as an array\n * hiddenColumnsPlugin.showColumns([1, 2, 9]);\n *\n * // to see your changes, re-render your Handsontable instance\n * hot.render();\n * ```\n * :::\n */\nvar _settings = /*#__PURE__*/new WeakMap();\nvar _hiddenColumnsMap = /*#__PURE__*/new WeakMap();\nvar _HiddenColumns_brand = /*#__PURE__*/new WeakSet();\nexport class HiddenColumns extends BasePlugin {\n  constructor() {\n    super(...arguments);\n    /**\n     * Adds the additional column width for the hidden column indicators.\n     *\n     * @param {number|undefined} width Column width.\n     * @param {number} column Visual column index.\n     * @returns {number}\n     */\n    _classPrivateMethodInitSpec(this, _HiddenColumns_brand);\n    /**\n     * Cached plugin settings.\n     *\n     * @private\n     * @type {object}\n     */\n    _classPrivateFieldInitSpec(this, _settings, {});\n    /**\n     * Map of hidden columns by the plugin.\n     *\n     * @private\n     * @type {null|HidingMap}\n     */\n    _classPrivateFieldInitSpec(this, _hiddenColumnsMap, null);\n  }\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link HiddenColumns#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return !!this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    var _this = this;\n    if (this.enabled) {\n      return;\n    }\n    const pluginSettings = this.hot.getSettings()[PLUGIN_KEY];\n    if (isObject(pluginSettings)) {\n      _classPrivateFieldSet(_settings, this, pluginSettings);\n      if (isUndefined(pluginSettings.copyPasteEnabled)) {\n        pluginSettings.copyPasteEnabled = true;\n      }\n    }\n    _classPrivateFieldSet(_hiddenColumnsMap, this, new HidingMap());\n    _classPrivateFieldGet(_hiddenColumnsMap, this).addLocalHook('init', () => _assertClassBrand(_HiddenColumns_brand, this, _onMapInit).call(this));\n    this.hot.columnIndexMapper.registerMap(this.pluginName, _classPrivateFieldGet(_hiddenColumnsMap, this));\n    this.addHook('afterContextMenuDefaultOptions', function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return _assertClassBrand(_HiddenColumns_brand, _this, _onAfterContextMenuDefaultOptions).call(_this, ...args);\n    });\n    this.addHook('afterGetCellMeta', (row, col, cellProperties) => _assertClassBrand(_HiddenColumns_brand, this, _onAfterGetCellMeta).call(this, row, col, cellProperties));\n    this.addHook('modifyColWidth', (width, col) => _assertClassBrand(_HiddenColumns_brand, this, _onModifyColWidth).call(this, width, col), 2);\n    this.addHook('afterGetColHeader', function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      return _assertClassBrand(_HiddenColumns_brand, _this, _onAfterGetColHeader).call(_this, ...args);\n    });\n    this.addHook('modifyCopyableRange', ranges => _assertClassBrand(_HiddenColumns_brand, this, _onModifyCopyableRange).call(this, ranges));\n    super.enablePlugin();\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:\n   *  - [`hiddenColumns`](@/api/options.md#hiddencolumns)\n   */\n  updatePlugin() {\n    this.disablePlugin();\n    this.enablePlugin();\n    super.updatePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    this.hot.columnIndexMapper.unregisterMap(this.pluginName);\n    _classPrivateFieldSet(_settings, this, {});\n    super.disablePlugin();\n    this.resetCellsMeta();\n  }\n\n  /**\n   * Shows the provided columns.\n   *\n   * @param {number[]} columns Array of visual column indexes.\n   */\n  showColumns(columns) {\n    const currentHideConfig = this.getHiddenColumns();\n    const isValidConfig = this.isValidConfig(columns);\n    let destinationHideConfig = currentHideConfig;\n    const hidingMapValues = _classPrivateFieldGet(_hiddenColumnsMap, this).getValues().slice();\n    const isAnyColumnShowed = columns.length > 0;\n    if (isValidConfig && isAnyColumnShowed) {\n      const physicalColumns = columns.map(visualColumn => this.hot.toPhysicalColumn(visualColumn));\n\n      // Preparing new values for hiding map.\n      arrayEach(physicalColumns, physicalColumn => {\n        hidingMapValues[physicalColumn] = false;\n      });\n\n      // Preparing new hiding config.\n      destinationHideConfig = arrayReduce(hidingMapValues, (hiddenIndexes, isHidden, physicalIndex) => {\n        if (isHidden) {\n          hiddenIndexes.push(this.hot.toVisualColumn(physicalIndex));\n        }\n        return hiddenIndexes;\n      }, []);\n    }\n    const continueHiding = this.hot.runHooks('beforeUnhideColumns', currentHideConfig, destinationHideConfig, isValidConfig && isAnyColumnShowed);\n    if (continueHiding === false) {\n      return;\n    }\n    if (isValidConfig && isAnyColumnShowed) {\n      _classPrivateFieldGet(_hiddenColumnsMap, this).setValues(hidingMapValues);\n    }\n\n    // @TODO Should call once per render cycle, currently fired separately in different plugins\n    this.hot.view.adjustElementsSize();\n    this.hot.runHooks('afterUnhideColumns', currentHideConfig, destinationHideConfig, isValidConfig && isAnyColumnShowed, isValidConfig && destinationHideConfig.length < currentHideConfig.length);\n  }\n\n  /**\n   * Shows a single column.\n   *\n   * @param {...number} column Visual column index.\n   */\n  showColumn() {\n    for (var _len3 = arguments.length, column = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      column[_key3] = arguments[_key3];\n    }\n    this.showColumns(column);\n  }\n\n  /**\n   * Hides the columns provided in the array.\n   *\n   * @param {number[]} columns Array of visual column indexes.\n   */\n  hideColumns(columns) {\n    const currentHideConfig = this.getHiddenColumns();\n    const isConfigValid = this.isValidConfig(columns);\n    let destinationHideConfig = currentHideConfig;\n    if (isConfigValid) {\n      destinationHideConfig = Array.from(new Set(currentHideConfig.concat(columns)));\n    }\n    const continueHiding = this.hot.runHooks('beforeHideColumns', currentHideConfig, destinationHideConfig, isConfigValid);\n    if (continueHiding === false) {\n      return;\n    }\n    if (isConfigValid) {\n      this.hot.batchExecution(() => {\n        arrayEach(columns, visualColumn => {\n          _classPrivateFieldGet(_hiddenColumnsMap, this).setValueAtIndex(this.hot.toPhysicalColumn(visualColumn), true);\n        });\n      }, true);\n    }\n    this.hot.runHooks('afterHideColumns', currentHideConfig, destinationHideConfig, isConfigValid, isConfigValid && destinationHideConfig.length > currentHideConfig.length);\n  }\n\n  /**\n   * Hides a single column.\n   *\n   * @param {...number} column Visual column index.\n   */\n  hideColumn() {\n    for (var _len4 = arguments.length, column = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      column[_key4] = arguments[_key4];\n    }\n    this.hideColumns(column);\n  }\n\n  /**\n   * Returns an array of visual indexes of hidden columns.\n   *\n   * @returns {number[]}\n   */\n  getHiddenColumns() {\n    return arrayMap(_classPrivateFieldGet(_hiddenColumnsMap, this).getHiddenIndexes(), physicalColumnIndex => {\n      return this.hot.toVisualColumn(physicalColumnIndex);\n    });\n  }\n\n  /**\n   * Checks if the provided column is hidden.\n   *\n   * @param {number} column Visual column index.\n   * @returns {boolean}\n   */\n  isHidden(column) {\n    return _classPrivateFieldGet(_hiddenColumnsMap, this).getValueAtIndex(this.hot.toPhysicalColumn(column)) || false;\n  }\n\n  /**\n   * Get if trim config is valid. Check whether all of the provided column indexes are within the bounds of the table.\n   *\n   * @param {Array} hiddenColumns List of hidden column indexes.\n   * @returns {boolean}\n   */\n  isValidConfig(hiddenColumns) {\n    const nrOfColumns = this.hot.countCols();\n    if (Array.isArray(hiddenColumns) && hiddenColumns.length > 0) {\n      return hiddenColumns.every(visualColumn => Number.isInteger(visualColumn) && visualColumn >= 0 && visualColumn < nrOfColumns);\n    }\n    return false;\n  }\n\n  /**\n   * Reset all rendered cells meta.\n   *\n   * @private\n   */\n  resetCellsMeta() {\n    arrayEach(this.hot.getCellsMeta(), meta => {\n      if (meta) {\n        meta.skipColumnOnPaste = false;\n      }\n    });\n  }\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    _classPrivateFieldSet(_settings, this, null);\n    _classPrivateFieldSet(_hiddenColumnsMap, this, null);\n    super.destroy();\n  }\n}\nfunction _onModifyColWidth(width, column) {\n  // Hook is triggered internally only for the visible columns. Conditional will be handled for the API\n  // calls of the `getColWidth` function on not visible indexes.\n  if (this.isHidden(column)) {\n    return 0;\n  }\n  if (_classPrivateFieldGet(_settings, this).indicators && (this.isHidden(column + 1) || this.isHidden(column - 1))) {\n    // Add additional space for hidden column indicator.\n    if (typeof width === 'number' && this.hot.hasColHeaders()) {\n      return width + 15;\n    }\n  }\n}\n/**\n * Sets the copy-related cell meta.\n *\n * @param {number} row Visual row index.\n * @param {number} column Visual column index.\n * @param {object} cellProperties Object containing the cell properties.\n */\nfunction _onAfterGetCellMeta(row, column, cellProperties) {\n  if (_classPrivateFieldGet(_settings, this).copyPasteEnabled === false && this.isHidden(column)) {\n    // Cell property handled by the `Autofill` and the `CopyPaste` plugins.\n    cellProperties.skipColumnOnPaste = true;\n  }\n  if (this.isHidden(column - 1)) {\n    cellProperties.className = cellProperties.className || '';\n    if (cellProperties.className.indexOf('afterHiddenColumn') === -1) {\n      cellProperties.className += ' afterHiddenColumn';\n    }\n  } else if (cellProperties.className) {\n    const classArr = cellProperties.className.split(' ');\n    if (classArr.length > 0) {\n      const containAfterHiddenColumn = classArr.indexOf('afterHiddenColumn');\n      if (containAfterHiddenColumn > -1) {\n        classArr.splice(containAfterHiddenColumn, 1);\n      }\n      cellProperties.className = classArr.join(' ');\n    }\n  }\n}\n/**\n * Modifies the copyable range, accordingly to the provided config.\n *\n * @param {Array} ranges An array of objects defining copyable cells.\n * @returns {Array}\n */\nfunction _onModifyCopyableRange(ranges) {\n  // Ranges shouldn't be modified when `copyPasteEnabled` option is set to `true` (by default).\n  if (_classPrivateFieldGet(_settings, this).copyPasteEnabled) {\n    return ranges;\n  }\n  const newRanges = [];\n  const pushRange = (startRow, endRow, startCol, endCol) => {\n    newRanges.push({\n      startRow,\n      endRow,\n      startCol,\n      endCol\n    });\n  };\n  arrayEach(ranges, range => {\n    let isHidden = true;\n    let rangeStart = 0;\n    rangeEach(range.startCol, range.endCol, visualColumn => {\n      if (this.isHidden(visualColumn)) {\n        if (!isHidden) {\n          pushRange(range.startRow, range.endRow, rangeStart, visualColumn - 1);\n        }\n        isHidden = true;\n      } else {\n        if (isHidden) {\n          rangeStart = visualColumn;\n        }\n        if (visualColumn === range.endCol) {\n          pushRange(range.startRow, range.endRow, rangeStart, visualColumn);\n        }\n        isHidden = false;\n      }\n    });\n  });\n  return newRanges;\n}\n/**\n * Adds the needed classes to the headers.\n *\n * @param {number} column Visual column index.\n * @param {HTMLElement} TH Header's TH element.\n */\nfunction _onAfterGetColHeader(column, TH) {\n  if (!_classPrivateFieldGet(_settings, this).indicators || column < 0) {\n    return;\n  }\n  const classList = [];\n  if (column >= 1 && this.isHidden(column - 1)) {\n    classList.push('afterHiddenColumn');\n  }\n  if (column < this.hot.countCols() - 1 && this.isHidden(column + 1)) {\n    classList.push('beforeHiddenColumn');\n  }\n  addClass(TH, classList);\n}\n/**\n * Add Show-hide columns to context menu.\n *\n * @param {object} options An array of objects containing information about the pre-defined Context Menu items.\n */\nfunction _onAfterContextMenuDefaultOptions(options) {\n  options.items.push({\n    name: SEPARATOR\n  }, hideColumnItem(this), showColumnItem(this));\n}\n/**\n * On map initialized hook callback.\n */\nfunction _onMapInit() {\n  if (Array.isArray(_classPrivateFieldGet(_settings, this).columns)) {\n    this.hideColumns(_classPrivateFieldGet(_settings, this).columns);\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}