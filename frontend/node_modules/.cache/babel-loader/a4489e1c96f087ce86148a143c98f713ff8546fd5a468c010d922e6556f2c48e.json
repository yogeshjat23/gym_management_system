{"ast":null,"code":"function _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport { isUndefined, isDefined } from \"../../helpers/mixed.mjs\";\nimport { mixin } from \"../../helpers/object.mjs\";\nimport localHooks from \"../../mixins/localHooks.mjs\"; // Counter for checking if there is a memory leak.\nlet registeredMaps = 0;\n\n/**\n * Collection of index maps having unique names. It allow us to perform bulk operations such as init, remove, insert on all index maps that have been registered in the collection.\n */\nexport class MapCollection {\n  constructor() {\n    /**\n     * Collection of index maps.\n     *\n     * @type {Map<string, IndexMap>}\n     */\n    _defineProperty(this, \"collection\", new Map());\n  }\n  /**\n   * Register custom index map.\n   *\n   * @param {string} uniqueName Unique name of the index map.\n   * @param {IndexMap} indexMap Index map containing miscellaneous (i.e. Meta data, indexes sequence), updated after remove and insert data actions.\n   */\n  register(uniqueName, indexMap) {\n    if (this.collection.has(uniqueName) === false) {\n      this.collection.set(uniqueName, indexMap);\n      indexMap.addLocalHook('change', () => this.runLocalHooks('change', indexMap));\n      registeredMaps += 1;\n    }\n  }\n\n  /**\n   * Unregister custom index map.\n   *\n   * @param {string} name Name of the index map.\n   */\n  unregister(name) {\n    const indexMap = this.collection.get(name);\n    if (isDefined(indexMap)) {\n      indexMap.destroy();\n      this.collection.delete(name);\n      this.runLocalHooks('change', indexMap);\n      registeredMaps -= 1;\n    }\n  }\n\n  /**\n   * Unregisters and destroys all collected index map instances.\n   */\n  unregisterAll() {\n    this.collection.forEach((indexMap, name) => this.unregister(name));\n    this.collection.clear();\n  }\n\n  /**\n   * Get index map for the provided name.\n   *\n   * @param {string} [name] Name of the index map.\n   * @returns {Array|IndexMap}\n   */\n  get(name) {\n    if (isUndefined(name)) {\n      return Array.from(this.collection.values());\n    }\n    return this.collection.get(name);\n  }\n\n  /**\n   * Get collection size.\n   *\n   * @returns {number}\n   */\n  getLength() {\n    return this.collection.size;\n  }\n\n  /**\n   * Remove some indexes and corresponding mappings and update values of the others within all collection's index maps.\n   *\n   * @private\n   * @param {Array} removedIndexes List of removed indexes.\n   */\n  removeFromEvery(removedIndexes) {\n    this.collection.forEach(indexMap => {\n      indexMap.remove(removedIndexes);\n    });\n  }\n\n  /**\n   * Insert new indexes and corresponding mapping and update values of the others all collection's index maps.\n   *\n   * @private\n   * @param {number} insertionIndex Position inside the actual list.\n   * @param {Array} insertedIndexes List of inserted indexes.\n   */\n  insertToEvery(insertionIndex, insertedIndexes) {\n    this.collection.forEach(indexMap => {\n      indexMap.insert(insertionIndex, insertedIndexes);\n    });\n  }\n\n  /**\n   * Set default values to index maps within collection.\n   *\n   * @param {number} length Destination length for all stored maps.\n   */\n  initEvery(length) {\n    this.collection.forEach(indexMap => {\n      indexMap.init(length);\n    });\n  }\n}\nmixin(MapCollection, localHooks);\n\n/**\n * @returns {number}\n */\nexport function getRegisteredMapsCounter() {\n  return registeredMaps;\n}","map":{"version":3,"names":["_defineProperty","e","r","t","_toPropertyKey","Object","defineProperty","value","enumerable","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","isUndefined","isDefined","mixin","localHooks","registeredMaps","MapCollection","constructor","Map","register","uniqueName","indexMap","collection","has","set","addLocalHook","runLocalHooks","unregister","name","get","destroy","delete","unregisterAll","forEach","clear","Array","from","values","getLength","size","removeFromEvery","removedIndexes","remove","insertToEvery","insertionIndex","insertedIndexes","insert","initEvery","length","init","getRegisteredMapsCounter"],"sources":["D:/gym-project/frontend/node_modules/handsontable/translations/mapCollections/mapCollection.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport { isUndefined, isDefined } from \"../../helpers/mixed.mjs\";\nimport { mixin } from \"../../helpers/object.mjs\";\nimport localHooks from \"../../mixins/localHooks.mjs\"; // Counter for checking if there is a memory leak.\nlet registeredMaps = 0;\n\n/**\n * Collection of index maps having unique names. It allow us to perform bulk operations such as init, remove, insert on all index maps that have been registered in the collection.\n */\nexport class MapCollection {\n  constructor() {\n    /**\n     * Collection of index maps.\n     *\n     * @type {Map<string, IndexMap>}\n     */\n    _defineProperty(this, \"collection\", new Map());\n  }\n  /**\n   * Register custom index map.\n   *\n   * @param {string} uniqueName Unique name of the index map.\n   * @param {IndexMap} indexMap Index map containing miscellaneous (i.e. Meta data, indexes sequence), updated after remove and insert data actions.\n   */\n  register(uniqueName, indexMap) {\n    if (this.collection.has(uniqueName) === false) {\n      this.collection.set(uniqueName, indexMap);\n      indexMap.addLocalHook('change', () => this.runLocalHooks('change', indexMap));\n      registeredMaps += 1;\n    }\n  }\n\n  /**\n   * Unregister custom index map.\n   *\n   * @param {string} name Name of the index map.\n   */\n  unregister(name) {\n    const indexMap = this.collection.get(name);\n    if (isDefined(indexMap)) {\n      indexMap.destroy();\n      this.collection.delete(name);\n      this.runLocalHooks('change', indexMap);\n      registeredMaps -= 1;\n    }\n  }\n\n  /**\n   * Unregisters and destroys all collected index map instances.\n   */\n  unregisterAll() {\n    this.collection.forEach((indexMap, name) => this.unregister(name));\n    this.collection.clear();\n  }\n\n  /**\n   * Get index map for the provided name.\n   *\n   * @param {string} [name] Name of the index map.\n   * @returns {Array|IndexMap}\n   */\n  get(name) {\n    if (isUndefined(name)) {\n      return Array.from(this.collection.values());\n    }\n    return this.collection.get(name);\n  }\n\n  /**\n   * Get collection size.\n   *\n   * @returns {number}\n   */\n  getLength() {\n    return this.collection.size;\n  }\n\n  /**\n   * Remove some indexes and corresponding mappings and update values of the others within all collection's index maps.\n   *\n   * @private\n   * @param {Array} removedIndexes List of removed indexes.\n   */\n  removeFromEvery(removedIndexes) {\n    this.collection.forEach(indexMap => {\n      indexMap.remove(removedIndexes);\n    });\n  }\n\n  /**\n   * Insert new indexes and corresponding mapping and update values of the others all collection's index maps.\n   *\n   * @private\n   * @param {number} insertionIndex Position inside the actual list.\n   * @param {Array} insertedIndexes List of inserted indexes.\n   */\n  insertToEvery(insertionIndex, insertedIndexes) {\n    this.collection.forEach(indexMap => {\n      indexMap.insert(insertionIndex, insertedIndexes);\n    });\n  }\n\n  /**\n   * Set default values to index maps within collection.\n   *\n   * @param {number} length Destination length for all stored maps.\n   */\n  initEvery(length) {\n    this.collection.forEach(indexMap => {\n      indexMap.init(length);\n    });\n  }\n}\nmixin(MapCollection, localHooks);\n\n/**\n * @returns {number}\n */\nexport function getRegisteredMapsCounter() {\n  return registeredMaps;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}