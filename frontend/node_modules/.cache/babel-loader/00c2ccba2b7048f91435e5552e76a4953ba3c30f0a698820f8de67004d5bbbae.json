{"ast":null,"code":"export const collection = new Map();\n\n/**\n * @param {string} namespace The namespace for the storage.\n * @returns {object}\n */\nexport default function staticRegister() {\n  let namespace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'common';\n  if (!collection.has(namespace)) {\n    collection.set(namespace, new Map());\n  }\n  const subCollection = collection.get(namespace);\n\n  /**\n   * Register an item to the collection. If the item under the same was exist earlier then this item will be replaced with new one.\n   *\n   * @param {string} name Identification of the item.\n   * @param {*} item Item to save in the collection.\n   */\n  function register(name, item) {\n    subCollection.set(name, item);\n  }\n\n  /**\n   * Retrieve the item from the collection.\n   *\n   * @param {string} name Identification of the item.\n   * @returns {*} Returns item which was saved in the collection.\n   */\n  function getItem(name) {\n    return subCollection.get(name);\n  }\n\n  /**\n   * Check if item under specified name is exists.\n   *\n   * @param {string} name Identification of the item.\n   * @returns {boolean} Returns `true` or `false` depends on if element exists in the collection.\n   */\n  function hasItem(name) {\n    return subCollection.has(name);\n  }\n\n  /**\n   * Retrieve list of names registered from the collection.\n   *\n   * @returns {Array} Returns an array of strings with all names under which objects are stored.\n   */\n  function getNames() {\n    return [...subCollection.keys()];\n  }\n\n  /**\n   * Retrieve all registered values from the collection.\n   *\n   * @returns {Array} Returns an array with all values stored in the collection.\n   */\n  function getValues() {\n    return [...subCollection.values()];\n  }\n  return {\n    register,\n    getItem,\n    hasItem,\n    getNames,\n    getValues\n  };\n}","map":{"version":3,"names":["collection","Map","staticRegister","namespace","arguments","length","undefined","has","set","subCollection","get","register","name","item","getItem","hasItem","getNames","keys","getValues","values"],"sources":["D:/gym-project/frontend/node_modules/handsontable/utils/staticRegister.mjs"],"sourcesContent":["export const collection = new Map();\n\n/**\n * @param {string} namespace The namespace for the storage.\n * @returns {object}\n */\nexport default function staticRegister() {\n  let namespace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'common';\n  if (!collection.has(namespace)) {\n    collection.set(namespace, new Map());\n  }\n  const subCollection = collection.get(namespace);\n\n  /**\n   * Register an item to the collection. If the item under the same was exist earlier then this item will be replaced with new one.\n   *\n   * @param {string} name Identification of the item.\n   * @param {*} item Item to save in the collection.\n   */\n  function register(name, item) {\n    subCollection.set(name, item);\n  }\n\n  /**\n   * Retrieve the item from the collection.\n   *\n   * @param {string} name Identification of the item.\n   * @returns {*} Returns item which was saved in the collection.\n   */\n  function getItem(name) {\n    return subCollection.get(name);\n  }\n\n  /**\n   * Check if item under specified name is exists.\n   *\n   * @param {string} name Identification of the item.\n   * @returns {boolean} Returns `true` or `false` depends on if element exists in the collection.\n   */\n  function hasItem(name) {\n    return subCollection.has(name);\n  }\n\n  /**\n   * Retrieve list of names registered from the collection.\n   *\n   * @returns {Array} Returns an array of strings with all names under which objects are stored.\n   */\n  function getNames() {\n    return [...subCollection.keys()];\n  }\n\n  /**\n   * Retrieve all registered values from the collection.\n   *\n   * @returns {Array} Returns an array with all values stored in the collection.\n   */\n  function getValues() {\n    return [...subCollection.values()];\n  }\n  return {\n    register,\n    getItem,\n    hasItem,\n    getNames,\n    getValues\n  };\n}"],"mappings":"AAAA,OAAO,MAAMA,UAAU,GAAG,IAAIC,GAAG,CAAC,CAAC;;AAEnC;AACA;AACA;AACA;AACA,eAAe,SAASC,cAAcA,CAAA,EAAG;EACvC,IAAIC,SAAS,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,QAAQ;EAC5F,IAAI,CAACJ,UAAU,CAACO,GAAG,CAACJ,SAAS,CAAC,EAAE;IAC9BH,UAAU,CAACQ,GAAG,CAACL,SAAS,EAAE,IAAIF,GAAG,CAAC,CAAC,CAAC;EACtC;EACA,MAAMQ,aAAa,GAAGT,UAAU,CAACU,GAAG,CAACP,SAAS,CAAC;;EAE/C;AACF;AACA;AACA;AACA;AACA;EACE,SAASQ,QAAQA,CAACC,IAAI,EAAEC,IAAI,EAAE;IAC5BJ,aAAa,CAACD,GAAG,CAACI,IAAI,EAAEC,IAAI,CAAC;EAC/B;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,SAASC,OAAOA,CAACF,IAAI,EAAE;IACrB,OAAOH,aAAa,CAACC,GAAG,CAACE,IAAI,CAAC;EAChC;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,SAASG,OAAOA,CAACH,IAAI,EAAE;IACrB,OAAOH,aAAa,CAACF,GAAG,CAACK,IAAI,CAAC;EAChC;;EAEA;AACF;AACA;AACA;AACA;EACE,SAASI,QAAQA,CAAA,EAAG;IAClB,OAAO,CAAC,GAAGP,aAAa,CAACQ,IAAI,CAAC,CAAC,CAAC;EAClC;;EAEA;AACF;AACA;AACA;AACA;EACE,SAASC,SAASA,CAAA,EAAG;IACnB,OAAO,CAAC,GAAGT,aAAa,CAACU,MAAM,CAAC,CAAC,CAAC;EACpC;EACA,OAAO;IACLR,QAAQ;IACRG,OAAO;IACPC,OAAO;IACPC,QAAQ;IACRE;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}