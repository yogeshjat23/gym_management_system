{"ast":null,"code":"import { defineGetter } from \"./../helpers/object.mjs\";\nimport { fastCall } from \"./../helpers/function.mjs\";\nconst MIXIN_NAME = 'localHooks';\n\n/**\n * Mixin object to extend objects functionality for local hooks.\n *\n * @type {object}\n */\nconst localHooks = {\n  /**\n   * Internal hooks storage.\n   */\n  _localHooks: Object.create(null),\n  /**\n   * Add hook to the collection.\n   *\n   * @param {string} key The hook name.\n   * @param {Function} callback The hook callback.\n   * @returns {object}\n   */\n  addLocalHook(key, callback) {\n    if (!this._localHooks[key]) {\n      this._localHooks[key] = [];\n    }\n    this._localHooks[key].push(callback);\n    return this;\n  },\n  /**\n   * Run hooks.\n   *\n   * @param {string} key The name of the hook to run.\n   * @param {*} [arg1] An additional parameter passed to the callback function.\n   * @param {*} [arg2] An additional parameter passed to the callback function.\n   * @param {*} [arg3] An additional parameter passed to the callback function.\n   * @param {*} [arg4] An additional parameter passed to the callback function.\n   * @param {*} [arg5] An additional parameter passed to the callback function.\n   * @param {*} [arg6] An additional parameter passed to the callback function.\n   */\n  runLocalHooks(key, arg1, arg2, arg3, arg4, arg5, arg6) {\n    if (this._localHooks[key]) {\n      const length = this._localHooks[key].length;\n\n      // don't optimize this loop with the `arrayEach()` method or arrow functions\n      // otherwise, performance will decrease because of garbage collection\n      // using the `...rest` syntax (ES6 and later) will decrease performance as well\n      for (let i = 0; i < length; i++) {\n        fastCall(this._localHooks[key][i], this, arg1, arg2, arg3, arg4, arg5, arg6);\n      }\n    }\n  },\n  /**\n   * Clear all added hooks.\n   *\n   * @returns {object}\n   */\n  clearLocalHooks() {\n    this._localHooks = {};\n    return this;\n  }\n};\ndefineGetter(localHooks, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nexport default localHooks;","map":{"version":3,"names":["defineGetter","fastCall","MIXIN_NAME","localHooks","_localHooks","Object","create","addLocalHook","key","callback","push","runLocalHooks","arg1","arg2","arg3","arg4","arg5","arg6","length","i","clearLocalHooks","writable","enumerable"],"sources":["D:/gym-project/frontend/node_modules/handsontable/mixins/localHooks.mjs"],"sourcesContent":["import \"core-js/modules/es.array.push.js\";\nimport { defineGetter } from \"./../helpers/object.mjs\";\nimport { fastCall } from \"./../helpers/function.mjs\";\nconst MIXIN_NAME = 'localHooks';\n\n/**\n * Mixin object to extend objects functionality for local hooks.\n *\n * @type {object}\n */\nconst localHooks = {\n  /**\n   * Internal hooks storage.\n   */\n  _localHooks: Object.create(null),\n  /**\n   * Add hook to the collection.\n   *\n   * @param {string} key The hook name.\n   * @param {Function} callback The hook callback.\n   * @returns {object}\n   */\n  addLocalHook(key, callback) {\n    if (!this._localHooks[key]) {\n      this._localHooks[key] = [];\n    }\n    this._localHooks[key].push(callback);\n    return this;\n  },\n  /**\n   * Run hooks.\n   *\n   * @param {string} key The name of the hook to run.\n   * @param {*} [arg1] An additional parameter passed to the callback function.\n   * @param {*} [arg2] An additional parameter passed to the callback function.\n   * @param {*} [arg3] An additional parameter passed to the callback function.\n   * @param {*} [arg4] An additional parameter passed to the callback function.\n   * @param {*} [arg5] An additional parameter passed to the callback function.\n   * @param {*} [arg6] An additional parameter passed to the callback function.\n   */\n  runLocalHooks(key, arg1, arg2, arg3, arg4, arg5, arg6) {\n    if (this._localHooks[key]) {\n      const length = this._localHooks[key].length;\n\n      // don't optimize this loop with the `arrayEach()` method or arrow functions\n      // otherwise, performance will decrease because of garbage collection\n      // using the `...rest` syntax (ES6 and later) will decrease performance as well\n      for (let i = 0; i < length; i++) {\n        fastCall(this._localHooks[key][i], this, arg1, arg2, arg3, arg4, arg5, arg6);\n      }\n    }\n  },\n  /**\n   * Clear all added hooks.\n   *\n   * @returns {object}\n   */\n  clearLocalHooks() {\n    this._localHooks = {};\n    return this;\n  }\n};\ndefineGetter(localHooks, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nexport default localHooks;"],"mappings":"AACA,SAASA,YAAY,QAAQ,yBAAyB;AACtD,SAASC,QAAQ,QAAQ,2BAA2B;AACpD,MAAMC,UAAU,GAAG,YAAY;;AAE/B;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAG;EACjB;AACF;AACA;EACEC,WAAW,EAAEC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EAChC;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,YAAYA,CAACC,GAAG,EAAEC,QAAQ,EAAE;IAC1B,IAAI,CAAC,IAAI,CAACL,WAAW,CAACI,GAAG,CAAC,EAAE;MAC1B,IAAI,CAACJ,WAAW,CAACI,GAAG,CAAC,GAAG,EAAE;IAC5B;IACA,IAAI,CAACJ,WAAW,CAACI,GAAG,CAAC,CAACE,IAAI,CAACD,QAAQ,CAAC;IACpC,OAAO,IAAI;EACb,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,aAAaA,CAACH,GAAG,EAAEI,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAE;IACrD,IAAI,IAAI,CAACb,WAAW,CAACI,GAAG,CAAC,EAAE;MACzB,MAAMU,MAAM,GAAG,IAAI,CAACd,WAAW,CAACI,GAAG,CAAC,CAACU,MAAM;;MAE3C;MACA;MACA;MACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,MAAM,EAAEC,CAAC,EAAE,EAAE;QAC/BlB,QAAQ,CAAC,IAAI,CAACG,WAAW,CAACI,GAAG,CAAC,CAACW,CAAC,CAAC,EAAE,IAAI,EAAEP,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,CAAC;MAC9E;IACF;EACF,CAAC;EACD;AACF;AACA;AACA;AACA;EACEG,eAAeA,CAAA,EAAG;IAChB,IAAI,CAAChB,WAAW,GAAG,CAAC,CAAC;IACrB,OAAO,IAAI;EACb;AACF,CAAC;AACDJ,YAAY,CAACG,UAAU,EAAE,YAAY,EAAED,UAAU,EAAE;EACjDmB,QAAQ,EAAE,KAAK;EACfC,UAAU,EAAE;AACd,CAAC,CAAC;AACF,eAAenB,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}