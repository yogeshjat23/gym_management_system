{"ast":null,"code":"function _classPrivateFieldInitSpec(e, t, a) {\n  _checkPrivateRedeclaration(e, t), t.set(e, a);\n}\nfunction _checkPrivateRedeclaration(e, t) {\n  if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _classPrivateFieldGet(s, a) {\n  return s.get(_assertClassBrand(s, a));\n}\nfunction _assertClassBrand(e, t, n) {\n  if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n;\n  throw new TypeError(\"Private element is not present on this object\");\n}\nvar _initOnlyCallback = /*#__PURE__*/new WeakMap();\n/**\n * @class ExtendMetaPropertiesMod\n */\nexport class ExtendMetaPropertiesMod {\n  constructor(metaManager) {\n    /**\n     * @type {MetaManager}\n     */\n    _defineProperty(this, \"metaManager\", void 0);\n    /**\n     * @type {Set}\n     */\n    _defineProperty(this, \"usageTracker\", new Set());\n    /**\n     * @type {Map}\n     */\n    _defineProperty(this, \"propDescriptors\", new Map([['ariaTags', {\n      initOnly: true\n    }], ['fixedColumnsLeft', {\n      target: 'fixedColumnsStart',\n      onChange(propName) {\n        const isRtl = this.metaManager.hot.isRtl();\n        if (isRtl && propName === 'fixedColumnsLeft') {\n          throw new Error('The `fixedColumnsLeft` is not supported for RTL. Please use option `fixedColumnsStart`.');\n        }\n        if (this.usageTracker.has('fixedColumnsLeft') && this.usageTracker.has('fixedColumnsStart')) {\n          throw new Error('The `fixedColumnsLeft` and `fixedColumnsStart` should not be used together. ' + 'Please use only the option `fixedColumnsStart`.');\n        }\n      }\n    }], ['layoutDirection', {\n      initOnly: true\n    }], ['renderAllColumns', {\n      initOnly: true\n    }], ['renderAllRows', {\n      initOnly: true\n    }]]));\n    /**\n     * Callback called when the prop is marked as `initOnly`.\n     *\n     * @param {string} propName The property name.\n     * @param {*} value The new value.\n     * @param {boolean} isInitialChange Is the change initial.\n     */\n    _classPrivateFieldInitSpec(this, _initOnlyCallback, (propName, value, isInitialChange) => {\n      if (!isInitialChange) {\n        throw new Error(`The \\`${propName}\\` option can not be updated after the Handsontable is initialized.`);\n      }\n    });\n    this.metaManager = metaManager;\n    this.extendMetaProps();\n  }\n  /**\n   * Extends the meta options based on the object descriptors from the `propDescriptors` list.\n   */\n  extendMetaProps() {\n    this.propDescriptors.forEach((descriptor, alias) => {\n      const {\n        initOnly,\n        target,\n        onChange\n      } = descriptor;\n      const hasTarget = typeof target === 'string';\n      const targetProp = hasTarget ? target : alias;\n      const origProp = `_${targetProp}`;\n      this.metaManager.globalMeta.meta[origProp] = this.metaManager.globalMeta.meta[targetProp];\n      if (onChange) {\n        this.installPropWatcher(alias, origProp, onChange);\n        if (hasTarget) {\n          this.installPropWatcher(target, origProp, onChange);\n        }\n      } else if (initOnly) {\n        this.installPropWatcher(alias, origProp, _classPrivateFieldGet(_initOnlyCallback, this));\n        if (!this.metaManager.globalMeta.meta._initOnlySettings) {\n          this.metaManager.globalMeta.meta._initOnlySettings = [];\n        }\n        this.metaManager.globalMeta.meta._initOnlySettings.push(alias);\n      }\n    });\n  }\n\n  /**\n   * Installs the property watcher to the `propName` option and forwards getter and setter to\n   * the new one.\n   *\n   * @param {string} propName The property to watch.\n   * @param {string} origProp The property from/to the value is forwarded.\n   * @param {Function} onChange The callback.\n   */\n  installPropWatcher(propName, origProp, onChange) {\n    const self = this;\n    Object.defineProperty(this.metaManager.globalMeta.meta, propName, {\n      get() {\n        return this[origProp];\n      },\n      set(value) {\n        const isInitialChange = !self.usageTracker.has(propName);\n        self.usageTracker.add(propName);\n        onChange.call(self, propName, value, isInitialChange);\n        this[origProp] = value;\n      },\n      enumerable: true,\n      configurable: true\n    });\n  }\n}","map":{"version":3,"names":["_classPrivateFieldInitSpec","e","t","a","_checkPrivateRedeclaration","set","has","TypeError","_defineProperty","r","_toPropertyKey","Object","defineProperty","value","enumerable","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","String","Number","_classPrivateFieldGet","s","get","_assertClassBrand","n","arguments","length","_initOnlyCallback","WeakMap","ExtendMetaPropertiesMod","constructor","metaManager","Set","Map","initOnly","target","onChange","propName","isRtl","hot","Error","usageTracker","isInitialChange","extendMetaProps","propDescriptors","forEach","descriptor","alias","hasTarget","targetProp","origProp","globalMeta","meta","installPropWatcher","_initOnlySettings","push","self","add"],"sources":["D:/gym-project/frontend/node_modules/handsontable/dataMap/metaManager/mods/extendMetaProperties.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nfunction _classPrivateFieldInitSpec(e, t, a) { _checkPrivateRedeclaration(e, t), t.set(e, a); }\nfunction _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }\nfunction _assertClassBrand(e, t, n) { if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError(\"Private element is not present on this object\"); }\nvar _initOnlyCallback = /*#__PURE__*/new WeakMap();\n/**\n * @class ExtendMetaPropertiesMod\n */\nexport class ExtendMetaPropertiesMod {\n  constructor(metaManager) {\n    /**\n     * @type {MetaManager}\n     */\n    _defineProperty(this, \"metaManager\", void 0);\n    /**\n     * @type {Set}\n     */\n    _defineProperty(this, \"usageTracker\", new Set());\n    /**\n     * @type {Map}\n     */\n    _defineProperty(this, \"propDescriptors\", new Map([['ariaTags', {\n      initOnly: true\n    }], ['fixedColumnsLeft', {\n      target: 'fixedColumnsStart',\n      onChange(propName) {\n        const isRtl = this.metaManager.hot.isRtl();\n        if (isRtl && propName === 'fixedColumnsLeft') {\n          throw new Error('The `fixedColumnsLeft` is not supported for RTL. Please use option `fixedColumnsStart`.');\n        }\n        if (this.usageTracker.has('fixedColumnsLeft') && this.usageTracker.has('fixedColumnsStart')) {\n          throw new Error('The `fixedColumnsLeft` and `fixedColumnsStart` should not be used together. ' + 'Please use only the option `fixedColumnsStart`.');\n        }\n      }\n    }], ['layoutDirection', {\n      initOnly: true\n    }], ['renderAllColumns', {\n      initOnly: true\n    }], ['renderAllRows', {\n      initOnly: true\n    }]]));\n    /**\n     * Callback called when the prop is marked as `initOnly`.\n     *\n     * @param {string} propName The property name.\n     * @param {*} value The new value.\n     * @param {boolean} isInitialChange Is the change initial.\n     */\n    _classPrivateFieldInitSpec(this, _initOnlyCallback, (propName, value, isInitialChange) => {\n      if (!isInitialChange) {\n        throw new Error(`The \\`${propName}\\` option can not be updated after the Handsontable is initialized.`);\n      }\n    });\n    this.metaManager = metaManager;\n    this.extendMetaProps();\n  }\n  /**\n   * Extends the meta options based on the object descriptors from the `propDescriptors` list.\n   */\n  extendMetaProps() {\n    this.propDescriptors.forEach((descriptor, alias) => {\n      const {\n        initOnly,\n        target,\n        onChange\n      } = descriptor;\n      const hasTarget = typeof target === 'string';\n      const targetProp = hasTarget ? target : alias;\n      const origProp = `_${targetProp}`;\n      this.metaManager.globalMeta.meta[origProp] = this.metaManager.globalMeta.meta[targetProp];\n      if (onChange) {\n        this.installPropWatcher(alias, origProp, onChange);\n        if (hasTarget) {\n          this.installPropWatcher(target, origProp, onChange);\n        }\n      } else if (initOnly) {\n        this.installPropWatcher(alias, origProp, _classPrivateFieldGet(_initOnlyCallback, this));\n        if (!this.metaManager.globalMeta.meta._initOnlySettings) {\n          this.metaManager.globalMeta.meta._initOnlySettings = [];\n        }\n        this.metaManager.globalMeta.meta._initOnlySettings.push(alias);\n      }\n    });\n  }\n\n  /**\n   * Installs the property watcher to the `propName` option and forwards getter and setter to\n   * the new one.\n   *\n   * @param {string} propName The property to watch.\n   * @param {string} origProp The property from/to the value is forwarded.\n   * @param {Function} onChange The callback.\n   */\n  installPropWatcher(propName, origProp, onChange) {\n    const self = this;\n    Object.defineProperty(this.metaManager.globalMeta.meta, propName, {\n      get() {\n        return this[origProp];\n      },\n      set(value) {\n        const isInitialChange = !self.usageTracker.has(propName);\n        self.usageTracker.add(propName);\n        onChange.call(self, propName, value, isInitialChange);\n        this[origProp] = value;\n      },\n      enumerable: true,\n      configurable: true\n    });\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}