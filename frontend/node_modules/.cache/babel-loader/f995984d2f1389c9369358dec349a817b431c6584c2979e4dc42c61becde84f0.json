{"ast":null,"code":"import { IndexMap } from \"./indexMap.mjs\";\nimport { getListWithRemovedItems, getListWithInsertedItems } from \"./utils/indexesSequence.mjs\";\nimport { getDecreasedIndexes, getIncreasedIndexes } from \"./utils/index.mjs\";\n/**\n * Map for storing mappings from an index to a physical index.\n *\n * It also updates the physical indexes (remaining in the map) on remove/add row or column action.\n *\n * @class IndexesSequence\n */\nexport class IndexesSequence extends IndexMap {\n  constructor() {\n    // Not handling custom init function or init value.\n    super(index => index);\n  }\n\n  /**\n   * Add values to list and reorganize.\n   *\n   * @private\n   * @param {number} insertionIndex Position inside the list.\n   * @param {Array} insertedIndexes List of inserted indexes.\n   */\n  insert(insertionIndex, insertedIndexes) {\n    const listAfterUpdate = getIncreasedIndexes(this.indexedValues, insertedIndexes);\n    this.indexedValues = getListWithInsertedItems(listAfterUpdate, insertionIndex, insertedIndexes);\n    super.insert(insertionIndex, insertedIndexes);\n  }\n\n  /**\n   * Remove values from the list and reorganize.\n   *\n   * @private\n   * @param {Array} removedIndexes List of removed indexes.\n   */\n  remove(removedIndexes) {\n    const listAfterUpdate = getListWithRemovedItems(this.indexedValues, removedIndexes);\n    this.indexedValues = getDecreasedIndexes(listAfterUpdate, removedIndexes);\n    super.remove(removedIndexes);\n  }\n}","map":{"version":3,"names":["IndexMap","getListWithRemovedItems","getListWithInsertedItems","getDecreasedIndexes","getIncreasedIndexes","IndexesSequence","constructor","index","insert","insertionIndex","insertedIndexes","listAfterUpdate","indexedValues","remove","removedIndexes"],"sources":["D:/gym-project/frontend/node_modules/handsontable/translations/maps/indexesSequence.mjs"],"sourcesContent":["import { IndexMap } from \"./indexMap.mjs\";\nimport { getListWithRemovedItems, getListWithInsertedItems } from \"./utils/indexesSequence.mjs\";\nimport { getDecreasedIndexes, getIncreasedIndexes } from \"./utils/index.mjs\";\n/**\n * Map for storing mappings from an index to a physical index.\n *\n * It also updates the physical indexes (remaining in the map) on remove/add row or column action.\n *\n * @class IndexesSequence\n */\nexport class IndexesSequence extends IndexMap {\n  constructor() {\n    // Not handling custom init function or init value.\n    super(index => index);\n  }\n\n  /**\n   * Add values to list and reorganize.\n   *\n   * @private\n   * @param {number} insertionIndex Position inside the list.\n   * @param {Array} insertedIndexes List of inserted indexes.\n   */\n  insert(insertionIndex, insertedIndexes) {\n    const listAfterUpdate = getIncreasedIndexes(this.indexedValues, insertedIndexes);\n    this.indexedValues = getListWithInsertedItems(listAfterUpdate, insertionIndex, insertedIndexes);\n    super.insert(insertionIndex, insertedIndexes);\n  }\n\n  /**\n   * Remove values from the list and reorganize.\n   *\n   * @private\n   * @param {Array} removedIndexes List of removed indexes.\n   */\n  remove(removedIndexes) {\n    const listAfterUpdate = getListWithRemovedItems(this.indexedValues, removedIndexes);\n    this.indexedValues = getDecreasedIndexes(listAfterUpdate, removedIndexes);\n    super.remove(removedIndexes);\n  }\n}"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,uBAAuB,EAAEC,wBAAwB,QAAQ,6BAA6B;AAC/F,SAASC,mBAAmB,EAAEC,mBAAmB,QAAQ,mBAAmB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,SAASL,QAAQ,CAAC;EAC5CM,WAAWA,CAAA,EAAG;IACZ;IACA,KAAK,CAACC,KAAK,IAAIA,KAAK,CAAC;EACvB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,MAAMA,CAACC,cAAc,EAAEC,eAAe,EAAE;IACtC,MAAMC,eAAe,GAAGP,mBAAmB,CAAC,IAAI,CAACQ,aAAa,EAAEF,eAAe,CAAC;IAChF,IAAI,CAACE,aAAa,GAAGV,wBAAwB,CAACS,eAAe,EAAEF,cAAc,EAAEC,eAAe,CAAC;IAC/F,KAAK,CAACF,MAAM,CAACC,cAAc,EAAEC,eAAe,CAAC;EAC/C;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEG,MAAMA,CAACC,cAAc,EAAE;IACrB,MAAMH,eAAe,GAAGV,uBAAuB,CAAC,IAAI,CAACW,aAAa,EAAEE,cAAc,CAAC;IACnF,IAAI,CAACF,aAAa,GAAGT,mBAAmB,CAACQ,eAAe,EAAEG,cAAc,CAAC;IACzE,KAAK,CAACD,MAAM,CAACC,cAAc,CAAC;EAC9B;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}