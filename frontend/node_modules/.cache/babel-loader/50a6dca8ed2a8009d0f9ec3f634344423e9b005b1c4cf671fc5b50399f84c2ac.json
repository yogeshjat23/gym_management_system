{"ast":null,"code":"export const command = {\n  name: 'populateSelectedCellsData',\n  callback(hot) {\n    const selectedRange = hot.getSelectedRange();\n    const {\n      row: highlightRow,\n      col: highlightColumn\n    } = selectedRange[selectedRange.length - 1].highlight.normalize();\n    const valueToPopulate = hot.getDataAtCell(highlightRow, highlightColumn);\n    const cellValues = new Map();\n    for (let i = 0; i < selectedRange.length; i++) {\n      selectedRange[i].forAll((row, column) => {\n        if (row >= 0 && column >= 0 && (row !== highlightRow || column !== highlightColumn)) {\n          const {\n            readOnly\n          } = hot.getCellMeta(row, column);\n          if (!readOnly) {\n            cellValues.set(`${row}x${column}`, [row, column, valueToPopulate]);\n          }\n        }\n      });\n    }\n    hot.setDataAtCell(Array.from(cellValues.values()));\n  }\n};","map":{"version":3,"names":["command","name","callback","hot","selectedRange","getSelectedRange","row","highlightRow","col","highlightColumn","length","highlight","normalize","valueToPopulate","getDataAtCell","cellValues","Map","i","forAll","column","readOnly","getCellMeta","set","setDataAtCell","Array","from","values"],"sources":["D:/gym-project/frontend/node_modules/handsontable/shortcutContexts/commands/populateSelectedCellsData.mjs"],"sourcesContent":["export const command = {\n  name: 'populateSelectedCellsData',\n  callback(hot) {\n    const selectedRange = hot.getSelectedRange();\n    const {\n      row: highlightRow,\n      col: highlightColumn\n    } = selectedRange[selectedRange.length - 1].highlight.normalize();\n    const valueToPopulate = hot.getDataAtCell(highlightRow, highlightColumn);\n    const cellValues = new Map();\n    for (let i = 0; i < selectedRange.length; i++) {\n      selectedRange[i].forAll((row, column) => {\n        if (row >= 0 && column >= 0 && (row !== highlightRow || column !== highlightColumn)) {\n          const {\n            readOnly\n          } = hot.getCellMeta(row, column);\n          if (!readOnly) {\n            cellValues.set(`${row}x${column}`, [row, column, valueToPopulate]);\n          }\n        }\n      });\n    }\n    hot.setDataAtCell(Array.from(cellValues.values()));\n  }\n};"],"mappings":"AAAA,OAAO,MAAMA,OAAO,GAAG;EACrBC,IAAI,EAAE,2BAA2B;EACjCC,QAAQA,CAACC,GAAG,EAAE;IACZ,MAAMC,aAAa,GAAGD,GAAG,CAACE,gBAAgB,CAAC,CAAC;IAC5C,MAAM;MACJC,GAAG,EAAEC,YAAY;MACjBC,GAAG,EAAEC;IACP,CAAC,GAAGL,aAAa,CAACA,aAAa,CAACM,MAAM,GAAG,CAAC,CAAC,CAACC,SAAS,CAACC,SAAS,CAAC,CAAC;IACjE,MAAMC,eAAe,GAAGV,GAAG,CAACW,aAAa,CAACP,YAAY,EAAEE,eAAe,CAAC;IACxE,MAAMM,UAAU,GAAG,IAAIC,GAAG,CAAC,CAAC;IAC5B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,aAAa,CAACM,MAAM,EAAEO,CAAC,EAAE,EAAE;MAC7Cb,aAAa,CAACa,CAAC,CAAC,CAACC,MAAM,CAAC,CAACZ,GAAG,EAAEa,MAAM,KAAK;QACvC,IAAIb,GAAG,IAAI,CAAC,IAAIa,MAAM,IAAI,CAAC,KAAKb,GAAG,KAAKC,YAAY,IAAIY,MAAM,KAAKV,eAAe,CAAC,EAAE;UACnF,MAAM;YACJW;UACF,CAAC,GAAGjB,GAAG,CAACkB,WAAW,CAACf,GAAG,EAAEa,MAAM,CAAC;UAChC,IAAI,CAACC,QAAQ,EAAE;YACbL,UAAU,CAACO,GAAG,CAAC,GAAGhB,GAAG,IAAIa,MAAM,EAAE,EAAE,CAACb,GAAG,EAAEa,MAAM,EAAEN,eAAe,CAAC,CAAC;UACpE;QACF;MACF,CAAC,CAAC;IACJ;IACAV,GAAG,CAACoB,aAAa,CAACC,KAAK,CAACC,IAAI,CAACV,UAAU,CAACW,MAAM,CAAC,CAAC,CAAC,CAAC;EACpD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}