{"ast":null,"code":"import { AutocompleteEditor } from \"../autocompleteEditor/index.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nexport const EDITOR_TYPE = 'dropdown';\n\n/**\n * @private\n * @class DropdownEditor\n */\nexport class DropdownEditor extends AutocompleteEditor {\n  static get EDITOR_TYPE() {\n    return EDITOR_TYPE;\n  }\n\n  /**\n   * @param {number} row The visual row index.\n   * @param {number} col The visual column index.\n   * @param {number|string} prop The column property (passed when datasource is an array of objects).\n   * @param {HTMLTableCellElement} td The rendered cell element.\n   * @param {*} value The rendered value.\n   * @param {object} cellProperties The cell meta object (see {@link Core#getCellMeta}).\n   */\n  prepare(row, col, prop, td, value, cellProperties) {\n    super.prepare(row, col, prop, td, value, cellProperties);\n    this.cellProperties.filter = false;\n    this.cellProperties.strict = true;\n  }\n}\nHooks.getSingleton().add('beforeValidate', function (value, row, col) {\n  const visualColumnIndex = this.propToCol(col);\n  if (Number.isInteger(visualColumnIndex)) {\n    const cellMeta = this.getCellMeta(row, visualColumnIndex);\n    if (cellMeta.editor === DropdownEditor) {\n      if (cellMeta.strict === undefined) {\n        cellMeta.filter = false;\n        cellMeta.strict = true;\n      }\n    }\n  }\n});","map":{"version":3,"names":["AutocompleteEditor","Hooks","EDITOR_TYPE","DropdownEditor","prepare","row","col","prop","td","value","cellProperties","filter","strict","getSingleton","add","visualColumnIndex","propToCol","Number","isInteger","cellMeta","getCellMeta","editor","undefined"],"sources":["D:/gym-project/frontend/node_modules/handsontable/editors/dropdownEditor/dropdownEditor.mjs"],"sourcesContent":["import { AutocompleteEditor } from \"../autocompleteEditor/index.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nexport const EDITOR_TYPE = 'dropdown';\n\n/**\n * @private\n * @class DropdownEditor\n */\nexport class DropdownEditor extends AutocompleteEditor {\n  static get EDITOR_TYPE() {\n    return EDITOR_TYPE;\n  }\n\n  /**\n   * @param {number} row The visual row index.\n   * @param {number} col The visual column index.\n   * @param {number|string} prop The column property (passed when datasource is an array of objects).\n   * @param {HTMLTableCellElement} td The rendered cell element.\n   * @param {*} value The rendered value.\n   * @param {object} cellProperties The cell meta object (see {@link Core#getCellMeta}).\n   */\n  prepare(row, col, prop, td, value, cellProperties) {\n    super.prepare(row, col, prop, td, value, cellProperties);\n    this.cellProperties.filter = false;\n    this.cellProperties.strict = true;\n  }\n}\nHooks.getSingleton().add('beforeValidate', function (value, row, col) {\n  const visualColumnIndex = this.propToCol(col);\n  if (Number.isInteger(visualColumnIndex)) {\n    const cellMeta = this.getCellMeta(row, visualColumnIndex);\n    if (cellMeta.editor === DropdownEditor) {\n      if (cellMeta.strict === undefined) {\n        cellMeta.filter = false;\n        cellMeta.strict = true;\n      }\n    }\n  }\n});"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,iCAAiC;AACpE,OAAOC,KAAK,MAAM,uBAAuB;AACzC,OAAO,MAAMC,WAAW,GAAG,UAAU;;AAErC;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,SAASH,kBAAkB,CAAC;EACrD,WAAWE,WAAWA,CAAA,EAAG;IACvB,OAAOA,WAAW;EACpB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,OAAOA,CAACC,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAEC,EAAE,EAAEC,KAAK,EAAEC,cAAc,EAAE;IACjD,KAAK,CAACN,OAAO,CAACC,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAEC,EAAE,EAAEC,KAAK,EAAEC,cAAc,CAAC;IACxD,IAAI,CAACA,cAAc,CAACC,MAAM,GAAG,KAAK;IAClC,IAAI,CAACD,cAAc,CAACE,MAAM,GAAG,IAAI;EACnC;AACF;AACAX,KAAK,CAACY,YAAY,CAAC,CAAC,CAACC,GAAG,CAAC,gBAAgB,EAAE,UAAUL,KAAK,EAAEJ,GAAG,EAAEC,GAAG,EAAE;EACpE,MAAMS,iBAAiB,GAAG,IAAI,CAACC,SAAS,CAACV,GAAG,CAAC;EAC7C,IAAIW,MAAM,CAACC,SAAS,CAACH,iBAAiB,CAAC,EAAE;IACvC,MAAMI,QAAQ,GAAG,IAAI,CAACC,WAAW,CAACf,GAAG,EAAEU,iBAAiB,CAAC;IACzD,IAAII,QAAQ,CAACE,MAAM,KAAKlB,cAAc,EAAE;MACtC,IAAIgB,QAAQ,CAACP,MAAM,KAAKU,SAAS,EAAE;QACjCH,QAAQ,CAACR,MAAM,GAAG,KAAK;QACvBQ,QAAQ,CAACP,MAAM,GAAG,IAAI;MACxB;IACF;EACF;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}