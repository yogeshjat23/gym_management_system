{"ast":null,"code":"function _classPrivateMethodInitSpec(e, a) {\n  _checkPrivateRedeclaration(e, a), a.add(e);\n}\nfunction _classPrivateFieldInitSpec(e, t, a) {\n  _checkPrivateRedeclaration(e, t), t.set(e, a);\n}\nfunction _checkPrivateRedeclaration(e, t) {\n  if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n}\nfunction _classPrivateFieldGet(s, a) {\n  return s.get(_assertClassBrand(s, a));\n}\nfunction _classPrivateFieldSet(s, a, r) {\n  return s.set(_assertClassBrand(s, a), r), r;\n}\nfunction _assertClassBrand(e, t, n) {\n  if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n;\n  throw new TypeError(\"Private element is not present on this object\");\n}\nimport { removeClass, addClass, setAttribute, removeAttribute } from \"../../../../helpers/dom/element.mjs\";\nimport { SelectionScanner } from \"./scanner.mjs\";\nimport Border from \"./border/border.mjs\";\n/**\n * Module responsible for rendering selections (CSS classes) and borders based on the\n * collection of the Selection instances provided throughout the `selections` Walkontable\n * setting.\n *\n * @private\n */\nvar _activeOverlaysWot = /*#__PURE__*/new WeakMap();\nvar _selections = /*#__PURE__*/new WeakMap();\nvar _scanner = /*#__PURE__*/new WeakMap();\nvar _appliedClasses = /*#__PURE__*/new WeakMap();\nvar _destroyListeners = /*#__PURE__*/new WeakMap();\nvar _selectionBorders = /*#__PURE__*/new WeakMap();\nvar _SelectionManager_brand = /*#__PURE__*/new WeakSet();\nexport class SelectionManager {\n  constructor(selections) {\n    /**\n     * Resets the elements to their initial state (remove the CSS classes that are added in the\n     * previous render cycle).\n     */\n    _classPrivateMethodInitSpec(this, _SelectionManager_brand);\n    /**\n     * The overlay's Walkontable instance that are currently processed.\n     *\n     * @type {Walkontable}\n     */\n    _classPrivateFieldInitSpec(this, _activeOverlaysWot, void 0);\n    /**\n     * The Highlight instance that holds Selections instances within it.\n     *\n     * @type {Highlight|null}\n     */\n    _classPrivateFieldInitSpec(this, _selections, void 0);\n    /**\n     * The SelectionScanner allows to scan and collect the cell and header elements that matches\n     * to the coords defined in the selections.\n     *\n     * @type {SelectionScanner}\n     */\n    _classPrivateFieldInitSpec(this, _scanner, new SelectionScanner());\n    /**\n     * The Map tracks applied CSS classes. It's used to reset the elements state to their initial state.\n     *\n     * @type {WeakMap}\n     */\n    _classPrivateFieldInitSpec(this, _appliedClasses, new WeakMap());\n    /**\n     * The Map tracks applied \"destroy\" listeners for Selection instances.\n     *\n     * @type {WeakMap}\n     */\n    _classPrivateFieldInitSpec(this, _destroyListeners, new WeakSet());\n    /**\n     * The Map holds references to Border classes for Selection instances which requires that when\n     * the \"border\" setting is defined.\n     *\n     * @type {Map}\n     */\n    _classPrivateFieldInitSpec(this, _selectionBorders, new Map());\n    _classPrivateFieldSet(_selections, this, selections);\n  }\n\n  /**\n   * Sets the active Walkontable instance.\n   *\n   * @param {Walkontable} activeWot The overlays or master Walkontable instance.\n   * @returns {SelectionManager}\n   */\n  setActiveOverlay(activeWot) {\n    _classPrivateFieldSet(_activeOverlaysWot, this, activeWot);\n    _classPrivateFieldGet(_scanner, this).setActiveOverlay(_classPrivateFieldGet(_activeOverlaysWot, this));\n    if (!_classPrivateFieldGet(_appliedClasses, this).has(_classPrivateFieldGet(_activeOverlaysWot, this))) {\n      _classPrivateFieldGet(_appliedClasses, this).set(_classPrivateFieldGet(_activeOverlaysWot, this), new Set());\n    }\n    return this;\n  }\n\n  /**\n   * Gets the Selection instance of the \"focus\" type.\n   *\n   * @returns {Selection|null}\n   */\n  getFocusSelection() {\n    return _classPrivateFieldGet(_selections, this) !== null ? _classPrivateFieldGet(_selections, this).getFocus() : null;\n  }\n\n  /**\n   * Gets the Selection instance of the \"area\" type.\n   *\n   * @returns {Selection|null}\n   */\n  getAreaSelection() {\n    return _classPrivateFieldGet(_selections, this) !== null ? _classPrivateFieldGet(_selections, this).createLayeredArea() : null;\n  }\n\n  /**\n   * Gets the Border instance associated with Selection instance.\n   *\n   * @param {Selection} selection The selection instance.\n   * @returns {Border|null} Returns the Border instance (new for each overlay Walkontable instance).\n   */\n  getBorderInstance(selection) {\n    if (!selection.settings.border) {\n      return null;\n    }\n    if (_classPrivateFieldGet(_selectionBorders, this).has(selection)) {\n      const borders = _classPrivateFieldGet(_selectionBorders, this).get(selection);\n      if (borders.has(_classPrivateFieldGet(_activeOverlaysWot, this))) {\n        return borders.get(_classPrivateFieldGet(_activeOverlaysWot, this));\n      }\n      const border = new Border(_classPrivateFieldGet(_activeOverlaysWot, this), selection.settings);\n      borders.set(_classPrivateFieldGet(_activeOverlaysWot, this), border);\n      return border;\n    }\n    const border = new Border(_classPrivateFieldGet(_activeOverlaysWot, this), selection.settings);\n    _classPrivateFieldGet(_selectionBorders, this).set(selection, new Map([[_classPrivateFieldGet(_activeOverlaysWot, this), border]]));\n    return border;\n  }\n\n  /**\n   * Gets all Border instances associated with Selection instance for all overlays.\n   *\n   * @param {Selection} selection The selection instance.\n   * @returns {Border[]}\n   */\n  getBorderInstances(selection) {\n    var _classPrivateFieldGet2, _classPrivateFieldGet3;\n    return Array.from((_classPrivateFieldGet2 = (_classPrivateFieldGet3 = _classPrivateFieldGet(_selectionBorders, this).get(selection)) === null || _classPrivateFieldGet3 === void 0 ? void 0 : _classPrivateFieldGet3.values()) !== null && _classPrivateFieldGet2 !== void 0 ? _classPrivateFieldGet2 : []);\n  }\n\n  /**\n   * Destroys the Border instance associated with Selection instance.\n   *\n   * @param {Selection} selection The selection instance.\n   */\n  destroyBorders(selection) {\n    _classPrivateFieldGet(_selectionBorders, this).get(selection).forEach(border => border.destroy());\n    _classPrivateFieldGet(_selectionBorders, this).delete(selection);\n  }\n\n  /**\n   * Renders all the selections (add CSS classes to cells and draw borders).\n   *\n   * @param {boolean} fastDraw Indicates the render cycle type (fast/slow).\n   */\n  render(fastDraw) {\n    if (_classPrivateFieldGet(_selections, this) === null) {\n      return;\n    }\n    if (fastDraw) {\n      // there was no rerender, so we need to remove classNames by ourselves\n      _assertClassBrand(_SelectionManager_brand, this, _resetCells).call(this);\n    }\n    const selections = Array.from(_classPrivateFieldGet(_selections, this));\n    const classNamesMap = new Map();\n    const headerAttributesMap = new Map();\n    for (let i = 0; i < selections.length; i++) {\n      const selection = selections[i];\n      const {\n        className,\n        headerAttributes,\n        createLayers,\n        selectionType\n      } = selection.settings;\n      if (!_classPrivateFieldGet(_destroyListeners, this).has(selection)) {\n        _classPrivateFieldGet(_destroyListeners, this).add(selection);\n        selection.addLocalHook('destroy', () => this.destroyBorders(selection));\n      }\n      const borderInstance = this.getBorderInstance(selection);\n      if (selection.isEmpty()) {\n        borderInstance === null || borderInstance === void 0 || borderInstance.disappear();\n        continue; // eslint-disable-line no-continue\n      }\n      if (className) {\n        const elements = _classPrivateFieldGet(_scanner, this).setActiveSelection(selection).scan();\n        elements.forEach(element => {\n          if (classNamesMap.has(element)) {\n            const classNamesLayers = classNamesMap.get(element);\n            if (classNamesLayers.has(className) && createLayers === true) {\n              classNamesLayers.set(className, classNamesLayers.get(className) + 1);\n            } else {\n              classNamesLayers.set(className, 1);\n            }\n          } else {\n            classNamesMap.set(element, new Map([[className, 1]]));\n          }\n          if (headerAttributes) {\n            if (!headerAttributesMap.has(element)) {\n              headerAttributesMap.set(element, []);\n            }\n            if (element.nodeName === 'TH') {\n              headerAttributesMap.get(element).push(...headerAttributes);\n            }\n          }\n        });\n      }\n      const corners = selection.getCorners();\n      _classPrivateFieldGet(_activeOverlaysWot, this).getSetting('onBeforeDrawBorders', corners, selectionType);\n      borderInstance === null || borderInstance === void 0 || borderInstance.appear(corners);\n    }\n    classNamesMap.forEach((classNamesLayers, element) => {\n      var _classPrivateFieldGet4;\n      const classNames = Array.from(classNamesLayers).map(_ref => {\n        let [className, occurrenceCount] = _ref;\n        if (occurrenceCount === 1) {\n          return className;\n        }\n        return [className, ...Array.from({\n          length: occurrenceCount - 1\n        }, (_, i) => `${className}-${i + 1}`)];\n      }).flat();\n      classNames.forEach(className => _classPrivateFieldGet(_appliedClasses, this).get(_classPrivateFieldGet(_activeOverlaysWot, this)).add(className));\n      addClass(element, classNames);\n      if (element.nodeName === 'TD' && Array.isArray((_classPrivateFieldGet4 = _classPrivateFieldGet(_selections, this).options) === null || _classPrivateFieldGet4 === void 0 ? void 0 : _classPrivateFieldGet4.cellAttributes)) {\n        setAttribute(element, _classPrivateFieldGet(_selections, this).options.cellAttributes);\n      }\n    });\n\n    // Set the attributes for the headers if they're focused.\n    Array.from(headerAttributesMap.keys()).forEach(element => {\n      setAttribute(element, [...headerAttributesMap.get(element)]);\n    });\n  }\n}\nfunction _resetCells() {\n  const appliedOverlaysClasses = _classPrivateFieldGet(_appliedClasses, this).get(_classPrivateFieldGet(_activeOverlaysWot, this));\n  const classesToRemove = _classPrivateFieldGet(_activeOverlaysWot, this).wtSettings.getSetting('onBeforeRemoveCellClassNames');\n  if (Array.isArray(classesToRemove)) {\n    for (let i = 0; i < classesToRemove.length; i++) {\n      appliedOverlaysClasses.add(classesToRemove[i]);\n    }\n  }\n  appliedOverlaysClasses.forEach(className => {\n    var _classPrivateFieldGet5, _classPrivateFieldGet6;\n    const nodes = _classPrivateFieldGet(_activeOverlaysWot, this).wtTable.TABLE.querySelectorAll(`.${className}`);\n    let cellAttributes = [];\n    if (Array.isArray((_classPrivateFieldGet5 = _classPrivateFieldGet(_selections, this).options) === null || _classPrivateFieldGet5 === void 0 ? void 0 : _classPrivateFieldGet5.cellAttributes)) {\n      cellAttributes = _classPrivateFieldGet(_selections, this).options.cellAttributes.map(el => el[0]);\n    }\n    if (Array.isArray((_classPrivateFieldGet6 = _classPrivateFieldGet(_selections, this).options) === null || _classPrivateFieldGet6 === void 0 ? void 0 : _classPrivateFieldGet6.headerAttributes)) {\n      cellAttributes = [...cellAttributes, ..._classPrivateFieldGet(_selections, this).options.headerAttributes.map(el => el[0])];\n    }\n    for (let i = 0, len = nodes.length; i < len; i++) {\n      removeClass(nodes[i], className);\n      removeAttribute(nodes[i], cellAttributes);\n    }\n  });\n  appliedOverlaysClasses.clear();\n}","map":{"version":3,"names":["_classPrivateMethodInitSpec","e","a","_checkPrivateRedeclaration","add","_classPrivateFieldInitSpec","t","set","has","TypeError","_classPrivateFieldGet","s","get","_assertClassBrand","_classPrivateFieldSet","r","n","arguments","length","removeClass","addClass","setAttribute","removeAttribute","SelectionScanner","Border","_activeOverlaysWot","WeakMap","_selections","_scanner","_appliedClasses","_destroyListeners","_selectionBorders","_SelectionManager_brand","WeakSet","SelectionManager","constructor","selections","Map","setActiveOverlay","activeWot","Set","getFocusSelection","getFocus","getAreaSelection","createLayeredArea","getBorderInstance","selection","settings","border","borders","getBorderInstances","_classPrivateFieldGet2","_classPrivateFieldGet3","Array","from","values","destroyBorders","forEach","destroy","delete","render","fastDraw","_resetCells","call","classNamesMap","headerAttributesMap","i","className","headerAttributes","createLayers","selectionType","addLocalHook","borderInstance","isEmpty","disappear","elements","setActiveSelection","scan","element","classNamesLayers","nodeName","push","corners","getCorners","getSetting","appear","_classPrivateFieldGet4","classNames","map","_ref","occurrenceCount","_","flat","isArray","options","cellAttributes","keys","appliedOverlaysClasses","classesToRemove","wtSettings","_classPrivateFieldGet5","_classPrivateFieldGet6","nodes","wtTable","TABLE","querySelectorAll","el","len","clear"],"sources":["D:/gym-project/frontend/node_modules/handsontable/3rdparty/walkontable/src/selection/manager.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.unscopables.flat.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nfunction _classPrivateMethodInitSpec(e, a) { _checkPrivateRedeclaration(e, a), a.add(e); }\nfunction _classPrivateFieldInitSpec(e, t, a) { _checkPrivateRedeclaration(e, t), t.set(e, a); }\nfunction _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); }\nfunction _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }\nfunction _classPrivateFieldSet(s, a, r) { return s.set(_assertClassBrand(s, a), r), r; }\nfunction _assertClassBrand(e, t, n) { if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError(\"Private element is not present on this object\"); }\nimport { removeClass, addClass, setAttribute, removeAttribute } from \"../../../../helpers/dom/element.mjs\";\nimport { SelectionScanner } from \"./scanner.mjs\";\nimport Border from \"./border/border.mjs\";\n/**\n * Module responsible for rendering selections (CSS classes) and borders based on the\n * collection of the Selection instances provided throughout the `selections` Walkontable\n * setting.\n *\n * @private\n */\nvar _activeOverlaysWot = /*#__PURE__*/new WeakMap();\nvar _selections = /*#__PURE__*/new WeakMap();\nvar _scanner = /*#__PURE__*/new WeakMap();\nvar _appliedClasses = /*#__PURE__*/new WeakMap();\nvar _destroyListeners = /*#__PURE__*/new WeakMap();\nvar _selectionBorders = /*#__PURE__*/new WeakMap();\nvar _SelectionManager_brand = /*#__PURE__*/new WeakSet();\nexport class SelectionManager {\n  constructor(selections) {\n    /**\n     * Resets the elements to their initial state (remove the CSS classes that are added in the\n     * previous render cycle).\n     */\n    _classPrivateMethodInitSpec(this, _SelectionManager_brand);\n    /**\n     * The overlay's Walkontable instance that are currently processed.\n     *\n     * @type {Walkontable}\n     */\n    _classPrivateFieldInitSpec(this, _activeOverlaysWot, void 0);\n    /**\n     * The Highlight instance that holds Selections instances within it.\n     *\n     * @type {Highlight|null}\n     */\n    _classPrivateFieldInitSpec(this, _selections, void 0);\n    /**\n     * The SelectionScanner allows to scan and collect the cell and header elements that matches\n     * to the coords defined in the selections.\n     *\n     * @type {SelectionScanner}\n     */\n    _classPrivateFieldInitSpec(this, _scanner, new SelectionScanner());\n    /**\n     * The Map tracks applied CSS classes. It's used to reset the elements state to their initial state.\n     *\n     * @type {WeakMap}\n     */\n    _classPrivateFieldInitSpec(this, _appliedClasses, new WeakMap());\n    /**\n     * The Map tracks applied \"destroy\" listeners for Selection instances.\n     *\n     * @type {WeakMap}\n     */\n    _classPrivateFieldInitSpec(this, _destroyListeners, new WeakSet());\n    /**\n     * The Map holds references to Border classes for Selection instances which requires that when\n     * the \"border\" setting is defined.\n     *\n     * @type {Map}\n     */\n    _classPrivateFieldInitSpec(this, _selectionBorders, new Map());\n    _classPrivateFieldSet(_selections, this, selections);\n  }\n\n  /**\n   * Sets the active Walkontable instance.\n   *\n   * @param {Walkontable} activeWot The overlays or master Walkontable instance.\n   * @returns {SelectionManager}\n   */\n  setActiveOverlay(activeWot) {\n    _classPrivateFieldSet(_activeOverlaysWot, this, activeWot);\n    _classPrivateFieldGet(_scanner, this).setActiveOverlay(_classPrivateFieldGet(_activeOverlaysWot, this));\n    if (!_classPrivateFieldGet(_appliedClasses, this).has(_classPrivateFieldGet(_activeOverlaysWot, this))) {\n      _classPrivateFieldGet(_appliedClasses, this).set(_classPrivateFieldGet(_activeOverlaysWot, this), new Set());\n    }\n    return this;\n  }\n\n  /**\n   * Gets the Selection instance of the \"focus\" type.\n   *\n   * @returns {Selection|null}\n   */\n  getFocusSelection() {\n    return _classPrivateFieldGet(_selections, this) !== null ? _classPrivateFieldGet(_selections, this).getFocus() : null;\n  }\n\n  /**\n   * Gets the Selection instance of the \"area\" type.\n   *\n   * @returns {Selection|null}\n   */\n  getAreaSelection() {\n    return _classPrivateFieldGet(_selections, this) !== null ? _classPrivateFieldGet(_selections, this).createLayeredArea() : null;\n  }\n\n  /**\n   * Gets the Border instance associated with Selection instance.\n   *\n   * @param {Selection} selection The selection instance.\n   * @returns {Border|null} Returns the Border instance (new for each overlay Walkontable instance).\n   */\n  getBorderInstance(selection) {\n    if (!selection.settings.border) {\n      return null;\n    }\n    if (_classPrivateFieldGet(_selectionBorders, this).has(selection)) {\n      const borders = _classPrivateFieldGet(_selectionBorders, this).get(selection);\n      if (borders.has(_classPrivateFieldGet(_activeOverlaysWot, this))) {\n        return borders.get(_classPrivateFieldGet(_activeOverlaysWot, this));\n      }\n      const border = new Border(_classPrivateFieldGet(_activeOverlaysWot, this), selection.settings);\n      borders.set(_classPrivateFieldGet(_activeOverlaysWot, this), border);\n      return border;\n    }\n    const border = new Border(_classPrivateFieldGet(_activeOverlaysWot, this), selection.settings);\n    _classPrivateFieldGet(_selectionBorders, this).set(selection, new Map([[_classPrivateFieldGet(_activeOverlaysWot, this), border]]));\n    return border;\n  }\n\n  /**\n   * Gets all Border instances associated with Selection instance for all overlays.\n   *\n   * @param {Selection} selection The selection instance.\n   * @returns {Border[]}\n   */\n  getBorderInstances(selection) {\n    var _classPrivateFieldGet2, _classPrivateFieldGet3;\n    return Array.from((_classPrivateFieldGet2 = (_classPrivateFieldGet3 = _classPrivateFieldGet(_selectionBorders, this).get(selection)) === null || _classPrivateFieldGet3 === void 0 ? void 0 : _classPrivateFieldGet3.values()) !== null && _classPrivateFieldGet2 !== void 0 ? _classPrivateFieldGet2 : []);\n  }\n\n  /**\n   * Destroys the Border instance associated with Selection instance.\n   *\n   * @param {Selection} selection The selection instance.\n   */\n  destroyBorders(selection) {\n    _classPrivateFieldGet(_selectionBorders, this).get(selection).forEach(border => border.destroy());\n    _classPrivateFieldGet(_selectionBorders, this).delete(selection);\n  }\n\n  /**\n   * Renders all the selections (add CSS classes to cells and draw borders).\n   *\n   * @param {boolean} fastDraw Indicates the render cycle type (fast/slow).\n   */\n  render(fastDraw) {\n    if (_classPrivateFieldGet(_selections, this) === null) {\n      return;\n    }\n    if (fastDraw) {\n      // there was no rerender, so we need to remove classNames by ourselves\n      _assertClassBrand(_SelectionManager_brand, this, _resetCells).call(this);\n    }\n    const selections = Array.from(_classPrivateFieldGet(_selections, this));\n    const classNamesMap = new Map();\n    const headerAttributesMap = new Map();\n    for (let i = 0; i < selections.length; i++) {\n      const selection = selections[i];\n      const {\n        className,\n        headerAttributes,\n        createLayers,\n        selectionType\n      } = selection.settings;\n      if (!_classPrivateFieldGet(_destroyListeners, this).has(selection)) {\n        _classPrivateFieldGet(_destroyListeners, this).add(selection);\n        selection.addLocalHook('destroy', () => this.destroyBorders(selection));\n      }\n      const borderInstance = this.getBorderInstance(selection);\n      if (selection.isEmpty()) {\n        borderInstance === null || borderInstance === void 0 || borderInstance.disappear();\n        continue; // eslint-disable-line no-continue\n      }\n      if (className) {\n        const elements = _classPrivateFieldGet(_scanner, this).setActiveSelection(selection).scan();\n        elements.forEach(element => {\n          if (classNamesMap.has(element)) {\n            const classNamesLayers = classNamesMap.get(element);\n            if (classNamesLayers.has(className) && createLayers === true) {\n              classNamesLayers.set(className, classNamesLayers.get(className) + 1);\n            } else {\n              classNamesLayers.set(className, 1);\n            }\n          } else {\n            classNamesMap.set(element, new Map([[className, 1]]));\n          }\n          if (headerAttributes) {\n            if (!headerAttributesMap.has(element)) {\n              headerAttributesMap.set(element, []);\n            }\n            if (element.nodeName === 'TH') {\n              headerAttributesMap.get(element).push(...headerAttributes);\n            }\n          }\n        });\n      }\n      const corners = selection.getCorners();\n      _classPrivateFieldGet(_activeOverlaysWot, this).getSetting('onBeforeDrawBorders', corners, selectionType);\n      borderInstance === null || borderInstance === void 0 || borderInstance.appear(corners);\n    }\n    classNamesMap.forEach((classNamesLayers, element) => {\n      var _classPrivateFieldGet4;\n      const classNames = Array.from(classNamesLayers).map(_ref => {\n        let [className, occurrenceCount] = _ref;\n        if (occurrenceCount === 1) {\n          return className;\n        }\n        return [className, ...Array.from({\n          length: occurrenceCount - 1\n        }, (_, i) => `${className}-${i + 1}`)];\n      }).flat();\n      classNames.forEach(className => _classPrivateFieldGet(_appliedClasses, this).get(_classPrivateFieldGet(_activeOverlaysWot, this)).add(className));\n      addClass(element, classNames);\n      if (element.nodeName === 'TD' && Array.isArray((_classPrivateFieldGet4 = _classPrivateFieldGet(_selections, this).options) === null || _classPrivateFieldGet4 === void 0 ? void 0 : _classPrivateFieldGet4.cellAttributes)) {\n        setAttribute(element, _classPrivateFieldGet(_selections, this).options.cellAttributes);\n      }\n    });\n\n    // Set the attributes for the headers if they're focused.\n    Array.from(headerAttributesMap.keys()).forEach(element => {\n      setAttribute(element, [...headerAttributesMap.get(element)]);\n    });\n  }\n}\nfunction _resetCells() {\n  const appliedOverlaysClasses = _classPrivateFieldGet(_appliedClasses, this).get(_classPrivateFieldGet(_activeOverlaysWot, this));\n  const classesToRemove = _classPrivateFieldGet(_activeOverlaysWot, this).wtSettings.getSetting('onBeforeRemoveCellClassNames');\n  if (Array.isArray(classesToRemove)) {\n    for (let i = 0; i < classesToRemove.length; i++) {\n      appliedOverlaysClasses.add(classesToRemove[i]);\n    }\n  }\n  appliedOverlaysClasses.forEach(className => {\n    var _classPrivateFieldGet5, _classPrivateFieldGet6;\n    const nodes = _classPrivateFieldGet(_activeOverlaysWot, this).wtTable.TABLE.querySelectorAll(`.${className}`);\n    let cellAttributes = [];\n    if (Array.isArray((_classPrivateFieldGet5 = _classPrivateFieldGet(_selections, this).options) === null || _classPrivateFieldGet5 === void 0 ? void 0 : _classPrivateFieldGet5.cellAttributes)) {\n      cellAttributes = _classPrivateFieldGet(_selections, this).options.cellAttributes.map(el => el[0]);\n    }\n    if (Array.isArray((_classPrivateFieldGet6 = _classPrivateFieldGet(_selections, this).options) === null || _classPrivateFieldGet6 === void 0 ? void 0 : _classPrivateFieldGet6.headerAttributes)) {\n      cellAttributes = [...cellAttributes, ..._classPrivateFieldGet(_selections, this).options.headerAttributes.map(el => el[0])];\n    }\n    for (let i = 0, len = nodes.length; i < len; i++) {\n      removeClass(nodes[i], className);\n      removeAttribute(nodes[i], cellAttributes);\n    }\n  });\n  appliedOverlaysClasses.clear();\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}