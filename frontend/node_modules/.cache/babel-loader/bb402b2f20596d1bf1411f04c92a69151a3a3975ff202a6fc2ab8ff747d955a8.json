{"ast":null,"code":"import { clone } from \"../../helpers/object.mjs\";\nimport { arrayEach } from \"../../helpers/array.mjs\";\nimport { SEPARATOR } from \"../contextMenu/predefinedItems/index.mjs\";\nimport { getConditionDescriptor } from \"./conditionRegisterer.mjs\";\nimport { CONDITION_NAME as CONDITION_NONE } from \"./condition/none.mjs\";\nimport { CONDITION_NAME as CONDITION_EMPTY } from \"./condition/empty.mjs\";\nimport { CONDITION_NAME as CONDITION_NOT_EMPTY } from \"./condition/notEmpty.mjs\";\nimport { CONDITION_NAME as CONDITION_EQUAL } from \"./condition/equal.mjs\";\nimport { CONDITION_NAME as CONDITION_NOT_EQUAL } from \"./condition/notEqual.mjs\";\nimport { CONDITION_NAME as CONDITION_GREATER_THAN } from \"./condition/greaterThan.mjs\";\nimport { CONDITION_NAME as CONDITION_GREATER_THAN_OR_EQUAL } from \"./condition/greaterThanOrEqual.mjs\";\nimport { CONDITION_NAME as CONDITION_LESS_THAN } from \"./condition/lessThan.mjs\";\nimport { CONDITION_NAME as CONDITION_LESS_THAN_OR_EQUAL } from \"./condition/lessThanOrEqual.mjs\";\nimport { CONDITION_NAME as CONDITION_BETWEEN } from \"./condition/between.mjs\";\nimport { CONDITION_NAME as CONDITION_NOT_BETWEEN } from \"./condition/notBetween.mjs\";\nimport { CONDITION_NAME as CONDITION_BEGINS_WITH } from \"./condition/beginsWith.mjs\";\nimport { CONDITION_NAME as CONDITION_ENDS_WITH } from \"./condition/endsWith.mjs\";\nimport { CONDITION_NAME as CONDITION_CONTAINS } from \"./condition/contains.mjs\";\nimport { CONDITION_NAME as CONDITION_NOT_CONTAINS } from \"./condition/notContains.mjs\";\nimport { CONDITION_NAME as CONDITION_DATE_BEFORE } from \"./condition/date/before.mjs\";\nimport { CONDITION_NAME as CONDITION_DATE_AFTER } from \"./condition/date/after.mjs\";\nimport { CONDITION_NAME as CONDITION_TOMORROW } from \"./condition/date/tomorrow.mjs\";\nimport { CONDITION_NAME as CONDITION_TODAY } from \"./condition/date/today.mjs\";\nimport { CONDITION_NAME as CONDITION_YESTERDAY } from \"./condition/date/yesterday.mjs\";\nimport { CONDITION_NAME as CONDITION_BY_VALUE } from \"./condition/byValue.mjs\";\nimport { CONDITION_NAME as CONDITION_TRUE } from \"./condition/true.mjs\";\nimport { CONDITION_NAME as CONDITION_FALSE } from \"./condition/false.mjs\";\nimport { OPERATION_ID as OPERATION_AND } from \"./logicalOperations/conjunction.mjs\";\nimport { OPERATION_ID as OPERATION_OR } from \"./logicalOperations/disjunction.mjs\";\nimport { OPERATION_ID as OPERATION_OR_THEN_VARIABLE } from \"./logicalOperations/disjunctionWithExtraCondition.mjs\";\nexport { CONDITION_NONE, CONDITION_EMPTY, CONDITION_NOT_EMPTY, CONDITION_EQUAL, CONDITION_NOT_EQUAL, CONDITION_GREATER_THAN, CONDITION_GREATER_THAN_OR_EQUAL, CONDITION_LESS_THAN, CONDITION_LESS_THAN_OR_EQUAL, CONDITION_BETWEEN, CONDITION_NOT_BETWEEN, CONDITION_BEGINS_WITH, CONDITION_ENDS_WITH, CONDITION_CONTAINS, CONDITION_NOT_CONTAINS, CONDITION_DATE_BEFORE, CONDITION_DATE_AFTER, CONDITION_TOMORROW, CONDITION_TODAY, CONDITION_YESTERDAY, CONDITION_BY_VALUE, CONDITION_TRUE, CONDITION_FALSE, OPERATION_AND, OPERATION_OR, OPERATION_OR_THEN_VARIABLE };\nexport const TYPE_NUMERIC = 'numeric';\nexport const TYPE_TEXT = 'text';\nexport const TYPE_DATE = 'date';\n/**\n * Default types and order for filter conditions.\n *\n * @type {object}\n */\nexport const TYPES = {\n  [TYPE_NUMERIC]: [CONDITION_NONE, SEPARATOR, CONDITION_EMPTY, CONDITION_NOT_EMPTY, SEPARATOR, CONDITION_EQUAL, CONDITION_NOT_EQUAL, SEPARATOR, CONDITION_GREATER_THAN, CONDITION_GREATER_THAN_OR_EQUAL, CONDITION_LESS_THAN, CONDITION_LESS_THAN_OR_EQUAL, CONDITION_BETWEEN, CONDITION_NOT_BETWEEN],\n  [TYPE_TEXT]: [CONDITION_NONE, SEPARATOR, CONDITION_EMPTY, CONDITION_NOT_EMPTY, SEPARATOR, CONDITION_EQUAL, CONDITION_NOT_EQUAL, SEPARATOR, CONDITION_BEGINS_WITH, CONDITION_ENDS_WITH, SEPARATOR, CONDITION_CONTAINS, CONDITION_NOT_CONTAINS],\n  [TYPE_DATE]: [CONDITION_NONE, SEPARATOR, CONDITION_EMPTY, CONDITION_NOT_EMPTY, SEPARATOR, CONDITION_EQUAL, CONDITION_NOT_EQUAL, SEPARATOR, CONDITION_DATE_BEFORE, CONDITION_DATE_AFTER, CONDITION_BETWEEN, SEPARATOR, CONDITION_TOMORROW, CONDITION_TODAY, CONDITION_YESTERDAY]\n};\n\n/**\n * Get options list for conditional filter by data type (e.q: `'text'`, `'numeric'`, `'date'`).\n *\n * @private\n * @param {string} type The data type.\n * @returns {object}\n */\nexport default function getOptionsList(type) {\n  const items = [];\n  let typeName = type;\n  if (!TYPES[typeName]) {\n    typeName = TYPE_TEXT;\n  }\n  arrayEach(TYPES[typeName], typeValue => {\n    let option;\n    if (typeValue === SEPARATOR) {\n      option = {\n        name: SEPARATOR\n      };\n    } else {\n      option = clone(getConditionDescriptor(typeValue));\n    }\n    items.push(option);\n  });\n  return items;\n}","map":{"version":3,"names":["clone","arrayEach","SEPARATOR","getConditionDescriptor","CONDITION_NAME","CONDITION_NONE","CONDITION_EMPTY","CONDITION_NOT_EMPTY","CONDITION_EQUAL","CONDITION_NOT_EQUAL","CONDITION_GREATER_THAN","CONDITION_GREATER_THAN_OR_EQUAL","CONDITION_LESS_THAN","CONDITION_LESS_THAN_OR_EQUAL","CONDITION_BETWEEN","CONDITION_NOT_BETWEEN","CONDITION_BEGINS_WITH","CONDITION_ENDS_WITH","CONDITION_CONTAINS","CONDITION_NOT_CONTAINS","CONDITION_DATE_BEFORE","CONDITION_DATE_AFTER","CONDITION_TOMORROW","CONDITION_TODAY","CONDITION_YESTERDAY","CONDITION_BY_VALUE","CONDITION_TRUE","CONDITION_FALSE","OPERATION_ID","OPERATION_AND","OPERATION_OR","OPERATION_OR_THEN_VARIABLE","TYPE_NUMERIC","TYPE_TEXT","TYPE_DATE","TYPES","getOptionsList","type","items","typeName","typeValue","option","name","push"],"sources":["D:/gym-project/frontend/node_modules/handsontable/plugins/filters/constants.mjs"],"sourcesContent":["import \"core-js/modules/es.array.push.js\";\nimport { clone } from \"../../helpers/object.mjs\";\nimport { arrayEach } from \"../../helpers/array.mjs\";\nimport { SEPARATOR } from \"../contextMenu/predefinedItems/index.mjs\";\nimport { getConditionDescriptor } from \"./conditionRegisterer.mjs\";\nimport { CONDITION_NAME as CONDITION_NONE } from \"./condition/none.mjs\";\nimport { CONDITION_NAME as CONDITION_EMPTY } from \"./condition/empty.mjs\";\nimport { CONDITION_NAME as CONDITION_NOT_EMPTY } from \"./condition/notEmpty.mjs\";\nimport { CONDITION_NAME as CONDITION_EQUAL } from \"./condition/equal.mjs\";\nimport { CONDITION_NAME as CONDITION_NOT_EQUAL } from \"./condition/notEqual.mjs\";\nimport { CONDITION_NAME as CONDITION_GREATER_THAN } from \"./condition/greaterThan.mjs\";\nimport { CONDITION_NAME as CONDITION_GREATER_THAN_OR_EQUAL } from \"./condition/greaterThanOrEqual.mjs\";\nimport { CONDITION_NAME as CONDITION_LESS_THAN } from \"./condition/lessThan.mjs\";\nimport { CONDITION_NAME as CONDITION_LESS_THAN_OR_EQUAL } from \"./condition/lessThanOrEqual.mjs\";\nimport { CONDITION_NAME as CONDITION_BETWEEN } from \"./condition/between.mjs\";\nimport { CONDITION_NAME as CONDITION_NOT_BETWEEN } from \"./condition/notBetween.mjs\";\nimport { CONDITION_NAME as CONDITION_BEGINS_WITH } from \"./condition/beginsWith.mjs\";\nimport { CONDITION_NAME as CONDITION_ENDS_WITH } from \"./condition/endsWith.mjs\";\nimport { CONDITION_NAME as CONDITION_CONTAINS } from \"./condition/contains.mjs\";\nimport { CONDITION_NAME as CONDITION_NOT_CONTAINS } from \"./condition/notContains.mjs\";\nimport { CONDITION_NAME as CONDITION_DATE_BEFORE } from \"./condition/date/before.mjs\";\nimport { CONDITION_NAME as CONDITION_DATE_AFTER } from \"./condition/date/after.mjs\";\nimport { CONDITION_NAME as CONDITION_TOMORROW } from \"./condition/date/tomorrow.mjs\";\nimport { CONDITION_NAME as CONDITION_TODAY } from \"./condition/date/today.mjs\";\nimport { CONDITION_NAME as CONDITION_YESTERDAY } from \"./condition/date/yesterday.mjs\";\nimport { CONDITION_NAME as CONDITION_BY_VALUE } from \"./condition/byValue.mjs\";\nimport { CONDITION_NAME as CONDITION_TRUE } from \"./condition/true.mjs\";\nimport { CONDITION_NAME as CONDITION_FALSE } from \"./condition/false.mjs\";\nimport { OPERATION_ID as OPERATION_AND } from \"./logicalOperations/conjunction.mjs\";\nimport { OPERATION_ID as OPERATION_OR } from \"./logicalOperations/disjunction.mjs\";\nimport { OPERATION_ID as OPERATION_OR_THEN_VARIABLE } from \"./logicalOperations/disjunctionWithExtraCondition.mjs\";\nexport { CONDITION_NONE, CONDITION_EMPTY, CONDITION_NOT_EMPTY, CONDITION_EQUAL, CONDITION_NOT_EQUAL, CONDITION_GREATER_THAN, CONDITION_GREATER_THAN_OR_EQUAL, CONDITION_LESS_THAN, CONDITION_LESS_THAN_OR_EQUAL, CONDITION_BETWEEN, CONDITION_NOT_BETWEEN, CONDITION_BEGINS_WITH, CONDITION_ENDS_WITH, CONDITION_CONTAINS, CONDITION_NOT_CONTAINS, CONDITION_DATE_BEFORE, CONDITION_DATE_AFTER, CONDITION_TOMORROW, CONDITION_TODAY, CONDITION_YESTERDAY, CONDITION_BY_VALUE, CONDITION_TRUE, CONDITION_FALSE, OPERATION_AND, OPERATION_OR, OPERATION_OR_THEN_VARIABLE };\nexport const TYPE_NUMERIC = 'numeric';\nexport const TYPE_TEXT = 'text';\nexport const TYPE_DATE = 'date';\n/**\n * Default types and order for filter conditions.\n *\n * @type {object}\n */\nexport const TYPES = {\n  [TYPE_NUMERIC]: [CONDITION_NONE, SEPARATOR, CONDITION_EMPTY, CONDITION_NOT_EMPTY, SEPARATOR, CONDITION_EQUAL, CONDITION_NOT_EQUAL, SEPARATOR, CONDITION_GREATER_THAN, CONDITION_GREATER_THAN_OR_EQUAL, CONDITION_LESS_THAN, CONDITION_LESS_THAN_OR_EQUAL, CONDITION_BETWEEN, CONDITION_NOT_BETWEEN],\n  [TYPE_TEXT]: [CONDITION_NONE, SEPARATOR, CONDITION_EMPTY, CONDITION_NOT_EMPTY, SEPARATOR, CONDITION_EQUAL, CONDITION_NOT_EQUAL, SEPARATOR, CONDITION_BEGINS_WITH, CONDITION_ENDS_WITH, SEPARATOR, CONDITION_CONTAINS, CONDITION_NOT_CONTAINS],\n  [TYPE_DATE]: [CONDITION_NONE, SEPARATOR, CONDITION_EMPTY, CONDITION_NOT_EMPTY, SEPARATOR, CONDITION_EQUAL, CONDITION_NOT_EQUAL, SEPARATOR, CONDITION_DATE_BEFORE, CONDITION_DATE_AFTER, CONDITION_BETWEEN, SEPARATOR, CONDITION_TOMORROW, CONDITION_TODAY, CONDITION_YESTERDAY]\n};\n\n/**\n * Get options list for conditional filter by data type (e.q: `'text'`, `'numeric'`, `'date'`).\n *\n * @private\n * @param {string} type The data type.\n * @returns {object}\n */\nexport default function getOptionsList(type) {\n  const items = [];\n  let typeName = type;\n  if (!TYPES[typeName]) {\n    typeName = TYPE_TEXT;\n  }\n  arrayEach(TYPES[typeName], typeValue => {\n    let option;\n    if (typeValue === SEPARATOR) {\n      option = {\n        name: SEPARATOR\n      };\n    } else {\n      option = clone(getConditionDescriptor(typeValue));\n    }\n    items.push(option);\n  });\n  return items;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}