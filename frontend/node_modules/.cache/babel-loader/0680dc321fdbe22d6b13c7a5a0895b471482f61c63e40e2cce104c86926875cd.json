{"ast":null,"code":"import { isObject } from \"../../helpers/object.mjs\";\nimport { isDefined } from \"../../helpers/mixed.mjs\";\nexport const DIRECTIONS = {\n  horizontal: 'horizontal',\n  vertical: 'vertical'\n};\n\n/**\n * Get direction between positions and cords of selections difference (drag area).\n *\n * @param {Array} startSelection The coordinates where the selection starts.\n * @param {Array} endSelection The coordinates where the selection ends.\n * @param {Function} cellCoordsFactory The function factory for CellCoords objects.\n * @returns {{direction: string, start: CellCoords, end: CellCoords}}\n */\nexport function getDragDirectionAndRange(startSelection, endSelection, cellCoordsFactory) {\n  let startOfDragCoords;\n  let endOfDragCoords;\n  let directionOfDrag;\n  if (endSelection[0] === startSelection[0] && endSelection[1] < startSelection[1]) {\n    directionOfDrag = 'left';\n    startOfDragCoords = cellCoordsFactory(endSelection[0], endSelection[1]);\n    endOfDragCoords = cellCoordsFactory(endSelection[2], startSelection[1] - 1);\n  } else if (endSelection[2] === startSelection[2] && endSelection[0] === startSelection[0] && endSelection[3] > startSelection[3]) {\n    directionOfDrag = 'right';\n    startOfDragCoords = cellCoordsFactory(endSelection[0], startSelection[3] + 1);\n    endOfDragCoords = cellCoordsFactory(endSelection[2], endSelection[3]);\n  } else if (endSelection[0] < startSelection[0] && endSelection[1] === startSelection[1]) {\n    directionOfDrag = 'up';\n    startOfDragCoords = cellCoordsFactory(endSelection[0], endSelection[1]);\n    endOfDragCoords = cellCoordsFactory(startSelection[0] - 1, endSelection[3]);\n  } else if (endSelection[2] > startSelection[2] && endSelection[1] === startSelection[1]) {\n    directionOfDrag = 'down';\n    startOfDragCoords = cellCoordsFactory(startSelection[2] + 1, endSelection[1]);\n    endOfDragCoords = cellCoordsFactory(endSelection[2], endSelection[3]);\n  }\n  if (startOfDragCoords) {\n    startOfDragCoords.normalize();\n  }\n  if (endOfDragCoords) {\n    endOfDragCoords.normalize();\n  }\n  return {\n    directionOfDrag,\n    startOfDragCoords,\n    endOfDragCoords\n  };\n}\n\n/**\n * Get mapped FillHandle setting containing information about\n * allowed FillHandle directions and if allowed is automatic insertion of rows on drag.\n *\n * @param {boolean|object} fillHandle Property of Handsontable settings.\n * @returns {{directions: Array, autoInsertRow: boolean}} Object allowing access to information\n * about FillHandle in more useful way.\n */\nexport function getMappedFillHandleSetting(fillHandle) {\n  const mappedSettings = {};\n  if (fillHandle === true) {\n    mappedSettings.directions = Object.keys(DIRECTIONS);\n    mappedSettings.autoInsertRow = true;\n  } else if (isObject(fillHandle)) {\n    if (isDefined(fillHandle.autoInsertRow)) {\n      // autoInsertRow for horizontal direction will be always false\n\n      if (fillHandle.direction === DIRECTIONS.horizontal) {\n        mappedSettings.autoInsertRow = false;\n      } else {\n        mappedSettings.autoInsertRow = fillHandle.autoInsertRow;\n      }\n    } else {\n      mappedSettings.autoInsertRow = false;\n    }\n    if (isDefined(fillHandle.direction)) {\n      mappedSettings.directions = [fillHandle.direction];\n    } else {\n      mappedSettings.directions = Object.keys(DIRECTIONS);\n    }\n  } else if (typeof fillHandle === 'string') {\n    mappedSettings.directions = [fillHandle];\n    mappedSettings.autoInsertRow = true;\n  } else {\n    mappedSettings.directions = [];\n    mappedSettings.autoInsertRow = false;\n  }\n  return mappedSettings;\n}","map":{"version":3,"names":["isObject","isDefined","DIRECTIONS","horizontal","vertical","getDragDirectionAndRange","startSelection","endSelection","cellCoordsFactory","startOfDragCoords","endOfDragCoords","directionOfDrag","normalize","getMappedFillHandleSetting","fillHandle","mappedSettings","directions","Object","keys","autoInsertRow","direction"],"sources":["D:/gym-project/frontend/node_modules/handsontable/plugins/autofill/utils.mjs"],"sourcesContent":["import { isObject } from \"../../helpers/object.mjs\";\nimport { isDefined } from \"../../helpers/mixed.mjs\";\nexport const DIRECTIONS = {\n  horizontal: 'horizontal',\n  vertical: 'vertical'\n};\n\n/**\n * Get direction between positions and cords of selections difference (drag area).\n *\n * @param {Array} startSelection The coordinates where the selection starts.\n * @param {Array} endSelection The coordinates where the selection ends.\n * @param {Function} cellCoordsFactory The function factory for CellCoords objects.\n * @returns {{direction: string, start: CellCoords, end: CellCoords}}\n */\nexport function getDragDirectionAndRange(startSelection, endSelection, cellCoordsFactory) {\n  let startOfDragCoords;\n  let endOfDragCoords;\n  let directionOfDrag;\n  if (endSelection[0] === startSelection[0] && endSelection[1] < startSelection[1]) {\n    directionOfDrag = 'left';\n    startOfDragCoords = cellCoordsFactory(endSelection[0], endSelection[1]);\n    endOfDragCoords = cellCoordsFactory(endSelection[2], startSelection[1] - 1);\n  } else if (endSelection[2] === startSelection[2] && endSelection[0] === startSelection[0] && endSelection[3] > startSelection[3]) {\n    directionOfDrag = 'right';\n    startOfDragCoords = cellCoordsFactory(endSelection[0], startSelection[3] + 1);\n    endOfDragCoords = cellCoordsFactory(endSelection[2], endSelection[3]);\n  } else if (endSelection[0] < startSelection[0] && endSelection[1] === startSelection[1]) {\n    directionOfDrag = 'up';\n    startOfDragCoords = cellCoordsFactory(endSelection[0], endSelection[1]);\n    endOfDragCoords = cellCoordsFactory(startSelection[0] - 1, endSelection[3]);\n  } else if (endSelection[2] > startSelection[2] && endSelection[1] === startSelection[1]) {\n    directionOfDrag = 'down';\n    startOfDragCoords = cellCoordsFactory(startSelection[2] + 1, endSelection[1]);\n    endOfDragCoords = cellCoordsFactory(endSelection[2], endSelection[3]);\n  }\n  if (startOfDragCoords) {\n    startOfDragCoords.normalize();\n  }\n  if (endOfDragCoords) {\n    endOfDragCoords.normalize();\n  }\n  return {\n    directionOfDrag,\n    startOfDragCoords,\n    endOfDragCoords\n  };\n}\n\n/**\n * Get mapped FillHandle setting containing information about\n * allowed FillHandle directions and if allowed is automatic insertion of rows on drag.\n *\n * @param {boolean|object} fillHandle Property of Handsontable settings.\n * @returns {{directions: Array, autoInsertRow: boolean}} Object allowing access to information\n * about FillHandle in more useful way.\n */\nexport function getMappedFillHandleSetting(fillHandle) {\n  const mappedSettings = {};\n  if (fillHandle === true) {\n    mappedSettings.directions = Object.keys(DIRECTIONS);\n    mappedSettings.autoInsertRow = true;\n  } else if (isObject(fillHandle)) {\n    if (isDefined(fillHandle.autoInsertRow)) {\n      // autoInsertRow for horizontal direction will be always false\n\n      if (fillHandle.direction === DIRECTIONS.horizontal) {\n        mappedSettings.autoInsertRow = false;\n      } else {\n        mappedSettings.autoInsertRow = fillHandle.autoInsertRow;\n      }\n    } else {\n      mappedSettings.autoInsertRow = false;\n    }\n    if (isDefined(fillHandle.direction)) {\n      mappedSettings.directions = [fillHandle.direction];\n    } else {\n      mappedSettings.directions = Object.keys(DIRECTIONS);\n    }\n  } else if (typeof fillHandle === 'string') {\n    mappedSettings.directions = [fillHandle];\n    mappedSettings.autoInsertRow = true;\n  } else {\n    mappedSettings.directions = [];\n    mappedSettings.autoInsertRow = false;\n  }\n  return mappedSettings;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}