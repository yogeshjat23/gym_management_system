{"ast":null,"code":"import { defineGetter } from \"../../../../../helpers/object.mjs\";\nconst MIXIN_NAME = 'calculatedColumns';\n\n/**\n * Mixin for the subclasses of `Table` with implementations of\n * helper methods that are related to columns.\n * This mixin is meant to be applied in the subclasses of `Table`\n * that use virtual rendering in the horizontal axis.\n *\n * @type {object}\n */\nconst calculatedColumns = {\n  /**\n   * Get the source index of the first rendered column. If no columns are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstRenderedColumn() {\n    const startColumn = this.dataAccessObject.startColumnRendered;\n    if (startColumn === null) {\n      return -1;\n    }\n    return startColumn;\n  },\n  /**\n   * Get the source index of the first column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstVisibleColumn() {\n    const startColumn = this.dataAccessObject.startColumnVisible;\n    if (startColumn === null) {\n      return -1;\n    }\n    return startColumn;\n  },\n  /**\n   * Get the source index of the first column partially visible in the viewport. If no columns are partially visible, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstPartiallyVisibleColumn() {\n    const startColumn = this.dataAccessObject.startColumnPartiallyVisible;\n    if (startColumn === null) {\n      return -1;\n    }\n    return startColumn;\n  },\n  /**\n   * Get the source index of the last rendered column. If no columns are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastRenderedColumn() {\n    const endColumn = this.dataAccessObject.endColumnRendered;\n    if (endColumn === null) {\n      return -1;\n    }\n    return endColumn;\n  },\n  /**\n   * Get the source index of the last column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastVisibleColumn() {\n    const endColumn = this.dataAccessObject.endColumnVisible;\n    if (endColumn === null) {\n      return -1;\n    }\n    return endColumn;\n  },\n  /**\n   * Get the source index of the last column partially visible in the viewport. If no columns are partially visible, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastPartiallyVisibleColumn() {\n    const endColumn = this.dataAccessObject.endColumnPartiallyVisible;\n    if (endColumn === null) {\n      return -1;\n    }\n    return endColumn;\n  },\n  /**\n   * Get the number of rendered columns.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getRenderedColumnsCount() {\n    return this.dataAccessObject.countColumnsRendered;\n  },\n  /**\n   * Get the number of fully visible columns in the viewport.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getVisibleColumnsCount() {\n    return this.dataAccessObject.countColumnsVisible;\n  },\n  /**\n   * Get the number of rendered row headers.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getRowHeadersCount() {\n    return this.dataAccessObject.rowHeaders.length;\n  }\n};\ndefineGetter(calculatedColumns, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nexport default calculatedColumns;","map":{"version":3,"names":["defineGetter","MIXIN_NAME","calculatedColumns","getFirstRenderedColumn","startColumn","dataAccessObject","startColumnRendered","getFirstVisibleColumn","startColumnVisible","getFirstPartiallyVisibleColumn","startColumnPartiallyVisible","getLastRenderedColumn","endColumn","endColumnRendered","getLastVisibleColumn","endColumnVisible","getLastPartiallyVisibleColumn","endColumnPartiallyVisible","getRenderedColumnsCount","countColumnsRendered","getVisibleColumnsCount","countColumnsVisible","getRowHeadersCount","rowHeaders","length","writable","enumerable"],"sources":["D:/gym-project/frontend/node_modules/handsontable/3rdparty/walkontable/src/table/mixin/calculatedColumns.mjs"],"sourcesContent":["import { defineGetter } from \"../../../../../helpers/object.mjs\";\nconst MIXIN_NAME = 'calculatedColumns';\n\n/**\n * Mixin for the subclasses of `Table` with implementations of\n * helper methods that are related to columns.\n * This mixin is meant to be applied in the subclasses of `Table`\n * that use virtual rendering in the horizontal axis.\n *\n * @type {object}\n */\nconst calculatedColumns = {\n  /**\n   * Get the source index of the first rendered column. If no columns are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstRenderedColumn() {\n    const startColumn = this.dataAccessObject.startColumnRendered;\n    if (startColumn === null) {\n      return -1;\n    }\n    return startColumn;\n  },\n  /**\n   * Get the source index of the first column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstVisibleColumn() {\n    const startColumn = this.dataAccessObject.startColumnVisible;\n    if (startColumn === null) {\n      return -1;\n    }\n    return startColumn;\n  },\n  /**\n   * Get the source index of the first column partially visible in the viewport. If no columns are partially visible, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstPartiallyVisibleColumn() {\n    const startColumn = this.dataAccessObject.startColumnPartiallyVisible;\n    if (startColumn === null) {\n      return -1;\n    }\n    return startColumn;\n  },\n  /**\n   * Get the source index of the last rendered column. If no columns are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastRenderedColumn() {\n    const endColumn = this.dataAccessObject.endColumnRendered;\n    if (endColumn === null) {\n      return -1;\n    }\n    return endColumn;\n  },\n  /**\n   * Get the source index of the last column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastVisibleColumn() {\n    const endColumn = this.dataAccessObject.endColumnVisible;\n    if (endColumn === null) {\n      return -1;\n    }\n    return endColumn;\n  },\n  /**\n   * Get the source index of the last column partially visible in the viewport. If no columns are partially visible, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastPartiallyVisibleColumn() {\n    const endColumn = this.dataAccessObject.endColumnPartiallyVisible;\n    if (endColumn === null) {\n      return -1;\n    }\n    return endColumn;\n  },\n  /**\n   * Get the number of rendered columns.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getRenderedColumnsCount() {\n    return this.dataAccessObject.countColumnsRendered;\n  },\n  /**\n   * Get the number of fully visible columns in the viewport.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getVisibleColumnsCount() {\n    return this.dataAccessObject.countColumnsVisible;\n  },\n  /**\n   * Get the number of rendered row headers.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getRowHeadersCount() {\n    return this.dataAccessObject.rowHeaders.length;\n  }\n};\ndefineGetter(calculatedColumns, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nexport default calculatedColumns;"],"mappings":"AAAA,SAASA,YAAY,QAAQ,mCAAmC;AAChE,MAAMC,UAAU,GAAG,mBAAmB;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,GAAG;EACxB;AACF;AACA;AACA;AACA;AACA;EACEC,sBAAsBA,CAAA,EAAG;IACvB,MAAMC,WAAW,GAAG,IAAI,CAACC,gBAAgB,CAACC,mBAAmB;IAC7D,IAAIF,WAAW,KAAK,IAAI,EAAE;MACxB,OAAO,CAAC,CAAC;IACX;IACA,OAAOA,WAAW;EACpB,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;EACEG,qBAAqBA,CAAA,EAAG;IACtB,MAAMH,WAAW,GAAG,IAAI,CAACC,gBAAgB,CAACG,kBAAkB;IAC5D,IAAIJ,WAAW,KAAK,IAAI,EAAE;MACxB,OAAO,CAAC,CAAC;IACX;IACA,OAAOA,WAAW;EACpB,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;EACEK,8BAA8BA,CAAA,EAAG;IAC/B,MAAML,WAAW,GAAG,IAAI,CAACC,gBAAgB,CAACK,2BAA2B;IACrE,IAAIN,WAAW,KAAK,IAAI,EAAE;MACxB,OAAO,CAAC,CAAC;IACX;IACA,OAAOA,WAAW;EACpB,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;EACEO,qBAAqBA,CAAA,EAAG;IACtB,MAAMC,SAAS,GAAG,IAAI,CAACP,gBAAgB,CAACQ,iBAAiB;IACzD,IAAID,SAAS,KAAK,IAAI,EAAE;MACtB,OAAO,CAAC,CAAC;IACX;IACA,OAAOA,SAAS;EAClB,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;EACEE,oBAAoBA,CAAA,EAAG;IACrB,MAAMF,SAAS,GAAG,IAAI,CAACP,gBAAgB,CAACU,gBAAgB;IACxD,IAAIH,SAAS,KAAK,IAAI,EAAE;MACtB,OAAO,CAAC,CAAC;IACX;IACA,OAAOA,SAAS;EAClB,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;EACEI,6BAA6BA,CAAA,EAAG;IAC9B,MAAMJ,SAAS,GAAG,IAAI,CAACP,gBAAgB,CAACY,yBAAyB;IACjE,IAAIL,SAAS,KAAK,IAAI,EAAE;MACtB,OAAO,CAAC,CAAC;IACX;IACA,OAAOA,SAAS;EAClB,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;EACEM,uBAAuBA,CAAA,EAAG;IACxB,OAAO,IAAI,CAACb,gBAAgB,CAACc,oBAAoB;EACnD,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;EACEC,sBAAsBA,CAAA,EAAG;IACvB,OAAO,IAAI,CAACf,gBAAgB,CAACgB,mBAAmB;EAClD,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;EACEC,kBAAkBA,CAAA,EAAG;IACnB,OAAO,IAAI,CAACjB,gBAAgB,CAACkB,UAAU,CAACC,MAAM;EAChD;AACF,CAAC;AACDxB,YAAY,CAACE,iBAAiB,EAAE,YAAY,EAAED,UAAU,EAAE;EACxDwB,QAAQ,EAAE,KAAK;EACfC,UAAU,EAAE;AACd,CAAC,CAAC;AACF,eAAexB,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}