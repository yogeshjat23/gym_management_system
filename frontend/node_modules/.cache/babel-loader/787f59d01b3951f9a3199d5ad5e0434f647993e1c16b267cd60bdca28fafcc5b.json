{"ast":null,"code":"import { isEmpty } from \"../../../helpers/mixed.mjs\";\nimport { DO_NOT_SWAP, FIRST_BEFORE_SECOND, FIRST_AFTER_SECOND } from \"../sortService/index.mjs\";\n/**\n * Numeric sorting compare function factory. Method get as parameters `sortOrder` and `columnMeta` and return compare function.\n *\n * @param {string} sortOrder Sort order (`asc` for ascending, `desc` for descending).\n * @param {object} columnMeta Column meta object.\n * @param {object} columnPluginSettings Plugin settings for the column.\n * @returns {Function} The compare function.\n */\nexport function compareFunctionFactory(sortOrder, columnMeta, columnPluginSettings) {\n  return function (value, nextValue) {\n    const parsedFirstValue = parseFloat(value);\n    const parsedSecondValue = parseFloat(nextValue);\n    const {\n      sortEmptyCells\n    } = columnPluginSettings;\n\n    // Watch out when changing this part of code! Check below returns 0 (as expected) when comparing empty string, null, undefined\n    if (parsedFirstValue === parsedSecondValue || isNaN(parsedFirstValue) && isNaN(parsedSecondValue)) {\n      return DO_NOT_SWAP;\n    }\n    if (sortEmptyCells) {\n      if (isEmpty(value)) {\n        return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\n      }\n      if (isEmpty(nextValue)) {\n        return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\n      }\n    }\n    if (isNaN(parsedFirstValue)) {\n      return FIRST_AFTER_SECOND;\n    }\n    if (isNaN(parsedSecondValue)) {\n      return FIRST_BEFORE_SECOND;\n    }\n    if (parsedFirstValue < parsedSecondValue) {\n      return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\n    } else if (parsedFirstValue > parsedSecondValue) {\n      return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\n    }\n    return DO_NOT_SWAP;\n  };\n}\nexport const COLUMN_DATA_TYPE = 'numeric';","map":{"version":3,"names":["isEmpty","DO_NOT_SWAP","FIRST_BEFORE_SECOND","FIRST_AFTER_SECOND","compareFunctionFactory","sortOrder","columnMeta","columnPluginSettings","value","nextValue","parsedFirstValue","parseFloat","parsedSecondValue","sortEmptyCells","isNaN","COLUMN_DATA_TYPE"],"sources":["D:/gym-project/frontend/node_modules/handsontable/plugins/columnSorting/sortFunction/numeric.mjs"],"sourcesContent":["import { isEmpty } from \"../../../helpers/mixed.mjs\";\nimport { DO_NOT_SWAP, FIRST_BEFORE_SECOND, FIRST_AFTER_SECOND } from \"../sortService/index.mjs\";\n/**\n * Numeric sorting compare function factory. Method get as parameters `sortOrder` and `columnMeta` and return compare function.\n *\n * @param {string} sortOrder Sort order (`asc` for ascending, `desc` for descending).\n * @param {object} columnMeta Column meta object.\n * @param {object} columnPluginSettings Plugin settings for the column.\n * @returns {Function} The compare function.\n */\nexport function compareFunctionFactory(sortOrder, columnMeta, columnPluginSettings) {\n  return function (value, nextValue) {\n    const parsedFirstValue = parseFloat(value);\n    const parsedSecondValue = parseFloat(nextValue);\n    const {\n      sortEmptyCells\n    } = columnPluginSettings;\n\n    // Watch out when changing this part of code! Check below returns 0 (as expected) when comparing empty string, null, undefined\n    if (parsedFirstValue === parsedSecondValue || isNaN(parsedFirstValue) && isNaN(parsedSecondValue)) {\n      return DO_NOT_SWAP;\n    }\n    if (sortEmptyCells) {\n      if (isEmpty(value)) {\n        return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\n      }\n      if (isEmpty(nextValue)) {\n        return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\n      }\n    }\n    if (isNaN(parsedFirstValue)) {\n      return FIRST_AFTER_SECOND;\n    }\n    if (isNaN(parsedSecondValue)) {\n      return FIRST_BEFORE_SECOND;\n    }\n    if (parsedFirstValue < parsedSecondValue) {\n      return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\n    } else if (parsedFirstValue > parsedSecondValue) {\n      return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\n    }\n    return DO_NOT_SWAP;\n  };\n}\nexport const COLUMN_DATA_TYPE = 'numeric';"],"mappings":"AAAA,SAASA,OAAO,QAAQ,4BAA4B;AACpD,SAASC,WAAW,EAAEC,mBAAmB,EAAEC,kBAAkB,QAAQ,0BAA0B;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,sBAAsBA,CAACC,SAAS,EAAEC,UAAU,EAAEC,oBAAoB,EAAE;EAClF,OAAO,UAAUC,KAAK,EAAEC,SAAS,EAAE;IACjC,MAAMC,gBAAgB,GAAGC,UAAU,CAACH,KAAK,CAAC;IAC1C,MAAMI,iBAAiB,GAAGD,UAAU,CAACF,SAAS,CAAC;IAC/C,MAAM;MACJI;IACF,CAAC,GAAGN,oBAAoB;;IAExB;IACA,IAAIG,gBAAgB,KAAKE,iBAAiB,IAAIE,KAAK,CAACJ,gBAAgB,CAAC,IAAII,KAAK,CAACF,iBAAiB,CAAC,EAAE;MACjG,OAAOX,WAAW;IACpB;IACA,IAAIY,cAAc,EAAE;MAClB,IAAIb,OAAO,CAACQ,KAAK,CAAC,EAAE;QAClB,OAAOH,SAAS,KAAK,KAAK,GAAGH,mBAAmB,GAAGC,kBAAkB;MACvE;MACA,IAAIH,OAAO,CAACS,SAAS,CAAC,EAAE;QACtB,OAAOJ,SAAS,KAAK,KAAK,GAAGF,kBAAkB,GAAGD,mBAAmB;MACvE;IACF;IACA,IAAIY,KAAK,CAACJ,gBAAgB,CAAC,EAAE;MAC3B,OAAOP,kBAAkB;IAC3B;IACA,IAAIW,KAAK,CAACF,iBAAiB,CAAC,EAAE;MAC5B,OAAOV,mBAAmB;IAC5B;IACA,IAAIQ,gBAAgB,GAAGE,iBAAiB,EAAE;MACxC,OAAOP,SAAS,KAAK,KAAK,GAAGH,mBAAmB,GAAGC,kBAAkB;IACvE,CAAC,MAAM,IAAIO,gBAAgB,GAAGE,iBAAiB,EAAE;MAC/C,OAAOP,SAAS,KAAK,KAAK,GAAGF,kBAAkB,GAAGD,mBAAmB;IACvE;IACA,OAAOD,WAAW;EACpB,CAAC;AACH;AACA,OAAO,MAAMc,gBAAgB,GAAG,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}