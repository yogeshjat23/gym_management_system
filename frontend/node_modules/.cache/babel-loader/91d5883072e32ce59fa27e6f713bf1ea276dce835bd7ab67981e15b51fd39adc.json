{"ast":null,"code":"function _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport { addClass, getScrollbarWidth, getScrollTop, getWindowScrollLeft, hasClass, outerHeight, removeClass } from \"../../../../helpers/dom/element.mjs\";\nimport BottomOverlayTable from \"./../table/bottom.mjs\";\nimport { Overlay } from \"./_base.mjs\";\nimport { CLONE_BOTTOM } from \"./constants.mjs\";\n/**\n * @class BottomOverlay\n */\nexport class BottomOverlay extends Overlay {\n  /**\n   * @param {Walkontable} wotInstance The Walkontable instance. @TODO refactoring: check if can be deleted.\n   * @param {FacadeGetter} facadeGetter Function which return proper facade.\n   * @param {Settings} wtSettings The Walkontable settings.\n   * @param {DomBindings} domBindings Dom elements bound to the current instance.\n   */\n  constructor(wotInstance, facadeGetter, wtSettings, domBindings) {\n    super(wotInstance, facadeGetter, CLONE_BOTTOM, wtSettings, domBindings);\n    /**\n     * Cached value which holds the previous value of the `fixedRowsBottom` option.\n     * It is used as a comparison value that can be used to detect changes in that value.\n     *\n     * @type {number}\n     */\n    _defineProperty(this, \"cachedFixedRowsBottom\", -1);\n    this.cachedFixedRowsBottom = this.wtSettings.getSetting('fixedRowsBottom');\n  }\n\n  /**\n   * Factory method to create a subclass of `Table` that is relevant to this overlay.\n   *\n   * @see Table#constructor\n   * @param {...*} args Parameters that will be forwarded to the `Table` constructor.\n   * @returns {BottomOverlayTable}\n   */\n  createTable() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return new BottomOverlayTable(...args);\n  }\n\n  /**\n   * Checks if overlay should be fully rendered.\n   *\n   * @returns {boolean}\n   */\n  shouldBeRendered() {\n    return this.wtSettings.getSetting('shouldRenderBottomOverlay');\n  }\n\n  /**\n   * Updates the top overlay position.\n   *\n   * @returns {boolean}\n   */\n  resetFixedPosition() {\n    if (!this.needFullRender || !this.shouldBeRendered() || !this.wot.wtTable.holder.parentNode) {\n      // removed from DOM\n      return false;\n    }\n    const {\n      rootWindow\n    } = this.domBindings;\n    const overlayRoot = this.clone.wtTable.holder.parentNode;\n    overlayRoot.style.top = '';\n    let overlayPosition = 0;\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    if (this.trimmingContainer === rootWindow && (!preventOverflow || preventOverflow !== 'vertical')) {\n      overlayPosition = this.getOverlayOffset();\n      overlayRoot.style.bottom = `${overlayPosition}px`;\n    } else {\n      overlayPosition = this.getScrollPosition();\n      this.repositionOverlay();\n    }\n    const positionChanged = this.adjustHeaderBordersPosition(overlayPosition);\n    this.adjustElementsSize();\n    return positionChanged;\n  }\n\n  /**\n   * Updates the bottom overlay position.\n   */\n  repositionOverlay() {\n    const {\n      wtTable,\n      wtViewport\n    } = this.wot;\n    const {\n      rootDocument\n    } = this.domBindings;\n    const cloneRoot = this.clone.wtTable.holder.parentNode;\n    let bottomOffset = 0;\n    if (!wtViewport.hasVerticalScroll()) {\n      bottomOffset += wtViewport.getWorkspaceHeight() - wtTable.getTotalHeight();\n    }\n    if (wtViewport.hasVerticalScroll() && wtViewport.hasHorizontalScroll()) {\n      bottomOffset += getScrollbarWidth(rootDocument);\n    }\n    cloneRoot.style.bottom = `${bottomOffset}px`;\n  }\n\n  /**\n   * Sets the main overlay's vertical scroll position.\n   *\n   * @param {number} pos The scroll position.\n   * @returns {boolean}\n   */\n  setScrollPosition(pos) {\n    const {\n      rootWindow\n    } = this.domBindings;\n    let result = false;\n    if (this.mainTableScrollableElement === rootWindow) {\n      rootWindow.scrollTo(getWindowScrollLeft(rootWindow), pos);\n      result = true;\n    } else if (this.mainTableScrollableElement.scrollTop !== pos) {\n      this.mainTableScrollableElement.scrollTop = pos;\n      result = true;\n    }\n    return result;\n  }\n\n  /**\n   * Triggers onScroll hook callback.\n   */\n  onScroll() {\n    this.wtSettings.getSetting('onScrollHorizontally');\n  }\n\n  /**\n   * Calculates total sum cells height.\n   *\n   * @param {number} from Row index which calculates started from.\n   * @param {number} to Row index where calculation is finished.\n   * @returns {number} Height sum.\n   */\n  sumCellSizes(from, to) {\n    const {\n      wtTable,\n      wtSettings\n    } = this.wot;\n    const defaultRowHeight = wtSettings.getSetting('defaultRowHeight');\n    let row = from;\n    let sum = 0;\n    while (row < to) {\n      const height = wtTable.getRowHeight(row);\n      sum += height === undefined ? defaultRowHeight : height;\n      row += 1;\n    }\n    return sum;\n  }\n\n  /**\n   * Adjust overlay root element, children and master table element sizes (width, height).\n   */\n  adjustElementsSize() {\n    this.updateTrimmingContainer();\n    if (this.needFullRender) {\n      this.adjustRootElementSize();\n      this.adjustRootChildrenSize();\n    }\n  }\n\n  /**\n   * Adjust overlay root element size (width and height).\n   */\n  adjustRootElementSize() {\n    const {\n      wtTable,\n      wtViewport\n    } = this.wot;\n    const {\n      rootDocument,\n      rootWindow\n    } = this.domBindings;\n    const scrollbarWidth = getScrollbarWidth(rootDocument);\n    const overlayRoot = this.clone.wtTable.holder.parentNode;\n    const overlayRootStyle = overlayRoot.style;\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    if (this.trimmingContainer !== rootWindow || preventOverflow === 'horizontal') {\n      let width = wtViewport.getWorkspaceWidth();\n      if (this.wot.wtOverlays.hasScrollbarRight) {\n        width -= scrollbarWidth;\n      }\n      width = Math.min(width, wtTable.wtRootElement.scrollWidth);\n      overlayRootStyle.width = `${width}px`;\n    } else {\n      overlayRootStyle.width = '';\n    }\n    this.clone.wtTable.holder.style.width = overlayRootStyle.width;\n    let tableHeight = outerHeight(this.clone.wtTable.TABLE);\n    if (!this.wot.wtTable.hasDefinedSize()) {\n      tableHeight = 0;\n    }\n    overlayRootStyle.height = `${tableHeight}px`;\n  }\n\n  /**\n   * Adjust overlay root childs size.\n   */\n  adjustRootChildrenSize() {\n    const {\n      holder\n    } = this.clone.wtTable;\n    this.clone.wtTable.hider.style.width = this.hider.style.width;\n    holder.style.width = holder.parentNode.style.width;\n    holder.style.height = holder.parentNode.style.height;\n  }\n\n  /**\n   * Adjust the overlay dimensions and position.\n   */\n  applyToDOM() {\n    const total = this.wtSettings.getSetting('totalRows');\n    if (typeof this.wot.wtViewport.rowsRenderCalculator.startPosition === 'number') {\n      this.spreader.style.top = `${this.wot.wtViewport.rowsRenderCalculator.startPosition}px`;\n    } else if (total === 0) {\n      // can happen if there are 0 rows\n      this.spreader.style.top = '0';\n    } else {\n      throw new Error('Incorrect value of the rowsRenderCalculator');\n    }\n    this.spreader.style.bottom = '';\n    if (this.needFullRender) {\n      this.syncOverlayOffset();\n    }\n  }\n\n  /**\n   * Synchronize calculated left position to an element.\n   */\n  syncOverlayOffset() {\n    const styleProperty = this.isRtl() ? 'right' : 'left';\n    const {\n      spreader\n    } = this.clone.wtTable;\n    if (typeof this.wot.wtViewport.columnsRenderCalculator.startPosition === 'number') {\n      spreader.style[styleProperty] = `${this.wot.wtViewport.columnsRenderCalculator.startPosition}px`;\n    } else {\n      spreader.style[styleProperty] = '';\n    }\n  }\n\n  /**\n   * Scrolls vertically to a row.\n   *\n   * @param {number} sourceRow Row index which you want to scroll to.\n   * @param {boolean} [bottomEdge=false] If `true`, scrolls according to the bottom edge (top edge is by default).\n   */\n  scrollTo(sourceRow, bottomEdge) {\n    let newY = this.getTableParentOffset();\n    const sourceInstance = this.wot.cloneSource ? this.wot.cloneSource : this.wot;\n    const mainHolder = sourceInstance.wtTable.holder;\n    let scrollbarCompensation = 0;\n    if (bottomEdge && mainHolder.offsetHeight !== mainHolder.clientHeight) {\n      scrollbarCompensation = getScrollbarWidth(this.domBindings.rootDocument);\n    }\n    if (bottomEdge) {\n      newY += this.sumCellSizes(0, sourceRow + 1);\n      newY -= this.wot.wtViewport.getViewportHeight();\n      // Fix 1 pixel offset when cell is selected\n      newY += 1;\n    } else {\n      newY += this.sumCellSizes(this.wtSettings.getSetting('fixedRowsBottom'), sourceRow);\n    }\n    newY += scrollbarCompensation;\n    this.setScrollPosition(newY);\n  }\n\n  /**\n   * Gets table parent top position.\n   *\n   * @returns {number}\n   */\n  getTableParentOffset() {\n    if (this.mainTableScrollableElement === this.domBindings.rootWindow) {\n      return this.wot.wtTable.holderOffset.top;\n    }\n    return 0;\n  }\n\n  /**\n   * Gets the main overlay's vertical scroll position.\n   *\n   * @returns {number} Main table's vertical scroll position.\n   */\n  getScrollPosition() {\n    return getScrollTop(this.mainTableScrollableElement, this.domBindings.rootWindow);\n  }\n\n  /**\n   * Gets the main overlay's vertical overlay offset.\n   *\n   * @returns {number} Main table's vertical overlay offset.\n   */\n  getOverlayOffset() {\n    const {\n      rootWindow\n    } = this.domBindings;\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    let overlayOffset = 0;\n    if (this.trimmingContainer === rootWindow && (!preventOverflow || preventOverflow !== 'vertical')) {\n      const rootHeight = this.wot.wtTable.getTotalHeight();\n      const overlayRootHeight = this.clone.wtTable.getTotalHeight();\n      const maxOffset = rootHeight - overlayRootHeight;\n      const docClientHeight = this.domBindings.rootDocument.documentElement.clientHeight;\n      overlayOffset = Math.max(this.getTableParentOffset() - this.getScrollPosition() - docClientHeight + rootHeight, 0);\n      if (overlayOffset > maxOffset) {\n        overlayOffset = 0;\n      }\n    }\n    return overlayOffset;\n  }\n\n  /**\n   * Adds css classes to hide the header border's header (cell-selection border hiding issue).\n   *\n   * @param {number} position Header Y position if trimming container is window or scroll top if not.\n   * @returns {boolean}\n   */\n  adjustHeaderBordersPosition(position) {\n    const fixedRowsBottom = this.wtSettings.getSetting('fixedRowsBottom');\n    const areFixedRowsBottomChanged = this.cachedFixedRowsBottom !== fixedRowsBottom;\n    const columnHeaders = this.wtSettings.getSetting('columnHeaders');\n    let positionChanged = false;\n    if ((areFixedRowsBottomChanged || fixedRowsBottom === 0) && columnHeaders.length > 0) {\n      const masterParent = this.wot.wtTable.holder.parentNode;\n      const previousState = hasClass(masterParent, 'innerBorderBottom');\n      this.cachedFixedRowsBottom = this.wtSettings.getSetting('fixedRowsBottom');\n      if (position || this.wtSettings.getSetting('totalRows') === 0) {\n        addClass(masterParent, 'innerBorderBottom');\n        positionChanged = !previousState;\n      } else {\n        removeClass(masterParent, 'innerBorderBottom');\n        positionChanged = previousState;\n      }\n    }\n    return positionChanged;\n  }\n}","map":{"version":3,"names":["_defineProperty","e","r","t","_toPropertyKey","Object","defineProperty","value","enumerable","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","addClass","getScrollbarWidth","getScrollTop","getWindowScrollLeft","hasClass","outerHeight","removeClass","BottomOverlayTable","Overlay","CLONE_BOTTOM","BottomOverlay","constructor","wotInstance","facadeGetter","wtSettings","domBindings","cachedFixedRowsBottom","getSetting","createTable","_len","arguments","length","args","Array","_key","shouldBeRendered","resetFixedPosition","needFullRender","wot","wtTable","holder","parentNode","rootWindow","overlayRoot","clone","style","top","overlayPosition","preventOverflow","trimmingContainer","getOverlayOffset","bottom","getScrollPosition","repositionOverlay","positionChanged","adjustHeaderBordersPosition","adjustElementsSize","wtViewport","rootDocument","cloneRoot","bottomOffset","hasVerticalScroll","getWorkspaceHeight","getTotalHeight","hasHorizontalScroll","setScrollPosition","pos","result","mainTableScrollableElement","scrollTo","scrollTop","onScroll","sumCellSizes","from","to","defaultRowHeight","row","sum","height","getRowHeight","undefined","updateTrimmingContainer","adjustRootElementSize","adjustRootChildrenSize","scrollbarWidth","overlayRootStyle","width","getWorkspaceWidth","wtOverlays","hasScrollbarRight","Math","min","wtRootElement","scrollWidth","tableHeight","TABLE","hasDefinedSize","hider","applyToDOM","total","rowsRenderCalculator","startPosition","spreader","Error","syncOverlayOffset","styleProperty","isRtl","columnsRenderCalculator","sourceRow","bottomEdge","newY","getTableParentOffset","sourceInstance","cloneSource","mainHolder","scrollbarCompensation","offsetHeight","clientHeight","getViewportHeight","holderOffset","overlayOffset","rootHeight","overlayRootHeight","maxOffset","docClientHeight","documentElement","max","position","fixedRowsBottom","areFixedRowsBottomChanged","columnHeaders","masterParent","previousState"],"sources":["D:/gym-project/frontend/node_modules/handsontable/3rdparty/walkontable/src/overlay/bottom.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport { addClass, getScrollbarWidth, getScrollTop, getWindowScrollLeft, hasClass, outerHeight, removeClass } from \"../../../../helpers/dom/element.mjs\";\nimport BottomOverlayTable from \"./../table/bottom.mjs\";\nimport { Overlay } from \"./_base.mjs\";\nimport { CLONE_BOTTOM } from \"./constants.mjs\";\n/**\n * @class BottomOverlay\n */\nexport class BottomOverlay extends Overlay {\n  /**\n   * @param {Walkontable} wotInstance The Walkontable instance. @TODO refactoring: check if can be deleted.\n   * @param {FacadeGetter} facadeGetter Function which return proper facade.\n   * @param {Settings} wtSettings The Walkontable settings.\n   * @param {DomBindings} domBindings Dom elements bound to the current instance.\n   */\n  constructor(wotInstance, facadeGetter, wtSettings, domBindings) {\n    super(wotInstance, facadeGetter, CLONE_BOTTOM, wtSettings, domBindings);\n    /**\n     * Cached value which holds the previous value of the `fixedRowsBottom` option.\n     * It is used as a comparison value that can be used to detect changes in that value.\n     *\n     * @type {number}\n     */\n    _defineProperty(this, \"cachedFixedRowsBottom\", -1);\n    this.cachedFixedRowsBottom = this.wtSettings.getSetting('fixedRowsBottom');\n  }\n\n  /**\n   * Factory method to create a subclass of `Table` that is relevant to this overlay.\n   *\n   * @see Table#constructor\n   * @param {...*} args Parameters that will be forwarded to the `Table` constructor.\n   * @returns {BottomOverlayTable}\n   */\n  createTable() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return new BottomOverlayTable(...args);\n  }\n\n  /**\n   * Checks if overlay should be fully rendered.\n   *\n   * @returns {boolean}\n   */\n  shouldBeRendered() {\n    return this.wtSettings.getSetting('shouldRenderBottomOverlay');\n  }\n\n  /**\n   * Updates the top overlay position.\n   *\n   * @returns {boolean}\n   */\n  resetFixedPosition() {\n    if (!this.needFullRender || !this.shouldBeRendered() || !this.wot.wtTable.holder.parentNode) {\n      // removed from DOM\n      return false;\n    }\n    const {\n      rootWindow\n    } = this.domBindings;\n    const overlayRoot = this.clone.wtTable.holder.parentNode;\n    overlayRoot.style.top = '';\n    let overlayPosition = 0;\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    if (this.trimmingContainer === rootWindow && (!preventOverflow || preventOverflow !== 'vertical')) {\n      overlayPosition = this.getOverlayOffset();\n      overlayRoot.style.bottom = `${overlayPosition}px`;\n    } else {\n      overlayPosition = this.getScrollPosition();\n      this.repositionOverlay();\n    }\n    const positionChanged = this.adjustHeaderBordersPosition(overlayPosition);\n    this.adjustElementsSize();\n    return positionChanged;\n  }\n\n  /**\n   * Updates the bottom overlay position.\n   */\n  repositionOverlay() {\n    const {\n      wtTable,\n      wtViewport\n    } = this.wot;\n    const {\n      rootDocument\n    } = this.domBindings;\n    const cloneRoot = this.clone.wtTable.holder.parentNode;\n    let bottomOffset = 0;\n    if (!wtViewport.hasVerticalScroll()) {\n      bottomOffset += wtViewport.getWorkspaceHeight() - wtTable.getTotalHeight();\n    }\n    if (wtViewport.hasVerticalScroll() && wtViewport.hasHorizontalScroll()) {\n      bottomOffset += getScrollbarWidth(rootDocument);\n    }\n    cloneRoot.style.bottom = `${bottomOffset}px`;\n  }\n\n  /**\n   * Sets the main overlay's vertical scroll position.\n   *\n   * @param {number} pos The scroll position.\n   * @returns {boolean}\n   */\n  setScrollPosition(pos) {\n    const {\n      rootWindow\n    } = this.domBindings;\n    let result = false;\n    if (this.mainTableScrollableElement === rootWindow) {\n      rootWindow.scrollTo(getWindowScrollLeft(rootWindow), pos);\n      result = true;\n    } else if (this.mainTableScrollableElement.scrollTop !== pos) {\n      this.mainTableScrollableElement.scrollTop = pos;\n      result = true;\n    }\n    return result;\n  }\n\n  /**\n   * Triggers onScroll hook callback.\n   */\n  onScroll() {\n    this.wtSettings.getSetting('onScrollHorizontally');\n  }\n\n  /**\n   * Calculates total sum cells height.\n   *\n   * @param {number} from Row index which calculates started from.\n   * @param {number} to Row index where calculation is finished.\n   * @returns {number} Height sum.\n   */\n  sumCellSizes(from, to) {\n    const {\n      wtTable,\n      wtSettings\n    } = this.wot;\n    const defaultRowHeight = wtSettings.getSetting('defaultRowHeight');\n    let row = from;\n    let sum = 0;\n    while (row < to) {\n      const height = wtTable.getRowHeight(row);\n      sum += height === undefined ? defaultRowHeight : height;\n      row += 1;\n    }\n    return sum;\n  }\n\n  /**\n   * Adjust overlay root element, children and master table element sizes (width, height).\n   */\n  adjustElementsSize() {\n    this.updateTrimmingContainer();\n    if (this.needFullRender) {\n      this.adjustRootElementSize();\n      this.adjustRootChildrenSize();\n    }\n  }\n\n  /**\n   * Adjust overlay root element size (width and height).\n   */\n  adjustRootElementSize() {\n    const {\n      wtTable,\n      wtViewport\n    } = this.wot;\n    const {\n      rootDocument,\n      rootWindow\n    } = this.domBindings;\n    const scrollbarWidth = getScrollbarWidth(rootDocument);\n    const overlayRoot = this.clone.wtTable.holder.parentNode;\n    const overlayRootStyle = overlayRoot.style;\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    if (this.trimmingContainer !== rootWindow || preventOverflow === 'horizontal') {\n      let width = wtViewport.getWorkspaceWidth();\n      if (this.wot.wtOverlays.hasScrollbarRight) {\n        width -= scrollbarWidth;\n      }\n      width = Math.min(width, wtTable.wtRootElement.scrollWidth);\n      overlayRootStyle.width = `${width}px`;\n    } else {\n      overlayRootStyle.width = '';\n    }\n    this.clone.wtTable.holder.style.width = overlayRootStyle.width;\n    let tableHeight = outerHeight(this.clone.wtTable.TABLE);\n    if (!this.wot.wtTable.hasDefinedSize()) {\n      tableHeight = 0;\n    }\n    overlayRootStyle.height = `${tableHeight}px`;\n  }\n\n  /**\n   * Adjust overlay root childs size.\n   */\n  adjustRootChildrenSize() {\n    const {\n      holder\n    } = this.clone.wtTable;\n    this.clone.wtTable.hider.style.width = this.hider.style.width;\n    holder.style.width = holder.parentNode.style.width;\n    holder.style.height = holder.parentNode.style.height;\n  }\n\n  /**\n   * Adjust the overlay dimensions and position.\n   */\n  applyToDOM() {\n    const total = this.wtSettings.getSetting('totalRows');\n    if (typeof this.wot.wtViewport.rowsRenderCalculator.startPosition === 'number') {\n      this.spreader.style.top = `${this.wot.wtViewport.rowsRenderCalculator.startPosition}px`;\n    } else if (total === 0) {\n      // can happen if there are 0 rows\n      this.spreader.style.top = '0';\n    } else {\n      throw new Error('Incorrect value of the rowsRenderCalculator');\n    }\n    this.spreader.style.bottom = '';\n    if (this.needFullRender) {\n      this.syncOverlayOffset();\n    }\n  }\n\n  /**\n   * Synchronize calculated left position to an element.\n   */\n  syncOverlayOffset() {\n    const styleProperty = this.isRtl() ? 'right' : 'left';\n    const {\n      spreader\n    } = this.clone.wtTable;\n    if (typeof this.wot.wtViewport.columnsRenderCalculator.startPosition === 'number') {\n      spreader.style[styleProperty] = `${this.wot.wtViewport.columnsRenderCalculator.startPosition}px`;\n    } else {\n      spreader.style[styleProperty] = '';\n    }\n  }\n\n  /**\n   * Scrolls vertically to a row.\n   *\n   * @param {number} sourceRow Row index which you want to scroll to.\n   * @param {boolean} [bottomEdge=false] If `true`, scrolls according to the bottom edge (top edge is by default).\n   */\n  scrollTo(sourceRow, bottomEdge) {\n    let newY = this.getTableParentOffset();\n    const sourceInstance = this.wot.cloneSource ? this.wot.cloneSource : this.wot;\n    const mainHolder = sourceInstance.wtTable.holder;\n    let scrollbarCompensation = 0;\n    if (bottomEdge && mainHolder.offsetHeight !== mainHolder.clientHeight) {\n      scrollbarCompensation = getScrollbarWidth(this.domBindings.rootDocument);\n    }\n    if (bottomEdge) {\n      newY += this.sumCellSizes(0, sourceRow + 1);\n      newY -= this.wot.wtViewport.getViewportHeight();\n      // Fix 1 pixel offset when cell is selected\n      newY += 1;\n    } else {\n      newY += this.sumCellSizes(this.wtSettings.getSetting('fixedRowsBottom'), sourceRow);\n    }\n    newY += scrollbarCompensation;\n    this.setScrollPosition(newY);\n  }\n\n  /**\n   * Gets table parent top position.\n   *\n   * @returns {number}\n   */\n  getTableParentOffset() {\n    if (this.mainTableScrollableElement === this.domBindings.rootWindow) {\n      return this.wot.wtTable.holderOffset.top;\n    }\n    return 0;\n  }\n\n  /**\n   * Gets the main overlay's vertical scroll position.\n   *\n   * @returns {number} Main table's vertical scroll position.\n   */\n  getScrollPosition() {\n    return getScrollTop(this.mainTableScrollableElement, this.domBindings.rootWindow);\n  }\n\n  /**\n   * Gets the main overlay's vertical overlay offset.\n   *\n   * @returns {number} Main table's vertical overlay offset.\n   */\n  getOverlayOffset() {\n    const {\n      rootWindow\n    } = this.domBindings;\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    let overlayOffset = 0;\n    if (this.trimmingContainer === rootWindow && (!preventOverflow || preventOverflow !== 'vertical')) {\n      const rootHeight = this.wot.wtTable.getTotalHeight();\n      const overlayRootHeight = this.clone.wtTable.getTotalHeight();\n      const maxOffset = rootHeight - overlayRootHeight;\n      const docClientHeight = this.domBindings.rootDocument.documentElement.clientHeight;\n      overlayOffset = Math.max(this.getTableParentOffset() - this.getScrollPosition() - docClientHeight + rootHeight, 0);\n      if (overlayOffset > maxOffset) {\n        overlayOffset = 0;\n      }\n    }\n    return overlayOffset;\n  }\n\n  /**\n   * Adds css classes to hide the header border's header (cell-selection border hiding issue).\n   *\n   * @param {number} position Header Y position if trimming container is window or scroll top if not.\n   * @returns {boolean}\n   */\n  adjustHeaderBordersPosition(position) {\n    const fixedRowsBottom = this.wtSettings.getSetting('fixedRowsBottom');\n    const areFixedRowsBottomChanged = this.cachedFixedRowsBottom !== fixedRowsBottom;\n    const columnHeaders = this.wtSettings.getSetting('columnHeaders');\n    let positionChanged = false;\n    if ((areFixedRowsBottomChanged || fixedRowsBottom === 0) && columnHeaders.length > 0) {\n      const masterParent = this.wot.wtTable.holder.parentNode;\n      const previousState = hasClass(masterParent, 'innerBorderBottom');\n      this.cachedFixedRowsBottom = this.wtSettings.getSetting('fixedRowsBottom');\n      if (position || this.wtSettings.getSetting('totalRows') === 0) {\n        addClass(masterParent, 'innerBorderBottom');\n        positionChanged = !previousState;\n      } else {\n        removeClass(masterParent, 'innerBorderBottom');\n        positionChanged = previousState;\n      }\n    }\n    return positionChanged;\n  }\n}"],"mappings":"AACA,SAASA,eAAeA,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;EAAE,OAAO,CAACD,CAAC,GAAGE,cAAc,CAACF,CAAC,CAAC,KAAKD,CAAC,GAAGI,MAAM,CAACC,cAAc,CAACL,CAAC,EAAEC,CAAC,EAAE;IAAEK,KAAK,EAAEJ,CAAC;IAAEK,UAAU,EAAE,CAAC,CAAC;IAAEC,YAAY,EAAE,CAAC,CAAC;IAAEC,QAAQ,EAAE,CAAC;EAAE,CAAC,CAAC,GAAGT,CAAC,CAACC,CAAC,CAAC,GAAGC,CAAC,EAAEF,CAAC;AAAE;AACnL,SAASG,cAAcA,CAACD,CAAC,EAAE;EAAE,IAAIQ,CAAC,GAAGC,YAAY,CAACT,CAAC,EAAE,QAAQ,CAAC;EAAE,OAAO,QAAQ,IAAI,OAAOQ,CAAC,GAAGA,CAAC,GAAGA,CAAC,GAAG,EAAE;AAAE;AAC1G,SAASC,YAAYA,CAACT,CAAC,EAAED,CAAC,EAAE;EAAE,IAAI,QAAQ,IAAI,OAAOC,CAAC,IAAI,CAACA,CAAC,EAAE,OAAOA,CAAC;EAAE,IAAIF,CAAC,GAAGE,CAAC,CAACU,MAAM,CAACC,WAAW,CAAC;EAAE,IAAI,KAAK,CAAC,KAAKb,CAAC,EAAE;IAAE,IAAIU,CAAC,GAAGV,CAAC,CAACc,IAAI,CAACZ,CAAC,EAAED,CAAC,IAAI,SAAS,CAAC;IAAE,IAAI,QAAQ,IAAI,OAAOS,CAAC,EAAE,OAAOA,CAAC;IAAE,MAAM,IAAIK,SAAS,CAAC,8CAA8C,CAAC;EAAE;EAAE,OAAO,CAAC,QAAQ,KAAKd,CAAC,GAAGe,MAAM,GAAGC,MAAM,EAAEf,CAAC,CAAC;AAAE;AACvT,SAASgB,QAAQ,EAAEC,iBAAiB,EAAEC,YAAY,EAAEC,mBAAmB,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,WAAW,QAAQ,qCAAqC;AACxJ,OAAOC,kBAAkB,MAAM,uBAAuB;AACtD,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,YAAY,QAAQ,iBAAiB;AAC9C;AACA;AACA;AACA,OAAO,MAAMC,aAAa,SAASF,OAAO,CAAC;EACzC;AACF;AACA;AACA;AACA;AACA;EACEG,WAAWA,CAACC,WAAW,EAAEC,YAAY,EAAEC,UAAU,EAAEC,WAAW,EAAE;IAC9D,KAAK,CAACH,WAAW,EAAEC,YAAY,EAAEJ,YAAY,EAAEK,UAAU,EAAEC,WAAW,CAAC;IACvE;AACJ;AACA;AACA;AACA;AACA;IACIlC,eAAe,CAAC,IAAI,EAAE,uBAAuB,EAAE,CAAC,CAAC,CAAC;IAClD,IAAI,CAACmC,qBAAqB,GAAG,IAAI,CAACF,UAAU,CAACG,UAAU,CAAC,iBAAiB,CAAC;EAC5E;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,WAAWA,CAAA,EAAG;IACZ,KAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAAM,EAAEC,IAAI,GAAG,IAAIC,KAAK,CAACJ,IAAI,CAAC,EAAEK,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGL,IAAI,EAAEK,IAAI,EAAE,EAAE;MACvFF,IAAI,CAACE,IAAI,CAAC,GAAGJ,SAAS,CAACI,IAAI,CAAC;IAC9B;IACA,OAAO,IAAIjB,kBAAkB,CAAC,GAAGe,IAAI,CAAC;EACxC;;EAEA;AACF;AACA;AACA;AACA;EACEG,gBAAgBA,CAAA,EAAG;IACjB,OAAO,IAAI,CAACX,UAAU,CAACG,UAAU,CAAC,2BAA2B,CAAC;EAChE;;EAEA;AACF;AACA;AACA;AACA;EACES,kBAAkBA,CAAA,EAAG;IACnB,IAAI,CAAC,IAAI,CAACC,cAAc,IAAI,CAAC,IAAI,CAACF,gBAAgB,CAAC,CAAC,IAAI,CAAC,IAAI,CAACG,GAAG,CAACC,OAAO,CAACC,MAAM,CAACC,UAAU,EAAE;MAC3F;MACA,OAAO,KAAK;IACd;IACA,MAAM;MACJC;IACF,CAAC,GAAG,IAAI,CAACjB,WAAW;IACpB,MAAMkB,WAAW,GAAG,IAAI,CAACC,KAAK,CAACL,OAAO,CAACC,MAAM,CAACC,UAAU;IACxDE,WAAW,CAACE,KAAK,CAACC,GAAG,GAAG,EAAE;IAC1B,IAAIC,eAAe,GAAG,CAAC;IACvB,MAAMC,eAAe,GAAG,IAAI,CAACxB,UAAU,CAACG,UAAU,CAAC,iBAAiB,CAAC;IACrE,IAAI,IAAI,CAACsB,iBAAiB,KAAKP,UAAU,KAAK,CAACM,eAAe,IAAIA,eAAe,KAAK,UAAU,CAAC,EAAE;MACjGD,eAAe,GAAG,IAAI,CAACG,gBAAgB,CAAC,CAAC;MACzCP,WAAW,CAACE,KAAK,CAACM,MAAM,GAAG,GAAGJ,eAAe,IAAI;IACnD,CAAC,MAAM;MACLA,eAAe,GAAG,IAAI,CAACK,iBAAiB,CAAC,CAAC;MAC1C,IAAI,CAACC,iBAAiB,CAAC,CAAC;IAC1B;IACA,MAAMC,eAAe,GAAG,IAAI,CAACC,2BAA2B,CAACR,eAAe,CAAC;IACzE,IAAI,CAACS,kBAAkB,CAAC,CAAC;IACzB,OAAOF,eAAe;EACxB;;EAEA;AACF;AACA;EACED,iBAAiBA,CAAA,EAAG;IAClB,MAAM;MACJd,OAAO;MACPkB;IACF,CAAC,GAAG,IAAI,CAACnB,GAAG;IACZ,MAAM;MACJoB;IACF,CAAC,GAAG,IAAI,CAACjC,WAAW;IACpB,MAAMkC,SAAS,GAAG,IAAI,CAACf,KAAK,CAACL,OAAO,CAACC,MAAM,CAACC,UAAU;IACtD,IAAImB,YAAY,GAAG,CAAC;IACpB,IAAI,CAACH,UAAU,CAACI,iBAAiB,CAAC,CAAC,EAAE;MACnCD,YAAY,IAAIH,UAAU,CAACK,kBAAkB,CAAC,CAAC,GAAGvB,OAAO,CAACwB,cAAc,CAAC,CAAC;IAC5E;IACA,IAAIN,UAAU,CAACI,iBAAiB,CAAC,CAAC,IAAIJ,UAAU,CAACO,mBAAmB,CAAC,CAAC,EAAE;MACtEJ,YAAY,IAAIjD,iBAAiB,CAAC+C,YAAY,CAAC;IACjD;IACAC,SAAS,CAACd,KAAK,CAACM,MAAM,GAAG,GAAGS,YAAY,IAAI;EAC9C;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEK,iBAAiBA,CAACC,GAAG,EAAE;IACrB,MAAM;MACJxB;IACF,CAAC,GAAG,IAAI,CAACjB,WAAW;IACpB,IAAI0C,MAAM,GAAG,KAAK;IAClB,IAAI,IAAI,CAACC,0BAA0B,KAAK1B,UAAU,EAAE;MAClDA,UAAU,CAAC2B,QAAQ,CAACxD,mBAAmB,CAAC6B,UAAU,CAAC,EAAEwB,GAAG,CAAC;MACzDC,MAAM,GAAG,IAAI;IACf,CAAC,MAAM,IAAI,IAAI,CAACC,0BAA0B,CAACE,SAAS,KAAKJ,GAAG,EAAE;MAC5D,IAAI,CAACE,0BAA0B,CAACE,SAAS,GAAGJ,GAAG;MAC/CC,MAAM,GAAG,IAAI;IACf;IACA,OAAOA,MAAM;EACf;;EAEA;AACF;AACA;EACEI,QAAQA,CAAA,EAAG;IACT,IAAI,CAAC/C,UAAU,CAACG,UAAU,CAAC,sBAAsB,CAAC;EACpD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE6C,YAAYA,CAACC,IAAI,EAAEC,EAAE,EAAE;IACrB,MAAM;MACJnC,OAAO;MACPf;IACF,CAAC,GAAG,IAAI,CAACc,GAAG;IACZ,MAAMqC,gBAAgB,GAAGnD,UAAU,CAACG,UAAU,CAAC,kBAAkB,CAAC;IAClE,IAAIiD,GAAG,GAAGH,IAAI;IACd,IAAII,GAAG,GAAG,CAAC;IACX,OAAOD,GAAG,GAAGF,EAAE,EAAE;MACf,MAAMI,MAAM,GAAGvC,OAAO,CAACwC,YAAY,CAACH,GAAG,CAAC;MACxCC,GAAG,IAAIC,MAAM,KAAKE,SAAS,GAAGL,gBAAgB,GAAGG,MAAM;MACvDF,GAAG,IAAI,CAAC;IACV;IACA,OAAOC,GAAG;EACZ;;EAEA;AACF;AACA;EACErB,kBAAkBA,CAAA,EAAG;IACnB,IAAI,CAACyB,uBAAuB,CAAC,CAAC;IAC9B,IAAI,IAAI,CAAC5C,cAAc,EAAE;MACvB,IAAI,CAAC6C,qBAAqB,CAAC,CAAC;MAC5B,IAAI,CAACC,sBAAsB,CAAC,CAAC;IAC/B;EACF;;EAEA;AACF;AACA;EACED,qBAAqBA,CAAA,EAAG;IACtB,MAAM;MACJ3C,OAAO;MACPkB;IACF,CAAC,GAAG,IAAI,CAACnB,GAAG;IACZ,MAAM;MACJoB,YAAY;MACZhB;IACF,CAAC,GAAG,IAAI,CAACjB,WAAW;IACpB,MAAM2D,cAAc,GAAGzE,iBAAiB,CAAC+C,YAAY,CAAC;IACtD,MAAMf,WAAW,GAAG,IAAI,CAACC,KAAK,CAACL,OAAO,CAACC,MAAM,CAACC,UAAU;IACxD,MAAM4C,gBAAgB,GAAG1C,WAAW,CAACE,KAAK;IAC1C,MAAMG,eAAe,GAAG,IAAI,CAACxB,UAAU,CAACG,UAAU,CAAC,iBAAiB,CAAC;IACrE,IAAI,IAAI,CAACsB,iBAAiB,KAAKP,UAAU,IAAIM,eAAe,KAAK,YAAY,EAAE;MAC7E,IAAIsC,KAAK,GAAG7B,UAAU,CAAC8B,iBAAiB,CAAC,CAAC;MAC1C,IAAI,IAAI,CAACjD,GAAG,CAACkD,UAAU,CAACC,iBAAiB,EAAE;QACzCH,KAAK,IAAIF,cAAc;MACzB;MACAE,KAAK,GAAGI,IAAI,CAACC,GAAG,CAACL,KAAK,EAAE/C,OAAO,CAACqD,aAAa,CAACC,WAAW,CAAC;MAC1DR,gBAAgB,CAACC,KAAK,GAAG,GAAGA,KAAK,IAAI;IACvC,CAAC,MAAM;MACLD,gBAAgB,CAACC,KAAK,GAAG,EAAE;IAC7B;IACA,IAAI,CAAC1C,KAAK,CAACL,OAAO,CAACC,MAAM,CAACK,KAAK,CAACyC,KAAK,GAAGD,gBAAgB,CAACC,KAAK;IAC9D,IAAIQ,WAAW,GAAG/E,WAAW,CAAC,IAAI,CAAC6B,KAAK,CAACL,OAAO,CAACwD,KAAK,CAAC;IACvD,IAAI,CAAC,IAAI,CAACzD,GAAG,CAACC,OAAO,CAACyD,cAAc,CAAC,CAAC,EAAE;MACtCF,WAAW,GAAG,CAAC;IACjB;IACAT,gBAAgB,CAACP,MAAM,GAAG,GAAGgB,WAAW,IAAI;EAC9C;;EAEA;AACF;AACA;EACEX,sBAAsBA,CAAA,EAAG;IACvB,MAAM;MACJ3C;IACF,CAAC,GAAG,IAAI,CAACI,KAAK,CAACL,OAAO;IACtB,IAAI,CAACK,KAAK,CAACL,OAAO,CAAC0D,KAAK,CAACpD,KAAK,CAACyC,KAAK,GAAG,IAAI,CAACW,KAAK,CAACpD,KAAK,CAACyC,KAAK;IAC7D9C,MAAM,CAACK,KAAK,CAACyC,KAAK,GAAG9C,MAAM,CAACC,UAAU,CAACI,KAAK,CAACyC,KAAK;IAClD9C,MAAM,CAACK,KAAK,CAACiC,MAAM,GAAGtC,MAAM,CAACC,UAAU,CAACI,KAAK,CAACiC,MAAM;EACtD;;EAEA;AACF;AACA;EACEoB,UAAUA,CAAA,EAAG;IACX,MAAMC,KAAK,GAAG,IAAI,CAAC3E,UAAU,CAACG,UAAU,CAAC,WAAW,CAAC;IACrD,IAAI,OAAO,IAAI,CAACW,GAAG,CAACmB,UAAU,CAAC2C,oBAAoB,CAACC,aAAa,KAAK,QAAQ,EAAE;MAC9E,IAAI,CAACC,QAAQ,CAACzD,KAAK,CAACC,GAAG,GAAG,GAAG,IAAI,CAACR,GAAG,CAACmB,UAAU,CAAC2C,oBAAoB,CAACC,aAAa,IAAI;IACzF,CAAC,MAAM,IAAIF,KAAK,KAAK,CAAC,EAAE;MACtB;MACA,IAAI,CAACG,QAAQ,CAACzD,KAAK,CAACC,GAAG,GAAG,GAAG;IAC/B,CAAC,MAAM;MACL,MAAM,IAAIyD,KAAK,CAAC,6CAA6C,CAAC;IAChE;IACA,IAAI,CAACD,QAAQ,CAACzD,KAAK,CAACM,MAAM,GAAG,EAAE;IAC/B,IAAI,IAAI,CAACd,cAAc,EAAE;MACvB,IAAI,CAACmE,iBAAiB,CAAC,CAAC;IAC1B;EACF;;EAEA;AACF;AACA;EACEA,iBAAiBA,CAAA,EAAG;IAClB,MAAMC,aAAa,GAAG,IAAI,CAACC,KAAK,CAAC,CAAC,GAAG,OAAO,GAAG,MAAM;IACrD,MAAM;MACJJ;IACF,CAAC,GAAG,IAAI,CAAC1D,KAAK,CAACL,OAAO;IACtB,IAAI,OAAO,IAAI,CAACD,GAAG,CAACmB,UAAU,CAACkD,uBAAuB,CAACN,aAAa,KAAK,QAAQ,EAAE;MACjFC,QAAQ,CAACzD,KAAK,CAAC4D,aAAa,CAAC,GAAG,GAAG,IAAI,CAACnE,GAAG,CAACmB,UAAU,CAACkD,uBAAuB,CAACN,aAAa,IAAI;IAClG,CAAC,MAAM;MACLC,QAAQ,CAACzD,KAAK,CAAC4D,aAAa,CAAC,GAAG,EAAE;IACpC;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEpC,QAAQA,CAACuC,SAAS,EAAEC,UAAU,EAAE;IAC9B,IAAIC,IAAI,GAAG,IAAI,CAACC,oBAAoB,CAAC,CAAC;IACtC,MAAMC,cAAc,GAAG,IAAI,CAAC1E,GAAG,CAAC2E,WAAW,GAAG,IAAI,CAAC3E,GAAG,CAAC2E,WAAW,GAAG,IAAI,CAAC3E,GAAG;IAC7E,MAAM4E,UAAU,GAAGF,cAAc,CAACzE,OAAO,CAACC,MAAM;IAChD,IAAI2E,qBAAqB,GAAG,CAAC;IAC7B,IAAIN,UAAU,IAAIK,UAAU,CAACE,YAAY,KAAKF,UAAU,CAACG,YAAY,EAAE;MACrEF,qBAAqB,GAAGxG,iBAAiB,CAAC,IAAI,CAACc,WAAW,CAACiC,YAAY,CAAC;IAC1E;IACA,IAAImD,UAAU,EAAE;MACdC,IAAI,IAAI,IAAI,CAACtC,YAAY,CAAC,CAAC,EAAEoC,SAAS,GAAG,CAAC,CAAC;MAC3CE,IAAI,IAAI,IAAI,CAACxE,GAAG,CAACmB,UAAU,CAAC6D,iBAAiB,CAAC,CAAC;MAC/C;MACAR,IAAI,IAAI,CAAC;IACX,CAAC,MAAM;MACLA,IAAI,IAAI,IAAI,CAACtC,YAAY,CAAC,IAAI,CAAChD,UAAU,CAACG,UAAU,CAAC,iBAAiB,CAAC,EAAEiF,SAAS,CAAC;IACrF;IACAE,IAAI,IAAIK,qBAAqB;IAC7B,IAAI,CAAClD,iBAAiB,CAAC6C,IAAI,CAAC;EAC9B;;EAEA;AACF;AACA;AACA;AACA;EACEC,oBAAoBA,CAAA,EAAG;IACrB,IAAI,IAAI,CAAC3C,0BAA0B,KAAK,IAAI,CAAC3C,WAAW,CAACiB,UAAU,EAAE;MACnE,OAAO,IAAI,CAACJ,GAAG,CAACC,OAAO,CAACgF,YAAY,CAACzE,GAAG;IAC1C;IACA,OAAO,CAAC;EACV;;EAEA;AACF;AACA;AACA;AACA;EACEM,iBAAiBA,CAAA,EAAG;IAClB,OAAOxC,YAAY,CAAC,IAAI,CAACwD,0BAA0B,EAAE,IAAI,CAAC3C,WAAW,CAACiB,UAAU,CAAC;EACnF;;EAEA;AACF;AACA;AACA;AACA;EACEQ,gBAAgBA,CAAA,EAAG;IACjB,MAAM;MACJR;IACF,CAAC,GAAG,IAAI,CAACjB,WAAW;IACpB,MAAMuB,eAAe,GAAG,IAAI,CAACxB,UAAU,CAACG,UAAU,CAAC,iBAAiB,CAAC;IACrE,IAAI6F,aAAa,GAAG,CAAC;IACrB,IAAI,IAAI,CAACvE,iBAAiB,KAAKP,UAAU,KAAK,CAACM,eAAe,IAAIA,eAAe,KAAK,UAAU,CAAC,EAAE;MACjG,MAAMyE,UAAU,GAAG,IAAI,CAACnF,GAAG,CAACC,OAAO,CAACwB,cAAc,CAAC,CAAC;MACpD,MAAM2D,iBAAiB,GAAG,IAAI,CAAC9E,KAAK,CAACL,OAAO,CAACwB,cAAc,CAAC,CAAC;MAC7D,MAAM4D,SAAS,GAAGF,UAAU,GAAGC,iBAAiB;MAChD,MAAME,eAAe,GAAG,IAAI,CAACnG,WAAW,CAACiC,YAAY,CAACmE,eAAe,CAACR,YAAY;MAClFG,aAAa,GAAG9B,IAAI,CAACoC,GAAG,CAAC,IAAI,CAACf,oBAAoB,CAAC,CAAC,GAAG,IAAI,CAAC3D,iBAAiB,CAAC,CAAC,GAAGwE,eAAe,GAAGH,UAAU,EAAE,CAAC,CAAC;MAClH,IAAID,aAAa,GAAGG,SAAS,EAAE;QAC7BH,aAAa,GAAG,CAAC;MACnB;IACF;IACA,OAAOA,aAAa;EACtB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEjE,2BAA2BA,CAACwE,QAAQ,EAAE;IACpC,MAAMC,eAAe,GAAG,IAAI,CAACxG,UAAU,CAACG,UAAU,CAAC,iBAAiB,CAAC;IACrE,MAAMsG,yBAAyB,GAAG,IAAI,CAACvG,qBAAqB,KAAKsG,eAAe;IAChF,MAAME,aAAa,GAAG,IAAI,CAAC1G,UAAU,CAACG,UAAU,CAAC,eAAe,CAAC;IACjE,IAAI2B,eAAe,GAAG,KAAK;IAC3B,IAAI,CAAC2E,yBAAyB,IAAID,eAAe,KAAK,CAAC,KAAKE,aAAa,CAACnG,MAAM,GAAG,CAAC,EAAE;MACpF,MAAMoG,YAAY,GAAG,IAAI,CAAC7F,GAAG,CAACC,OAAO,CAACC,MAAM,CAACC,UAAU;MACvD,MAAM2F,aAAa,GAAGtH,QAAQ,CAACqH,YAAY,EAAE,mBAAmB,CAAC;MACjE,IAAI,CAACzG,qBAAqB,GAAG,IAAI,CAACF,UAAU,CAACG,UAAU,CAAC,iBAAiB,CAAC;MAC1E,IAAIoG,QAAQ,IAAI,IAAI,CAACvG,UAAU,CAACG,UAAU,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE;QAC7DjB,QAAQ,CAACyH,YAAY,EAAE,mBAAmB,CAAC;QAC3C7E,eAAe,GAAG,CAAC8E,aAAa;MAClC,CAAC,MAAM;QACLpH,WAAW,CAACmH,YAAY,EAAE,mBAAmB,CAAC;QAC9C7E,eAAe,GAAG8E,aAAa;MACjC;IACF;IACA,OAAO9E,eAAe;EACxB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}