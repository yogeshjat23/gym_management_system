{"ast":null,"code":"import { getComparisonFunction } from \"../../helpers/feature.mjs\";\nimport { arrayUnique, arrayEach } from \"../../helpers/array.mjs\";\nconst sortCompare = getComparisonFunction();\n\n/**\n * Comparison function for sorting purposes.\n *\n * @param {*} a The first value to compare.\n * @param {*} b The second value to compare.\n * @returns {number} Returns number from -1 to 1.\n */\nexport function sortComparison(a, b) {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a - b;\n  }\n  return sortCompare(a, b);\n}\n\n/**\n * Convert raw value into visual value.\n *\n * @param {*} value The value to convert.\n * @param {string} defaultEmptyValue Default value for empty cells.\n * @returns {*}\n */\nexport function toVisualValue(value, defaultEmptyValue) {\n  let visualValue = value;\n  if (visualValue === '') {\n    visualValue = `(${defaultEmptyValue})`;\n  }\n  return visualValue;\n}\nconst SUPPORT_SET_CONSTRUCTOR = new Set([1]).has(1);\nconst SUPPORT_FAST_DEDUPE = SUPPORT_SET_CONSTRUCTOR && typeof Array.from === 'function';\n\n/**\n * Create an array assertion to compare if an element exists in that array (in a more efficient way than .indexOf).\n *\n * @param {Array} initialData Values to compare.\n * @returns {Function}\n */\nexport function createArrayAssertion(initialData) {\n  let dataset = initialData;\n  if (SUPPORT_SET_CONSTRUCTOR) {\n    dataset = new Set(dataset);\n  }\n  return function (value) {\n    let result;\n    if (SUPPORT_SET_CONSTRUCTOR) {\n      result = dataset.has(value);\n    } else {\n      /* eslint-disable no-bitwise */\n      result = !!~dataset.indexOf(value);\n    }\n    return result;\n  };\n}\n\n/**\n * Convert empty-ish values like null and undefined to an empty string.\n *\n * @param {*} value Value to check.\n * @returns {string}\n */\nexport function toEmptyString(value) {\n  return value === null || value === undefined ? '' : value;\n}\n\n/**\n * Unify column values (remove duplicated values and sort them).\n *\n * @param {Array} values An array of values.\n * @returns {Array}\n */\nexport function unifyColumnValues(values) {\n  let unifiedValues = values;\n  if (SUPPORT_FAST_DEDUPE) {\n    unifiedValues = Array.from(new Set(unifiedValues));\n  } else {\n    unifiedValues = arrayUnique(unifiedValues);\n  }\n  unifiedValues = unifiedValues.sort((a, b) => {\n    if (typeof a === 'number' && typeof b === 'number') {\n      return a - b;\n    }\n    if (a === b) {\n      return 0;\n    }\n    return a > b ? 1 : -1;\n  });\n  return unifiedValues;\n}\n\n/**\n * Intersect 'base' values with 'selected' values and return an array of object.\n *\n * @param {Array} base An array of base values.\n * @param {Array} selected An array of selected values.\n * @param {string} defaultEmptyValue Default value for empty cells.\n * @param {Function} [callback] A callback function which is invoked for every item in an array.\n * @returns {Array}\n */\nexport function intersectValues(base, selected, defaultEmptyValue, callback) {\n  const result = [];\n  const same = base === selected;\n  let selectedItemsAssertion;\n  if (!same) {\n    selectedItemsAssertion = createArrayAssertion(selected);\n  }\n  arrayEach(base, value => {\n    let checked = false;\n    if (same || selectedItemsAssertion(value)) {\n      checked = true;\n    }\n    const item = {\n      checked,\n      value,\n      visualValue: toVisualValue(value, defaultEmptyValue)\n    };\n    if (callback) {\n      callback(item);\n    }\n    result.push(item);\n  });\n  return result;\n}","map":{"version":3,"names":["getComparisonFunction","arrayUnique","arrayEach","sortCompare","sortComparison","a","b","toVisualValue","value","defaultEmptyValue","visualValue","SUPPORT_SET_CONSTRUCTOR","Set","has","SUPPORT_FAST_DEDUPE","Array","from","createArrayAssertion","initialData","dataset","result","indexOf","toEmptyString","undefined","unifyColumnValues","values","unifiedValues","sort","intersectValues","base","selected","callback","same","selectedItemsAssertion","checked","item","push"],"sources":["D:/gym-project/frontend/node_modules/handsontable/plugins/filters/utils.mjs"],"sourcesContent":["import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport { getComparisonFunction } from \"../../helpers/feature.mjs\";\nimport { arrayUnique, arrayEach } from \"../../helpers/array.mjs\";\nconst sortCompare = getComparisonFunction();\n\n/**\n * Comparison function for sorting purposes.\n *\n * @param {*} a The first value to compare.\n * @param {*} b The second value to compare.\n * @returns {number} Returns number from -1 to 1.\n */\nexport function sortComparison(a, b) {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a - b;\n  }\n  return sortCompare(a, b);\n}\n\n/**\n * Convert raw value into visual value.\n *\n * @param {*} value The value to convert.\n * @param {string} defaultEmptyValue Default value for empty cells.\n * @returns {*}\n */\nexport function toVisualValue(value, defaultEmptyValue) {\n  let visualValue = value;\n  if (visualValue === '') {\n    visualValue = `(${defaultEmptyValue})`;\n  }\n  return visualValue;\n}\nconst SUPPORT_SET_CONSTRUCTOR = new Set([1]).has(1);\nconst SUPPORT_FAST_DEDUPE = SUPPORT_SET_CONSTRUCTOR && typeof Array.from === 'function';\n\n/**\n * Create an array assertion to compare if an element exists in that array (in a more efficient way than .indexOf).\n *\n * @param {Array} initialData Values to compare.\n * @returns {Function}\n */\nexport function createArrayAssertion(initialData) {\n  let dataset = initialData;\n  if (SUPPORT_SET_CONSTRUCTOR) {\n    dataset = new Set(dataset);\n  }\n  return function (value) {\n    let result;\n    if (SUPPORT_SET_CONSTRUCTOR) {\n      result = dataset.has(value);\n    } else {\n      /* eslint-disable no-bitwise */\n      result = !!~dataset.indexOf(value);\n    }\n    return result;\n  };\n}\n\n/**\n * Convert empty-ish values like null and undefined to an empty string.\n *\n * @param {*} value Value to check.\n * @returns {string}\n */\nexport function toEmptyString(value) {\n  return value === null || value === undefined ? '' : value;\n}\n\n/**\n * Unify column values (remove duplicated values and sort them).\n *\n * @param {Array} values An array of values.\n * @returns {Array}\n */\nexport function unifyColumnValues(values) {\n  let unifiedValues = values;\n  if (SUPPORT_FAST_DEDUPE) {\n    unifiedValues = Array.from(new Set(unifiedValues));\n  } else {\n    unifiedValues = arrayUnique(unifiedValues);\n  }\n  unifiedValues = unifiedValues.sort((a, b) => {\n    if (typeof a === 'number' && typeof b === 'number') {\n      return a - b;\n    }\n    if (a === b) {\n      return 0;\n    }\n    return a > b ? 1 : -1;\n  });\n  return unifiedValues;\n}\n\n/**\n * Intersect 'base' values with 'selected' values and return an array of object.\n *\n * @param {Array} base An array of base values.\n * @param {Array} selected An array of selected values.\n * @param {string} defaultEmptyValue Default value for empty cells.\n * @param {Function} [callback] A callback function which is invoked for every item in an array.\n * @returns {Array}\n */\nexport function intersectValues(base, selected, defaultEmptyValue, callback) {\n  const result = [];\n  const same = base === selected;\n  let selectedItemsAssertion;\n  if (!same) {\n    selectedItemsAssertion = createArrayAssertion(selected);\n  }\n  arrayEach(base, value => {\n    let checked = false;\n    if (same || selectedItemsAssertion(value)) {\n      checked = true;\n    }\n    const item = {\n      checked,\n      value,\n      visualValue: toVisualValue(value, defaultEmptyValue)\n    };\n    if (callback) {\n      callback(item);\n    }\n    result.push(item);\n  });\n  return result;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}