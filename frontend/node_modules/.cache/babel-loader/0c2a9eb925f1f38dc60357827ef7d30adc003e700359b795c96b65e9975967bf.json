{"ast":null,"code":"import { objectEach } from \"./object.mjs\";\nimport { isCSR } from \"./feature.mjs\";\nconst tester = testerFunc => {\n  const result = {\n    value: false\n  };\n  result.test = (ua, vendor) => {\n    result.value = testerFunc(ua, vendor);\n  };\n  return result;\n};\nconst browsers = {\n  chrome: tester((ua, vendor) => /Chrome/.test(ua) && /Google/.test(vendor)),\n  chromeWebKit: tester(ua => /CriOS/.test(ua)),\n  edge: tester(ua => /Edge/.test(ua)),\n  edgeWebKit: tester(ua => /EdgiOS/.test(ua)),\n  firefox: tester(ua => /Firefox/.test(ua)),\n  firefoxWebKit: tester(ua => /FxiOS/.test(ua)),\n  mobile: tester(ua => /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(ua)),\n  safari: tester((ua, vendor) => /Safari/.test(ua) && /Apple Computer/.test(vendor))\n};\nconst platforms = {\n  mac: tester(platform => /^Mac/.test(platform)),\n  win: tester(platform => /^Win/.test(platform)),\n  linux: tester(platform => /^Linux/.test(platform)),\n  ios: tester(ua => /iPhone|iPad|iPod/i.test(ua))\n};\n\n/**\n * @param {object} [metaObject] The browser identity collection.\n * @param {object} [metaObject.userAgent] The user agent reported by browser.\n * @param {object} [metaObject.vendor] The vendor name reported by browser.\n */\nexport function setBrowserMeta() {\n  let {\n    userAgent = navigator.userAgent,\n    vendor = navigator.vendor\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  objectEach(browsers, _ref => {\n    let {\n      test\n    } = _ref;\n    return void test(userAgent, vendor);\n  });\n}\n\n/**\n * @param {object} [metaObject] The platform identity collection.\n * @param {object} [metaObject.platform] The platform ID.\n */\nexport function setPlatformMeta() {\n  let {\n    platform = navigator.platform\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  objectEach(platforms, _ref2 => {\n    let {\n      test\n    } = _ref2;\n    return void test(platform);\n  });\n}\nif (isCSR()) {\n  setBrowserMeta();\n  setPlatformMeta();\n}\n\n/**\n * @returns {boolean}\n */\nexport function isChrome() {\n  return browsers.chrome.value;\n}\n\n/**\n * @returns {boolean}\n */\nexport function isChromeWebKit() {\n  return browsers.chromeWebKit.value;\n}\n\n/**\n * @returns {boolean}\n */\nexport function isFirefox() {\n  return browsers.firefox.value;\n}\n\n/**\n * @returns {boolean}\n */\nexport function isFirefoxWebKit() {\n  return browsers.firefoxWebKit.value;\n}\n\n/**\n * @returns {boolean}\n */\nexport function isSafari() {\n  return browsers.safari.value;\n}\n\n/**\n * @returns {boolean}\n */\nexport function isEdge() {\n  return browsers.edge.value;\n}\n\n/**\n * @returns {boolean}\n */\nexport function isEdgeWebKit() {\n  return browsers.edgeWebKit.value;\n}\n\n/**\n * @returns {boolean}\n */\nexport function isMobileBrowser() {\n  return browsers.mobile.value;\n}\n\n/**\n * @returns {boolean}\n */\nexport function isIOS() {\n  return platforms.ios.value;\n}\n\n/**\n * A hacky way to recognize the iPad. Since iOS 13, the iPad on Safari mimics macOS behavior and user agent.\n *\n * @see {@https://stackoverflow.com/a/57838385}\n * @param {object} [metaObject] The browser identity collection.\n * @param {number} [metaObject.maxTouchPoints] The maximum number of simultanous touch points.\n * @returns {boolean}\n */\nexport function isIpadOS() {\n  let {\n    maxTouchPoints\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : navigator;\n  return maxTouchPoints > 2 && platforms.mac.value;\n}\n\n/**\n * @returns {boolean}\n */\nexport function isWindowsOS() {\n  return platforms.win.value;\n}\n\n/**\n * @returns {boolean}\n */\nexport function isMacOS() {\n  return platforms.mac.value;\n}\n\n/**\n * @returns {boolean}\n */\nexport function isLinuxOS() {\n  return platforms.linux.value;\n}","map":{"version":3,"names":["objectEach","isCSR","tester","testerFunc","result","value","test","ua","vendor","browsers","chrome","chromeWebKit","edge","edgeWebKit","firefox","firefoxWebKit","mobile","safari","platforms","mac","platform","win","linux","ios","setBrowserMeta","userAgent","navigator","arguments","length","undefined","_ref","setPlatformMeta","_ref2","isChrome","isChromeWebKit","isFirefox","isFirefoxWebKit","isSafari","isEdge","isEdgeWebKit","isMobileBrowser","isIOS","isIpadOS","maxTouchPoints","isWindowsOS","isMacOS","isLinuxOS"],"sources":["D:/gym-project/frontend/node_modules/handsontable/helpers/browser.mjs"],"sourcesContent":["import { objectEach } from \"./object.mjs\";\nimport { isCSR } from \"./feature.mjs\";\nconst tester = testerFunc => {\n  const result = {\n    value: false\n  };\n  result.test = (ua, vendor) => {\n    result.value = testerFunc(ua, vendor);\n  };\n  return result;\n};\nconst browsers = {\n  chrome: tester((ua, vendor) => /Chrome/.test(ua) && /Google/.test(vendor)),\n  chromeWebKit: tester(ua => /CriOS/.test(ua)),\n  edge: tester(ua => /Edge/.test(ua)),\n  edgeWebKit: tester(ua => /EdgiOS/.test(ua)),\n  firefox: tester(ua => /Firefox/.test(ua)),\n  firefoxWebKit: tester(ua => /FxiOS/.test(ua)),\n  mobile: tester(ua => /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(ua)),\n  safari: tester((ua, vendor) => /Safari/.test(ua) && /Apple Computer/.test(vendor))\n};\nconst platforms = {\n  mac: tester(platform => /^Mac/.test(platform)),\n  win: tester(platform => /^Win/.test(platform)),\n  linux: tester(platform => /^Linux/.test(platform)),\n  ios: tester(ua => /iPhone|iPad|iPod/i.test(ua))\n};\n\n/**\n * @param {object} [metaObject] The browser identity collection.\n * @param {object} [metaObject.userAgent] The user agent reported by browser.\n * @param {object} [metaObject.vendor] The vendor name reported by browser.\n */\nexport function setBrowserMeta() {\n  let {\n    userAgent = navigator.userAgent,\n    vendor = navigator.vendor\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  objectEach(browsers, _ref => {\n    let {\n      test\n    } = _ref;\n    return void test(userAgent, vendor);\n  });\n}\n\n/**\n * @param {object} [metaObject] The platform identity collection.\n * @param {object} [metaObject.platform] The platform ID.\n */\nexport function setPlatformMeta() {\n  let {\n    platform = navigator.platform\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  objectEach(platforms, _ref2 => {\n    let {\n      test\n    } = _ref2;\n    return void test(platform);\n  });\n}\nif (isCSR()) {\n  setBrowserMeta();\n  setPlatformMeta();\n}\n\n/**\n * @returns {boolean}\n */\nexport function isChrome() {\n  return browsers.chrome.value;\n}\n\n/**\n * @returns {boolean}\n */\nexport function isChromeWebKit() {\n  return browsers.chromeWebKit.value;\n}\n\n/**\n * @returns {boolean}\n */\nexport function isFirefox() {\n  return browsers.firefox.value;\n}\n\n/**\n * @returns {boolean}\n */\nexport function isFirefoxWebKit() {\n  return browsers.firefoxWebKit.value;\n}\n\n/**\n * @returns {boolean}\n */\nexport function isSafari() {\n  return browsers.safari.value;\n}\n\n/**\n * @returns {boolean}\n */\nexport function isEdge() {\n  return browsers.edge.value;\n}\n\n/**\n * @returns {boolean}\n */\nexport function isEdgeWebKit() {\n  return browsers.edgeWebKit.value;\n}\n\n/**\n * @returns {boolean}\n */\nexport function isMobileBrowser() {\n  return browsers.mobile.value;\n}\n\n/**\n * @returns {boolean}\n */\nexport function isIOS() {\n  return platforms.ios.value;\n}\n\n/**\n * A hacky way to recognize the iPad. Since iOS 13, the iPad on Safari mimics macOS behavior and user agent.\n *\n * @see {@https://stackoverflow.com/a/57838385}\n * @param {object} [metaObject] The browser identity collection.\n * @param {number} [metaObject.maxTouchPoints] The maximum number of simultanous touch points.\n * @returns {boolean}\n */\nexport function isIpadOS() {\n  let {\n    maxTouchPoints\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : navigator;\n  return maxTouchPoints > 2 && platforms.mac.value;\n}\n\n/**\n * @returns {boolean}\n */\nexport function isWindowsOS() {\n  return platforms.win.value;\n}\n\n/**\n * @returns {boolean}\n */\nexport function isMacOS() {\n  return platforms.mac.value;\n}\n\n/**\n * @returns {boolean}\n */\nexport function isLinuxOS() {\n  return platforms.linux.value;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}