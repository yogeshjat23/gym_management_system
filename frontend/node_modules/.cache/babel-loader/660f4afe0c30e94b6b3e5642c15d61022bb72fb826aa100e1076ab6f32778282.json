{"ast":null,"code":"function _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\n/**\n * @class PartiallyVisibleColumnsCalculationType\n */\nexport class PartiallyVisibleColumnsCalculationType {\n  constructor() {\n    /**\n     * Total number of partially visible columns in the viewport.\n     *\n     * @type {number}\n     */\n    _defineProperty(this, \"count\", 0);\n    /**\n     * The column index of the first partially visible column in the viewport.\n     *\n     * @type {number|null}\n     */\n    _defineProperty(this, \"startColumn\", null);\n    /**\n     * The column index of the last partially visible column in the viewport.\n     *\n     * @type {number|null}\n     */\n    _defineProperty(this, \"endColumn\", null);\n    /**\n     * Position of the first partially visible column (in px).\n     *\n     * @type {number|null}\n     */\n    _defineProperty(this, \"startPosition\", null);\n    /**\n     * Determines if the viewport is visible in the trimming container.\n     *\n     * @type {boolean}\n     */\n    _defineProperty(this, \"isVisibleInTrimmingContainer\", false);\n  }\n  /**\n   * Initializes the calculation.\n   */\n  initialize() {}\n\n  /**\n   * Processes the column.\n   *\n   * @param {number} column The column index.\n   * @param {ViewportColumnsCalculator} viewportCalculator The viewport calculator object.\n   */\n  process(column, viewportCalculator) {\n    const {\n      totalCalculatedWidth,\n      zeroBasedScrollOffset,\n      viewportWidth\n    } = viewportCalculator;\n    if (totalCalculatedWidth <= zeroBasedScrollOffset) {\n      this.startColumn = column;\n    }\n    const compensatedViewportWidth = zeroBasedScrollOffset > 0 ? viewportWidth + 1 : viewportWidth;\n    if (totalCalculatedWidth >= zeroBasedScrollOffset && totalCalculatedWidth <= zeroBasedScrollOffset + compensatedViewportWidth) {\n      if (this.startColumn === null || this.startColumn === undefined) {\n        this.startColumn = column;\n      }\n    }\n    this.endColumn = column;\n  }\n\n  /**\n   * Finalizes the calculation.\n   *\n   * @param {ViewportColumnsCalculator} viewportCalculator The viewport calculator object.\n   */\n  finalize(viewportCalculator) {\n    var _startPositions$this$;\n    const {\n      scrollOffset,\n      viewportWidth,\n      inlineStartOffset,\n      zeroBasedScrollOffset,\n      totalColumns,\n      needReverse,\n      startPositions,\n      columnWidth\n    } = viewportCalculator;\n\n    // If the estimation has reached the last column and there is still some space available in the viewport,\n    // we need to render in reverse in order to fill the whole viewport with columns\n    if (this.endColumn === totalColumns - 1 && needReverse) {\n      this.startColumn = this.endColumn;\n      while (this.startColumn > 0) {\n        const calculatedViewportWidth = startPositions[this.endColumn] + columnWidth - startPositions[this.startColumn - 1];\n        this.startColumn -= 1;\n        if (calculatedViewportWidth > viewportWidth) {\n          break;\n        }\n      }\n    }\n    this.startPosition = (_startPositions$this$ = startPositions[this.startColumn]) !== null && _startPositions$this$ !== void 0 ? _startPositions$this$ : null;\n    const compensatedViewportWidth = zeroBasedScrollOffset > 0 ? viewportWidth + 1 : viewportWidth;\n    const mostRightScrollOffset = scrollOffset + viewportWidth - compensatedViewportWidth;\n    if (\n    // the table is to the left of the viewport\n    mostRightScrollOffset < -1 * inlineStartOffset || scrollOffset > startPositions.at(-1) + columnWidth ||\n    // the table is to the right of the viewport\n    -1 * scrollOffset - viewportWidth > 0) {\n      this.isVisibleInTrimmingContainer = false;\n    } else {\n      this.isVisibleInTrimmingContainer = true;\n    }\n    if (totalColumns < this.endColumn) {\n      this.endColumn = totalColumns - 1;\n    }\n    if (this.startColumn !== null) {\n      this.count = this.endColumn - this.startColumn + 1;\n    }\n  }\n}","map":{"version":3,"names":["_defineProperty","e","r","t","_toPropertyKey","Object","defineProperty","value","enumerable","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","PartiallyVisibleColumnsCalculationType","constructor","initialize","process","column","viewportCalculator","totalCalculatedWidth","zeroBasedScrollOffset","viewportWidth","startColumn","compensatedViewportWidth","undefined","endColumn","finalize","_startPositions$this$","scrollOffset","inlineStartOffset","totalColumns","needReverse","startPositions","columnWidth","calculatedViewportWidth","startPosition","mostRightScrollOffset","at","isVisibleInTrimmingContainer","count"],"sources":["D:/gym-project/frontend/node_modules/handsontable/3rdparty/walkontable/src/calculator/calculationType/partiallyVisibleColumns.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.at.js\";\nimport \"core-js/modules/es.string.at-alternative.js\";\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * @class PartiallyVisibleColumnsCalculationType\n */\nexport class PartiallyVisibleColumnsCalculationType {\n  constructor() {\n    /**\n     * Total number of partially visible columns in the viewport.\n     *\n     * @type {number}\n     */\n    _defineProperty(this, \"count\", 0);\n    /**\n     * The column index of the first partially visible column in the viewport.\n     *\n     * @type {number|null}\n     */\n    _defineProperty(this, \"startColumn\", null);\n    /**\n     * The column index of the last partially visible column in the viewport.\n     *\n     * @type {number|null}\n     */\n    _defineProperty(this, \"endColumn\", null);\n    /**\n     * Position of the first partially visible column (in px).\n     *\n     * @type {number|null}\n     */\n    _defineProperty(this, \"startPosition\", null);\n    /**\n     * Determines if the viewport is visible in the trimming container.\n     *\n     * @type {boolean}\n     */\n    _defineProperty(this, \"isVisibleInTrimmingContainer\", false);\n  }\n  /**\n   * Initializes the calculation.\n   */\n  initialize() {}\n\n  /**\n   * Processes the column.\n   *\n   * @param {number} column The column index.\n   * @param {ViewportColumnsCalculator} viewportCalculator The viewport calculator object.\n   */\n  process(column, viewportCalculator) {\n    const {\n      totalCalculatedWidth,\n      zeroBasedScrollOffset,\n      viewportWidth\n    } = viewportCalculator;\n    if (totalCalculatedWidth <= zeroBasedScrollOffset) {\n      this.startColumn = column;\n    }\n    const compensatedViewportWidth = zeroBasedScrollOffset > 0 ? viewportWidth + 1 : viewportWidth;\n    if (totalCalculatedWidth >= zeroBasedScrollOffset && totalCalculatedWidth <= zeroBasedScrollOffset + compensatedViewportWidth) {\n      if (this.startColumn === null || this.startColumn === undefined) {\n        this.startColumn = column;\n      }\n    }\n    this.endColumn = column;\n  }\n\n  /**\n   * Finalizes the calculation.\n   *\n   * @param {ViewportColumnsCalculator} viewportCalculator The viewport calculator object.\n   */\n  finalize(viewportCalculator) {\n    var _startPositions$this$;\n    const {\n      scrollOffset,\n      viewportWidth,\n      inlineStartOffset,\n      zeroBasedScrollOffset,\n      totalColumns,\n      needReverse,\n      startPositions,\n      columnWidth\n    } = viewportCalculator;\n\n    // If the estimation has reached the last column and there is still some space available in the viewport,\n    // we need to render in reverse in order to fill the whole viewport with columns\n    if (this.endColumn === totalColumns - 1 && needReverse) {\n      this.startColumn = this.endColumn;\n      while (this.startColumn > 0) {\n        const calculatedViewportWidth = startPositions[this.endColumn] + columnWidth - startPositions[this.startColumn - 1];\n        this.startColumn -= 1;\n        if (calculatedViewportWidth > viewportWidth) {\n          break;\n        }\n      }\n    }\n    this.startPosition = (_startPositions$this$ = startPositions[this.startColumn]) !== null && _startPositions$this$ !== void 0 ? _startPositions$this$ : null;\n    const compensatedViewportWidth = zeroBasedScrollOffset > 0 ? viewportWidth + 1 : viewportWidth;\n    const mostRightScrollOffset = scrollOffset + viewportWidth - compensatedViewportWidth;\n    if (\n    // the table is to the left of the viewport\n    mostRightScrollOffset < -1 * inlineStartOffset || scrollOffset > startPositions.at(-1) + columnWidth ||\n    // the table is to the right of the viewport\n    -1 * scrollOffset - viewportWidth > 0) {\n      this.isVisibleInTrimmingContainer = false;\n    } else {\n      this.isVisibleInTrimmingContainer = true;\n    }\n    if (totalColumns < this.endColumn) {\n      this.endColumn = totalColumns - 1;\n    }\n    if (this.startColumn !== null) {\n      this.count = this.endColumn - this.startColumn + 1;\n    }\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}