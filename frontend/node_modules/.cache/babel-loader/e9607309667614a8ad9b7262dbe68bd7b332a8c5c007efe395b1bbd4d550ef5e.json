{"ast":null,"code":"function _classPrivateMethodInitSpec(e, a) {\n  _checkPrivateRedeclaration(e, a), a.add(e);\n}\nfunction _classPrivateFieldInitSpec(e, t, a) {\n  _checkPrivateRedeclaration(e, t), t.set(e, a);\n}\nfunction _checkPrivateRedeclaration(e, t) {\n  if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _classPrivateFieldGet(s, a) {\n  return s.get(_assertClassBrand(s, a));\n}\nfunction _classPrivateFieldSet(s, a, r) {\n  return s.set(_assertClassBrand(s, a), r), r;\n}\nfunction _assertClassBrand(e, t, n) {\n  if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n;\n  throw new TypeError(\"Private element is not present on this object\");\n}\nimport { BasePlugin } from \"../base/index.mjs\";\nimport { arrayEach, arrayFilter, arrayUnique } from \"../../helpers/array.mjs\";\nimport { rangeEach } from \"../../helpers/number.mjs\";\nimport { warn } from \"../../helpers/console.mjs\";\nimport { addClass, hasClass, removeClass, fastInnerText, removeAttribute, setAttribute } from \"../../helpers/dom/element.mjs\";\nimport { stopImmediatePropagation } from \"../../helpers/dom/event.mjs\";\nimport { EDITOR_EDIT_GROUP as SHORTCUTS_GROUP_EDITOR } from \"../../shortcutContexts/index.mjs\";\nimport { A11Y_EXPANDED, A11Y_HIDDEN } from \"../../helpers/a11y.mjs\";\nexport const PLUGIN_KEY = 'collapsibleColumns';\nexport const PLUGIN_PRIORITY = 290;\nconst SETTING_KEYS = ['nestedHeaders'];\nconst COLLAPSIBLE_ELEMENT_CLASS = 'collapsibleIndicator';\nconst SHORTCUTS_GROUP = PLUGIN_KEY;\nconst actionDictionary = new Map([['collapse', {\n  hideColumn: true,\n  beforeHook: 'beforeColumnCollapse',\n  afterHook: 'afterColumnCollapse'\n}], ['expand', {\n  hideColumn: false,\n  beforeHook: 'beforeColumnExpand',\n  afterHook: 'afterColumnExpand'\n}]]);\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @plugin CollapsibleColumns\n * @class CollapsibleColumns\n *\n * @description\n * The _CollapsibleColumns_ plugin allows collapsing of columns, covered by a header with the `colspan` property defined.\n *\n * Clicking the \"collapse/expand\" button collapses (or expands) all \"child\" headers except the first one.\n *\n * Setting the {@link Options#collapsiblecolumns} property to `true` will display a \"collapse/expand\" button in every header\n * with a defined `colspan` property.\n *\n * To limit this functionality to a smaller group of headers, define the `collapsibleColumns` property as an array\n * of objects, as in the example below.\n *\n * @example\n * ::: only-for javascript\n * ```js\n * const container = document.getElementById('example');\n * const hot = new Handsontable(container, {\n *   data: generateDataObj(),\n *   colHeaders: true,\n *   rowHeaders: true,\n *   nestedHeaders: true,\n *   // enable plugin\n *   collapsibleColumns: true,\n * });\n *\n * // or\n * const hot = new Handsontable(container, {\n *   data: generateDataObj(),\n *   colHeaders: true,\n *   rowHeaders: true,\n *   nestedHeaders: true,\n *   // enable and configure which columns can be collapsed\n *   collapsibleColumns: [\n *     {row: -4, col: 1, collapsible: true},\n *     {row: -3, col: 5, collapsible: true}\n *   ],\n * });\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * <HotTable\n *   data={generateDataObj()}\n *   colHeaders={true}\n *   rowHeaders={true}\n *   nestedHeaders={true}\n *   // enable plugin\n *   collapsibleColumns={true}\n * />\n *\n * // or\n * <HotTable\n *   data={generateDataObj()}\n *   colHeaders={true}\n *   rowHeaders={true}\n *   nestedHeaders={true}\n *   // enable and configure which columns can be collapsed\n *   collapsibleColumns={[\n *     {row: -4, col: 1, collapsible: true},\n *     {row: -3, col: 5, collapsible: true}\n *   ]}\n * />\n * ```\n * :::\n */\nvar _collapsedColumnsMap = /*#__PURE__*/new WeakMap();\nvar _CollapsibleColumns_brand = /*#__PURE__*/new WeakSet();\nexport class CollapsibleColumns extends BasePlugin {\n  constructor() {\n    super(...arguments);\n    /**\n     * Adds the indicator to the headers.\n     *\n     * @param {number} column Column index.\n     * @param {HTMLElement} TH TH element.\n     * @param {number} headerLevel The index of header level counting from the top (positive\n     *                             values counting from 0 to N).\n     */\n    _classPrivateMethodInitSpec(this, _CollapsibleColumns_brand);\n    /**\n     * Cached reference to the NestedHeaders plugin.\n     *\n     * @private\n     * @type {NestedHeaders}\n     */\n    _defineProperty(this, \"nestedHeadersPlugin\", null);\n    /**\n     * The NestedHeaders plugin StateManager instance.\n     *\n     * @private\n     * @type {StateManager}\n     */\n    _defineProperty(this, \"headerStateManager\", null);\n    /**\n     * Map of collapsed columns by the plugin.\n     *\n     * @private\n     * @type {HidingMap|null}\n     */\n    _classPrivateFieldInitSpec(this, _collapsedColumnsMap, null);\n  }\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  static get PLUGIN_DEPS() {\n    return ['plugin:NestedHeaders'];\n  }\n  static get SETTING_KEYS() {\n    return [PLUGIN_KEY, ...SETTING_KEYS];\n  }\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link CollapsibleColumns#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return !!this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    var _this = this;\n    if (this.enabled) {\n      return;\n    }\n    const {\n      nestedHeaders\n    } = this.hot.getSettings();\n    if (!nestedHeaders) {\n      warn('You need to configure the Nested Headers plugin in order to use collapsible headers.');\n    }\n    _classPrivateFieldSet(_collapsedColumnsMap, this, this.hot.columnIndexMapper.createAndRegisterIndexMap(this.pluginName, 'hiding'));\n    this.nestedHeadersPlugin = this.hot.getPlugin('nestedHeaders');\n    this.headerStateManager = this.nestedHeadersPlugin.getStateManager();\n    this.addHook('init', () => _assertClassBrand(_CollapsibleColumns_brand, this, _onInit).call(this));\n    this.addHook('afterLoadData', function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return _assertClassBrand(_CollapsibleColumns_brand, _this, _onAfterLoadData).call(_this, ...args);\n    });\n    this.addHook('afterGetColHeader', function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      return _assertClassBrand(_CollapsibleColumns_brand, _this, _onAfterGetColHeader).call(_this, ...args);\n    });\n    this.addHook('beforeOnCellMouseDown', (event, coords, TD) => _assertClassBrand(_CollapsibleColumns_brand, this, _onBeforeOnCellMouseDown).call(this, event, coords, TD));\n    this.registerShortcuts();\n    super.enablePlugin();\n    // @TODO: Workaround for broken plugin initialization abstraction (#6806).\n    this.updatePlugin();\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:\n   *   - [`collapsibleColumns`](@/api/options.md#collapsiblecolumns)\n   *   - [`nestedHeaders`](@/api/options.md#nestedheaders)\n   */\n  updatePlugin() {\n    // @TODO: Workaround for broken plugin initialization abstraction (#6806).\n    if (!this.hot.view) {\n      return;\n    }\n    if (!this.nestedHeadersPlugin.detectedOverlappedHeaders) {\n      const {\n        collapsibleColumns\n      } = this.hot.getSettings();\n      if (typeof collapsibleColumns === 'boolean') {\n        // Add `collapsible: true` attribute to all headers with colspan higher than 1.\n        this.headerStateManager.mapState(headerSettings => {\n          return {\n            collapsible: headerSettings.origColspan > 1\n          };\n        });\n      } else if (Array.isArray(collapsibleColumns)) {\n        this.headerStateManager.mapState(() => {\n          return {\n            collapsible: false\n          };\n        });\n        this.headerStateManager.mergeStateWith(collapsibleColumns);\n      }\n    }\n    super.updatePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    this.hot.columnIndexMapper.unregisterMap(this.pluginName);\n    _classPrivateFieldSet(_collapsedColumnsMap, this, null);\n    this.nestedHeadersPlugin = null;\n    this.unregisterShortcuts();\n    this.clearButtons();\n    super.disablePlugin();\n  }\n\n  /**\n   * Register shortcuts responsible for toggling collapsible columns.\n   *\n   * @private\n   */\n  registerShortcuts() {\n    this.hot.getShortcutManager().getContext('grid').addShortcut({\n      keys: [['Enter']],\n      callback: () => {\n        var _this$headerStateMana;\n        const {\n          row,\n          col\n        } = this.hot.getSelectedRangeLast().highlight;\n        const {\n          collapsible,\n          isCollapsed,\n          columnIndex\n        } = (_this$headerStateMana = this.headerStateManager.getHeaderTreeNodeData(row, col)) !== null && _this$headerStateMana !== void 0 ? _this$headerStateMana : {};\n        if (!collapsible) {\n          return;\n        }\n        if (isCollapsed) {\n          this.expandSection({\n            row,\n            col: columnIndex\n          });\n        } else {\n          this.collapseSection({\n            row,\n            col: columnIndex\n          });\n        }\n\n        // prevent default Enter behavior (move to the next row within a selection range)\n        return false;\n      },\n      runOnlyIf: () => {\n        var _this$hot$getSelected, _this$hot$getSelected2;\n        return ((_this$hot$getSelected = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected === void 0 ? void 0 : _this$hot$getSelected.isSingle()) && ((_this$hot$getSelected2 = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected2 === void 0 ? void 0 : _this$hot$getSelected2.highlight.isHeader());\n      },\n      group: SHORTCUTS_GROUP,\n      relativeToGroup: SHORTCUTS_GROUP_EDITOR,\n      position: 'before'\n    });\n  }\n\n  /**\n   * Unregister shortcuts responsible for toggling collapsible columns.\n   *\n   * @private\n   */\n  unregisterShortcuts() {\n    this.hot.getShortcutManager().getContext('grid').removeShortcutsByGroup(SHORTCUTS_GROUP);\n  }\n\n  /**\n   * Clears the expand/collapse buttons.\n   *\n   * @private\n   */\n  clearButtons() {\n    if (!this.hot.view) {\n      return;\n    }\n    const headerLevels = this.hot.view._wt.getSetting('columnHeaders').length;\n    const mainHeaders = this.hot.view._wt.wtTable.THEAD;\n    const topHeaders = this.hot.view._wt.wtOverlays.topOverlay.clone.wtTable.THEAD;\n    const topLeftCornerHeaders = this.hot.view._wt.wtOverlays.topInlineStartCornerOverlay ? this.hot.view._wt.wtOverlays.topInlineStartCornerOverlay.clone.wtTable.THEAD : null;\n    const removeButton = function (button) {\n      if (button) {\n        button.parentNode.removeChild(button);\n      }\n    };\n    rangeEach(0, headerLevels - 1, i => {\n      const masterLevel = mainHeaders.childNodes[i];\n      const topLevel = topHeaders.childNodes[i];\n      const topLeftCornerLevel = topLeftCornerHeaders ? topLeftCornerHeaders.childNodes[i] : null;\n      rangeEach(0, masterLevel.childNodes.length - 1, j => {\n        let button = masterLevel.childNodes[j].querySelector(`.${COLLAPSIBLE_ELEMENT_CLASS}`);\n        removeButton(button);\n        if (topLevel && topLevel.childNodes[j]) {\n          button = topLevel.childNodes[j].querySelector(`.${COLLAPSIBLE_ELEMENT_CLASS}`);\n          removeButton(button);\n        }\n        if (topLeftCornerHeaders && topLeftCornerLevel && topLeftCornerLevel.childNodes[j]) {\n          button = topLeftCornerLevel.childNodes[j].querySelector(`.${COLLAPSIBLE_ELEMENT_CLASS}`);\n          removeButton(button);\n        }\n      });\n    }, true);\n  }\n\n  /**\n   * Expands section at the provided coords.\n   *\n   * @param {object} coords Contains coordinates information. (`coords.row`, `coords.col`).\n   */\n  expandSection(coords) {\n    this.toggleCollapsibleSection([coords], 'expand');\n  }\n\n  /**\n   * Collapses section at the provided coords.\n   *\n   * @param {object} coords Contains coordinates information. (`coords.row`, `coords.col`).\n   */\n  collapseSection(coords) {\n    this.toggleCollapsibleSection([coords], 'collapse');\n  }\n\n  /**\n   * Collapses or expand all collapsible sections, depending on the action parameter.\n   *\n   * @param {string} action 'collapse' or 'expand'.\n   */\n  toggleAllCollapsibleSections(action) {\n    const coords = this.headerStateManager.mapNodes(headerSettings => {\n      const {\n        collapsible,\n        origColspan,\n        headerLevel,\n        columnIndex,\n        isCollapsed\n      } = headerSettings;\n      if (collapsible === true && origColspan > 1 && (isCollapsed && action === 'expand' || !isCollapsed && action === 'collapse')) {\n        return {\n          row: this.headerStateManager.levelToRowCoords(headerLevel),\n          col: columnIndex\n        };\n      }\n    });\n    this.toggleCollapsibleSection(coords, action);\n  }\n\n  /**\n   * Collapses all collapsible sections.\n   */\n  collapseAll() {\n    this.toggleAllCollapsibleSections('collapse');\n  }\n\n  /**\n   * Expands all collapsible sections.\n   */\n  expandAll() {\n    this.toggleAllCollapsibleSections('expand');\n  }\n\n  /**\n   * Collapses/Expands a section.\n   *\n   * @param {Array} coords Array of coords - section coordinates.\n   * @param {string} [action] Action definition ('collapse' or 'expand').\n   * @fires Hooks#beforeColumnCollapse\n   * @fires Hooks#beforeColumnExpand\n   * @fires Hooks#afterColumnCollapse\n   * @fires Hooks#afterColumnExpand\n   */\n  toggleCollapsibleSection(coords, action) {\n    if (!actionDictionary.has(action)) {\n      throw new Error(`Unsupported action is passed (${action}).`);\n    }\n    if (!Array.isArray(coords)) {\n      return;\n    }\n\n    // Ignore coordinates which points to the cells range.\n    const filteredCoords = arrayFilter(coords, _ref => {\n      let {\n        row\n      } = _ref;\n      return row < 0;\n    });\n    let isActionPossible = filteredCoords.length > 0;\n    arrayEach(filteredCoords, _ref2 => {\n      var _this$headerStateMana2;\n      let {\n        row,\n        col: column\n      } = _ref2;\n      const {\n        collapsible,\n        isCollapsed\n      } = (_this$headerStateMana2 = this.headerStateManager.getHeaderSettings(row, column)) !== null && _this$headerStateMana2 !== void 0 ? _this$headerStateMana2 : {};\n      if (!collapsible || isCollapsed && action === 'collapse' || !isCollapsed && action === 'expand') {\n        isActionPossible = false;\n        return false;\n      }\n    });\n    const nodeModRollbacks = [];\n    const affectedColumnsIndexes = [];\n    if (isActionPossible) {\n      arrayEach(filteredCoords, _ref3 => {\n        let {\n          row,\n          col: column\n        } = _ref3;\n        const {\n          colspanCompensation,\n          affectedColumns,\n          rollbackModification\n        } = this.headerStateManager.triggerNodeModification(action, row, column);\n        if (colspanCompensation > 0) {\n          affectedColumnsIndexes.push(...affectedColumns);\n          nodeModRollbacks.push(rollbackModification);\n        }\n      });\n    }\n    const currentCollapsedColumns = this.getCollapsedColumns();\n    let destinationCollapsedColumns = [];\n    if (action === 'collapse') {\n      destinationCollapsedColumns = arrayUnique([...currentCollapsedColumns, ...affectedColumnsIndexes]);\n    } else if (action === 'expand') {\n      destinationCollapsedColumns = arrayFilter(currentCollapsedColumns, index => !affectedColumnsIndexes.includes(index));\n    }\n    const actionTranslator = actionDictionary.get(action);\n    const isActionAllowed = this.hot.runHooks(actionTranslator.beforeHook, currentCollapsedColumns, destinationCollapsedColumns, isActionPossible);\n    if (isActionAllowed === false) {\n      // Rollback all header nodes modification (collapse or expand).\n      arrayEach(nodeModRollbacks, nodeModRollback => {\n        nodeModRollback();\n      });\n      return;\n    }\n    this.hot.batchExecution(() => {\n      arrayEach(affectedColumnsIndexes, visualColumn => {\n        _classPrivateFieldGet(_collapsedColumnsMap, this).setValueAtIndex(this.hot.toPhysicalColumn(visualColumn), actionTranslator.hideColumn);\n      });\n    }, true);\n    const isActionPerformed = this.getCollapsedColumns().length !== currentCollapsedColumns.length;\n    const selectionRange = this.hot.getSelectedRangeLast();\n    if (action === 'collapse' && isActionPerformed && selectionRange) {\n      const {\n        row,\n        col\n      } = selectionRange.highlight;\n      const isHidden = this.hot.rowIndexMapper.isHidden(row) || this.hot.columnIndexMapper.isHidden(col);\n      if (isHidden && affectedColumnsIndexes.includes(col)) {\n        const nextRow = row >= 0 ? this.hot.rowIndexMapper.getNearestNotHiddenIndex(row, 1, true) : row;\n        const nextColumn = col >= 0 ? this.hot.columnIndexMapper.getNearestNotHiddenIndex(col, 1, true) : col;\n        if (nextRow !== null && nextColumn !== null) {\n          this.hot.selectCell(nextRow, nextColumn);\n        }\n      }\n    }\n    this.hot.runHooks(actionTranslator.afterHook, currentCollapsedColumns, destinationCollapsedColumns, isActionPossible, isActionPerformed);\n    this.hot.render();\n    this.hot.view.adjustElementsSize();\n  }\n\n  /**\n   * Gets an array of physical indexes of collapsed columns.\n   *\n   * @private\n   * @returns {number[]}\n   */\n  getCollapsedColumns() {\n    return _classPrivateFieldGet(_collapsedColumnsMap, this).getHiddenIndexes();\n  }\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    _classPrivateFieldSet(_collapsedColumnsMap, this, null);\n    super.destroy();\n  }\n}\nfunction _onAfterGetColHeader(column, TH, headerLevel) {\n  var _this$headerStateMana3;\n  const {\n    collapsible,\n    origColspan,\n    isCollapsed\n  } = (_this$headerStateMana3 = this.headerStateManager.getHeaderSettings(headerLevel, column)) !== null && _this$headerStateMana3 !== void 0 ? _this$headerStateMana3 : {};\n  const isNodeCollapsible = collapsible && origColspan > 1 && column >= this.hot.getSettings().fixedColumnsStart;\n  const isAriaTagsEnabled = this.hot.getSettings().ariaTags;\n  let collapsibleElement = TH.querySelector(`.${COLLAPSIBLE_ELEMENT_CLASS}`);\n  removeAttribute(TH, [A11Y_EXPANDED('')[0]]);\n  if (isNodeCollapsible) {\n    if (!collapsibleElement) {\n      collapsibleElement = this.hot.rootDocument.createElement('div');\n      addClass(collapsibleElement, COLLAPSIBLE_ELEMENT_CLASS);\n      TH.querySelector('div:first-child').appendChild(collapsibleElement);\n    }\n    removeClass(collapsibleElement, ['collapsed', 'expanded']);\n    if (isCollapsed) {\n      addClass(collapsibleElement, 'collapsed');\n      fastInnerText(collapsibleElement, '+');\n\n      // Add ARIA tags\n      if (isAriaTagsEnabled) {\n        setAttribute(TH, ...A11Y_EXPANDED(false));\n      }\n    } else {\n      addClass(collapsibleElement, 'expanded');\n      fastInnerText(collapsibleElement, '-');\n\n      // Add ARIA tags\n      if (isAriaTagsEnabled) {\n        setAttribute(TH, ...A11Y_EXPANDED(true));\n      }\n    }\n    if (isAriaTagsEnabled) {\n      setAttribute(collapsibleElement, ...A11Y_HIDDEN());\n    }\n  } else {\n    var _collapsibleElement;\n    (_collapsibleElement = collapsibleElement) === null || _collapsibleElement === void 0 || _collapsibleElement.remove();\n  }\n}\n/**\n * Indicator mouse event callback.\n *\n * @param {object} event Mouse event.\n * @param {object} coords Event coordinates.\n */\nfunction _onBeforeOnCellMouseDown(event, coords) {\n  if (hasClass(event.target, COLLAPSIBLE_ELEMENT_CLASS)) {\n    if (hasClass(event.target, 'expanded')) {\n      this.eventManager.fireEvent(event.target, 'mouseup');\n      this.toggleCollapsibleSection([coords], 'collapse');\n    } else if (hasClass(event.target, 'collapsed')) {\n      this.eventManager.fireEvent(event.target, 'mouseup');\n      this.toggleCollapsibleSection([coords], 'expand');\n    }\n    stopImmediatePropagation(event);\n  }\n}\n/**\n * Updates the plugin state after HoT initialization.\n */\nfunction _onInit() {\n  // @TODO: Workaround for broken plugin initialization abstraction (#6806).\n  this.updatePlugin();\n}\n/**\n * Updates the plugin state after new dataset load.\n *\n * @param {Array[]} sourceData Array of arrays or array of objects containing data.\n * @param {boolean} initialLoad Flag that determines whether the data has been loaded\n *                              during the initialization.\n */\nfunction _onAfterLoadData(sourceData, initialLoad) {\n  if (!initialLoad) {\n    this.updatePlugin();\n  }\n}","map":{"version":3,"names":["_classPrivateMethodInitSpec","e","a","_checkPrivateRedeclaration","add","_classPrivateFieldInitSpec","t","set","has","TypeError","_defineProperty","r","_toPropertyKey","Object","defineProperty","value","enumerable","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","String","Number","_classPrivateFieldGet","s","get","_assertClassBrand","_classPrivateFieldSet","n","arguments","length","BasePlugin","arrayEach","arrayFilter","arrayUnique","rangeEach","warn","addClass","hasClass","removeClass","fastInnerText","removeAttribute","setAttribute","stopImmediatePropagation","EDITOR_EDIT_GROUP","SHORTCUTS_GROUP_EDITOR","A11Y_EXPANDED","A11Y_HIDDEN","PLUGIN_KEY","PLUGIN_PRIORITY","SETTING_KEYS","COLLAPSIBLE_ELEMENT_CLASS","SHORTCUTS_GROUP","actionDictionary","Map","hideColumn","beforeHook","afterHook","_collapsedColumnsMap","WeakMap","_CollapsibleColumns_brand","WeakSet","CollapsibleColumns","constructor","PLUGIN_DEPS","isEnabled","hot","getSettings","enablePlugin","_this","enabled","nestedHeaders","columnIndexMapper","createAndRegisterIndexMap","pluginName","nestedHeadersPlugin","getPlugin","headerStateManager","getStateManager","addHook","_onInit","_len","args","Array","_key","_onAfterLoadData","_len2","_key2","_onAfterGetColHeader","event","coords","TD","_onBeforeOnCellMouseDown","registerShortcuts","updatePlugin","view","detectedOverlappedHeaders","collapsibleColumns","mapState","headerSettings","collapsible","origColspan","isArray","mergeStateWith","disablePlugin","unregisterMap","unregisterShortcuts","clearButtons","getShortcutManager","getContext","addShortcut","keys","callback","_this$headerStateMana","row","col","getSelectedRangeLast","highlight","isCollapsed","columnIndex","getHeaderTreeNodeData","expandSection","collapseSection","runOnlyIf","_this$hot$getSelected","_this$hot$getSelected2","isSingle","isHeader","group","relativeToGroup","position","removeShortcutsByGroup","headerLevels","_wt","getSetting","mainHeaders","wtTable","THEAD","topHeaders","wtOverlays","topOverlay","clone","topLeftCornerHeaders","topInlineStartCornerOverlay","removeButton","button","parentNode","removeChild","masterLevel","childNodes","topLevel","topLeftCornerLevel","j","querySelector","toggleCollapsibleSection","toggleAllCollapsibleSections","action","mapNodes","headerLevel","levelToRowCoords","collapseAll","expandAll","Error","filteredCoords","_ref","isActionPossible","_ref2","_this$headerStateMana2","column","getHeaderSettings","nodeModRollbacks","affectedColumnsIndexes","_ref3","colspanCompensation","affectedColumns","rollbackModification","triggerNodeModification","push","currentCollapsedColumns","getCollapsedColumns","destinationCollapsedColumns","index","includes","actionTranslator","isActionAllowed","runHooks","nodeModRollback","batchExecution","visualColumn","setValueAtIndex","toPhysicalColumn","isActionPerformed","selectionRange","isHidden","rowIndexMapper","nextRow","getNearestNotHiddenIndex","nextColumn","selectCell","render","adjustElementsSize","getHiddenIndexes","destroy","TH","_this$headerStateMana3","isNodeCollapsible","fixedColumnsStart","isAriaTagsEnabled","ariaTags","collapsibleElement","rootDocument","createElement","appendChild","_collapsibleElement","remove","target","eventManager","fireEvent","sourceData","initialLoad"],"sources":["D:/gym-project/frontend/node_modules/handsontable/plugins/collapsibleColumns/collapsibleColumns.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nfunction _classPrivateMethodInitSpec(e, a) { _checkPrivateRedeclaration(e, a), a.add(e); }\nfunction _classPrivateFieldInitSpec(e, t, a) { _checkPrivateRedeclaration(e, t), t.set(e, a); }\nfunction _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }\nfunction _classPrivateFieldSet(s, a, r) { return s.set(_assertClassBrand(s, a), r), r; }\nfunction _assertClassBrand(e, t, n) { if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError(\"Private element is not present on this object\"); }\nimport { BasePlugin } from \"../base/index.mjs\";\nimport { arrayEach, arrayFilter, arrayUnique } from \"../../helpers/array.mjs\";\nimport { rangeEach } from \"../../helpers/number.mjs\";\nimport { warn } from \"../../helpers/console.mjs\";\nimport { addClass, hasClass, removeClass, fastInnerText, removeAttribute, setAttribute } from \"../../helpers/dom/element.mjs\";\nimport { stopImmediatePropagation } from \"../../helpers/dom/event.mjs\";\nimport { EDITOR_EDIT_GROUP as SHORTCUTS_GROUP_EDITOR } from \"../../shortcutContexts/index.mjs\";\nimport { A11Y_EXPANDED, A11Y_HIDDEN } from \"../../helpers/a11y.mjs\";\nexport const PLUGIN_KEY = 'collapsibleColumns';\nexport const PLUGIN_PRIORITY = 290;\nconst SETTING_KEYS = ['nestedHeaders'];\nconst COLLAPSIBLE_ELEMENT_CLASS = 'collapsibleIndicator';\nconst SHORTCUTS_GROUP = PLUGIN_KEY;\nconst actionDictionary = new Map([['collapse', {\n  hideColumn: true,\n  beforeHook: 'beforeColumnCollapse',\n  afterHook: 'afterColumnCollapse'\n}], ['expand', {\n  hideColumn: false,\n  beforeHook: 'beforeColumnExpand',\n  afterHook: 'afterColumnExpand'\n}]]);\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @plugin CollapsibleColumns\n * @class CollapsibleColumns\n *\n * @description\n * The _CollapsibleColumns_ plugin allows collapsing of columns, covered by a header with the `colspan` property defined.\n *\n * Clicking the \"collapse/expand\" button collapses (or expands) all \"child\" headers except the first one.\n *\n * Setting the {@link Options#collapsiblecolumns} property to `true` will display a \"collapse/expand\" button in every header\n * with a defined `colspan` property.\n *\n * To limit this functionality to a smaller group of headers, define the `collapsibleColumns` property as an array\n * of objects, as in the example below.\n *\n * @example\n * ::: only-for javascript\n * ```js\n * const container = document.getElementById('example');\n * const hot = new Handsontable(container, {\n *   data: generateDataObj(),\n *   colHeaders: true,\n *   rowHeaders: true,\n *   nestedHeaders: true,\n *   // enable plugin\n *   collapsibleColumns: true,\n * });\n *\n * // or\n * const hot = new Handsontable(container, {\n *   data: generateDataObj(),\n *   colHeaders: true,\n *   rowHeaders: true,\n *   nestedHeaders: true,\n *   // enable and configure which columns can be collapsed\n *   collapsibleColumns: [\n *     {row: -4, col: 1, collapsible: true},\n *     {row: -3, col: 5, collapsible: true}\n *   ],\n * });\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * <HotTable\n *   data={generateDataObj()}\n *   colHeaders={true}\n *   rowHeaders={true}\n *   nestedHeaders={true}\n *   // enable plugin\n *   collapsibleColumns={true}\n * />\n *\n * // or\n * <HotTable\n *   data={generateDataObj()}\n *   colHeaders={true}\n *   rowHeaders={true}\n *   nestedHeaders={true}\n *   // enable and configure which columns can be collapsed\n *   collapsibleColumns={[\n *     {row: -4, col: 1, collapsible: true},\n *     {row: -3, col: 5, collapsible: true}\n *   ]}\n * />\n * ```\n * :::\n */\nvar _collapsedColumnsMap = /*#__PURE__*/new WeakMap();\nvar _CollapsibleColumns_brand = /*#__PURE__*/new WeakSet();\nexport class CollapsibleColumns extends BasePlugin {\n  constructor() {\n    super(...arguments);\n    /**\n     * Adds the indicator to the headers.\n     *\n     * @param {number} column Column index.\n     * @param {HTMLElement} TH TH element.\n     * @param {number} headerLevel The index of header level counting from the top (positive\n     *                             values counting from 0 to N).\n     */\n    _classPrivateMethodInitSpec(this, _CollapsibleColumns_brand);\n    /**\n     * Cached reference to the NestedHeaders plugin.\n     *\n     * @private\n     * @type {NestedHeaders}\n     */\n    _defineProperty(this, \"nestedHeadersPlugin\", null);\n    /**\n     * The NestedHeaders plugin StateManager instance.\n     *\n     * @private\n     * @type {StateManager}\n     */\n    _defineProperty(this, \"headerStateManager\", null);\n    /**\n     * Map of collapsed columns by the plugin.\n     *\n     * @private\n     * @type {HidingMap|null}\n     */\n    _classPrivateFieldInitSpec(this, _collapsedColumnsMap, null);\n  }\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  static get PLUGIN_DEPS() {\n    return ['plugin:NestedHeaders'];\n  }\n  static get SETTING_KEYS() {\n    return [PLUGIN_KEY, ...SETTING_KEYS];\n  }\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link CollapsibleColumns#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return !!this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    var _this = this;\n    if (this.enabled) {\n      return;\n    }\n    const {\n      nestedHeaders\n    } = this.hot.getSettings();\n    if (!nestedHeaders) {\n      warn('You need to configure the Nested Headers plugin in order to use collapsible headers.');\n    }\n    _classPrivateFieldSet(_collapsedColumnsMap, this, this.hot.columnIndexMapper.createAndRegisterIndexMap(this.pluginName, 'hiding'));\n    this.nestedHeadersPlugin = this.hot.getPlugin('nestedHeaders');\n    this.headerStateManager = this.nestedHeadersPlugin.getStateManager();\n    this.addHook('init', () => _assertClassBrand(_CollapsibleColumns_brand, this, _onInit).call(this));\n    this.addHook('afterLoadData', function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return _assertClassBrand(_CollapsibleColumns_brand, _this, _onAfterLoadData).call(_this, ...args);\n    });\n    this.addHook('afterGetColHeader', function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      return _assertClassBrand(_CollapsibleColumns_brand, _this, _onAfterGetColHeader).call(_this, ...args);\n    });\n    this.addHook('beforeOnCellMouseDown', (event, coords, TD) => _assertClassBrand(_CollapsibleColumns_brand, this, _onBeforeOnCellMouseDown).call(this, event, coords, TD));\n    this.registerShortcuts();\n    super.enablePlugin();\n    // @TODO: Workaround for broken plugin initialization abstraction (#6806).\n    this.updatePlugin();\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:\n   *   - [`collapsibleColumns`](@/api/options.md#collapsiblecolumns)\n   *   - [`nestedHeaders`](@/api/options.md#nestedheaders)\n   */\n  updatePlugin() {\n    // @TODO: Workaround for broken plugin initialization abstraction (#6806).\n    if (!this.hot.view) {\n      return;\n    }\n    if (!this.nestedHeadersPlugin.detectedOverlappedHeaders) {\n      const {\n        collapsibleColumns\n      } = this.hot.getSettings();\n      if (typeof collapsibleColumns === 'boolean') {\n        // Add `collapsible: true` attribute to all headers with colspan higher than 1.\n        this.headerStateManager.mapState(headerSettings => {\n          return {\n            collapsible: headerSettings.origColspan > 1\n          };\n        });\n      } else if (Array.isArray(collapsibleColumns)) {\n        this.headerStateManager.mapState(() => {\n          return {\n            collapsible: false\n          };\n        });\n        this.headerStateManager.mergeStateWith(collapsibleColumns);\n      }\n    }\n    super.updatePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    this.hot.columnIndexMapper.unregisterMap(this.pluginName);\n    _classPrivateFieldSet(_collapsedColumnsMap, this, null);\n    this.nestedHeadersPlugin = null;\n    this.unregisterShortcuts();\n    this.clearButtons();\n    super.disablePlugin();\n  }\n\n  /**\n   * Register shortcuts responsible for toggling collapsible columns.\n   *\n   * @private\n   */\n  registerShortcuts() {\n    this.hot.getShortcutManager().getContext('grid').addShortcut({\n      keys: [['Enter']],\n      callback: () => {\n        var _this$headerStateMana;\n        const {\n          row,\n          col\n        } = this.hot.getSelectedRangeLast().highlight;\n        const {\n          collapsible,\n          isCollapsed,\n          columnIndex\n        } = (_this$headerStateMana = this.headerStateManager.getHeaderTreeNodeData(row, col)) !== null && _this$headerStateMana !== void 0 ? _this$headerStateMana : {};\n        if (!collapsible) {\n          return;\n        }\n        if (isCollapsed) {\n          this.expandSection({\n            row,\n            col: columnIndex\n          });\n        } else {\n          this.collapseSection({\n            row,\n            col: columnIndex\n          });\n        }\n\n        // prevent default Enter behavior (move to the next row within a selection range)\n        return false;\n      },\n      runOnlyIf: () => {\n        var _this$hot$getSelected, _this$hot$getSelected2;\n        return ((_this$hot$getSelected = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected === void 0 ? void 0 : _this$hot$getSelected.isSingle()) && ((_this$hot$getSelected2 = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected2 === void 0 ? void 0 : _this$hot$getSelected2.highlight.isHeader());\n      },\n      group: SHORTCUTS_GROUP,\n      relativeToGroup: SHORTCUTS_GROUP_EDITOR,\n      position: 'before'\n    });\n  }\n\n  /**\n   * Unregister shortcuts responsible for toggling collapsible columns.\n   *\n   * @private\n   */\n  unregisterShortcuts() {\n    this.hot.getShortcutManager().getContext('grid').removeShortcutsByGroup(SHORTCUTS_GROUP);\n  }\n\n  /**\n   * Clears the expand/collapse buttons.\n   *\n   * @private\n   */\n  clearButtons() {\n    if (!this.hot.view) {\n      return;\n    }\n    const headerLevels = this.hot.view._wt.getSetting('columnHeaders').length;\n    const mainHeaders = this.hot.view._wt.wtTable.THEAD;\n    const topHeaders = this.hot.view._wt.wtOverlays.topOverlay.clone.wtTable.THEAD;\n    const topLeftCornerHeaders = this.hot.view._wt.wtOverlays.topInlineStartCornerOverlay ? this.hot.view._wt.wtOverlays.topInlineStartCornerOverlay.clone.wtTable.THEAD : null;\n    const removeButton = function (button) {\n      if (button) {\n        button.parentNode.removeChild(button);\n      }\n    };\n    rangeEach(0, headerLevels - 1, i => {\n      const masterLevel = mainHeaders.childNodes[i];\n      const topLevel = topHeaders.childNodes[i];\n      const topLeftCornerLevel = topLeftCornerHeaders ? topLeftCornerHeaders.childNodes[i] : null;\n      rangeEach(0, masterLevel.childNodes.length - 1, j => {\n        let button = masterLevel.childNodes[j].querySelector(`.${COLLAPSIBLE_ELEMENT_CLASS}`);\n        removeButton(button);\n        if (topLevel && topLevel.childNodes[j]) {\n          button = topLevel.childNodes[j].querySelector(`.${COLLAPSIBLE_ELEMENT_CLASS}`);\n          removeButton(button);\n        }\n        if (topLeftCornerHeaders && topLeftCornerLevel && topLeftCornerLevel.childNodes[j]) {\n          button = topLeftCornerLevel.childNodes[j].querySelector(`.${COLLAPSIBLE_ELEMENT_CLASS}`);\n          removeButton(button);\n        }\n      });\n    }, true);\n  }\n\n  /**\n   * Expands section at the provided coords.\n   *\n   * @param {object} coords Contains coordinates information. (`coords.row`, `coords.col`).\n   */\n  expandSection(coords) {\n    this.toggleCollapsibleSection([coords], 'expand');\n  }\n\n  /**\n   * Collapses section at the provided coords.\n   *\n   * @param {object} coords Contains coordinates information. (`coords.row`, `coords.col`).\n   */\n  collapseSection(coords) {\n    this.toggleCollapsibleSection([coords], 'collapse');\n  }\n\n  /**\n   * Collapses or expand all collapsible sections, depending on the action parameter.\n   *\n   * @param {string} action 'collapse' or 'expand'.\n   */\n  toggleAllCollapsibleSections(action) {\n    const coords = this.headerStateManager.mapNodes(headerSettings => {\n      const {\n        collapsible,\n        origColspan,\n        headerLevel,\n        columnIndex,\n        isCollapsed\n      } = headerSettings;\n      if (collapsible === true && origColspan > 1 && (isCollapsed && action === 'expand' || !isCollapsed && action === 'collapse')) {\n        return {\n          row: this.headerStateManager.levelToRowCoords(headerLevel),\n          col: columnIndex\n        };\n      }\n    });\n    this.toggleCollapsibleSection(coords, action);\n  }\n\n  /**\n   * Collapses all collapsible sections.\n   */\n  collapseAll() {\n    this.toggleAllCollapsibleSections('collapse');\n  }\n\n  /**\n   * Expands all collapsible sections.\n   */\n  expandAll() {\n    this.toggleAllCollapsibleSections('expand');\n  }\n\n  /**\n   * Collapses/Expands a section.\n   *\n   * @param {Array} coords Array of coords - section coordinates.\n   * @param {string} [action] Action definition ('collapse' or 'expand').\n   * @fires Hooks#beforeColumnCollapse\n   * @fires Hooks#beforeColumnExpand\n   * @fires Hooks#afterColumnCollapse\n   * @fires Hooks#afterColumnExpand\n   */\n  toggleCollapsibleSection(coords, action) {\n    if (!actionDictionary.has(action)) {\n      throw new Error(`Unsupported action is passed (${action}).`);\n    }\n    if (!Array.isArray(coords)) {\n      return;\n    }\n\n    // Ignore coordinates which points to the cells range.\n    const filteredCoords = arrayFilter(coords, _ref => {\n      let {\n        row\n      } = _ref;\n      return row < 0;\n    });\n    let isActionPossible = filteredCoords.length > 0;\n    arrayEach(filteredCoords, _ref2 => {\n      var _this$headerStateMana2;\n      let {\n        row,\n        col: column\n      } = _ref2;\n      const {\n        collapsible,\n        isCollapsed\n      } = (_this$headerStateMana2 = this.headerStateManager.getHeaderSettings(row, column)) !== null && _this$headerStateMana2 !== void 0 ? _this$headerStateMana2 : {};\n      if (!collapsible || isCollapsed && action === 'collapse' || !isCollapsed && action === 'expand') {\n        isActionPossible = false;\n        return false;\n      }\n    });\n    const nodeModRollbacks = [];\n    const affectedColumnsIndexes = [];\n    if (isActionPossible) {\n      arrayEach(filteredCoords, _ref3 => {\n        let {\n          row,\n          col: column\n        } = _ref3;\n        const {\n          colspanCompensation,\n          affectedColumns,\n          rollbackModification\n        } = this.headerStateManager.triggerNodeModification(action, row, column);\n        if (colspanCompensation > 0) {\n          affectedColumnsIndexes.push(...affectedColumns);\n          nodeModRollbacks.push(rollbackModification);\n        }\n      });\n    }\n    const currentCollapsedColumns = this.getCollapsedColumns();\n    let destinationCollapsedColumns = [];\n    if (action === 'collapse') {\n      destinationCollapsedColumns = arrayUnique([...currentCollapsedColumns, ...affectedColumnsIndexes]);\n    } else if (action === 'expand') {\n      destinationCollapsedColumns = arrayFilter(currentCollapsedColumns, index => !affectedColumnsIndexes.includes(index));\n    }\n    const actionTranslator = actionDictionary.get(action);\n    const isActionAllowed = this.hot.runHooks(actionTranslator.beforeHook, currentCollapsedColumns, destinationCollapsedColumns, isActionPossible);\n    if (isActionAllowed === false) {\n      // Rollback all header nodes modification (collapse or expand).\n      arrayEach(nodeModRollbacks, nodeModRollback => {\n        nodeModRollback();\n      });\n      return;\n    }\n    this.hot.batchExecution(() => {\n      arrayEach(affectedColumnsIndexes, visualColumn => {\n        _classPrivateFieldGet(_collapsedColumnsMap, this).setValueAtIndex(this.hot.toPhysicalColumn(visualColumn), actionTranslator.hideColumn);\n      });\n    }, true);\n    const isActionPerformed = this.getCollapsedColumns().length !== currentCollapsedColumns.length;\n    const selectionRange = this.hot.getSelectedRangeLast();\n    if (action === 'collapse' && isActionPerformed && selectionRange) {\n      const {\n        row,\n        col\n      } = selectionRange.highlight;\n      const isHidden = this.hot.rowIndexMapper.isHidden(row) || this.hot.columnIndexMapper.isHidden(col);\n      if (isHidden && affectedColumnsIndexes.includes(col)) {\n        const nextRow = row >= 0 ? this.hot.rowIndexMapper.getNearestNotHiddenIndex(row, 1, true) : row;\n        const nextColumn = col >= 0 ? this.hot.columnIndexMapper.getNearestNotHiddenIndex(col, 1, true) : col;\n        if (nextRow !== null && nextColumn !== null) {\n          this.hot.selectCell(nextRow, nextColumn);\n        }\n      }\n    }\n    this.hot.runHooks(actionTranslator.afterHook, currentCollapsedColumns, destinationCollapsedColumns, isActionPossible, isActionPerformed);\n    this.hot.render();\n    this.hot.view.adjustElementsSize();\n  }\n\n  /**\n   * Gets an array of physical indexes of collapsed columns.\n   *\n   * @private\n   * @returns {number[]}\n   */\n  getCollapsedColumns() {\n    return _classPrivateFieldGet(_collapsedColumnsMap, this).getHiddenIndexes();\n  }\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    _classPrivateFieldSet(_collapsedColumnsMap, this, null);\n    super.destroy();\n  }\n}\nfunction _onAfterGetColHeader(column, TH, headerLevel) {\n  var _this$headerStateMana3;\n  const {\n    collapsible,\n    origColspan,\n    isCollapsed\n  } = (_this$headerStateMana3 = this.headerStateManager.getHeaderSettings(headerLevel, column)) !== null && _this$headerStateMana3 !== void 0 ? _this$headerStateMana3 : {};\n  const isNodeCollapsible = collapsible && origColspan > 1 && column >= this.hot.getSettings().fixedColumnsStart;\n  const isAriaTagsEnabled = this.hot.getSettings().ariaTags;\n  let collapsibleElement = TH.querySelector(`.${COLLAPSIBLE_ELEMENT_CLASS}`);\n  removeAttribute(TH, [A11Y_EXPANDED('')[0]]);\n  if (isNodeCollapsible) {\n    if (!collapsibleElement) {\n      collapsibleElement = this.hot.rootDocument.createElement('div');\n      addClass(collapsibleElement, COLLAPSIBLE_ELEMENT_CLASS);\n      TH.querySelector('div:first-child').appendChild(collapsibleElement);\n    }\n    removeClass(collapsibleElement, ['collapsed', 'expanded']);\n    if (isCollapsed) {\n      addClass(collapsibleElement, 'collapsed');\n      fastInnerText(collapsibleElement, '+');\n\n      // Add ARIA tags\n      if (isAriaTagsEnabled) {\n        setAttribute(TH, ...A11Y_EXPANDED(false));\n      }\n    } else {\n      addClass(collapsibleElement, 'expanded');\n      fastInnerText(collapsibleElement, '-');\n\n      // Add ARIA tags\n      if (isAriaTagsEnabled) {\n        setAttribute(TH, ...A11Y_EXPANDED(true));\n      }\n    }\n    if (isAriaTagsEnabled) {\n      setAttribute(collapsibleElement, ...A11Y_HIDDEN());\n    }\n  } else {\n    var _collapsibleElement;\n    (_collapsibleElement = collapsibleElement) === null || _collapsibleElement === void 0 || _collapsibleElement.remove();\n  }\n}\n/**\n * Indicator mouse event callback.\n *\n * @param {object} event Mouse event.\n * @param {object} coords Event coordinates.\n */\nfunction _onBeforeOnCellMouseDown(event, coords) {\n  if (hasClass(event.target, COLLAPSIBLE_ELEMENT_CLASS)) {\n    if (hasClass(event.target, 'expanded')) {\n      this.eventManager.fireEvent(event.target, 'mouseup');\n      this.toggleCollapsibleSection([coords], 'collapse');\n    } else if (hasClass(event.target, 'collapsed')) {\n      this.eventManager.fireEvent(event.target, 'mouseup');\n      this.toggleCollapsibleSection([coords], 'expand');\n    }\n    stopImmediatePropagation(event);\n  }\n}\n/**\n * Updates the plugin state after HoT initialization.\n */\nfunction _onInit() {\n  // @TODO: Workaround for broken plugin initialization abstraction (#6806).\n  this.updatePlugin();\n}\n/**\n * Updates the plugin state after new dataset load.\n *\n * @param {Array[]} sourceData Array of arrays or array of objects containing data.\n * @param {boolean} initialLoad Flag that determines whether the data has been loaded\n *                              during the initialization.\n */\nfunction _onAfterLoadData(sourceData, initialLoad) {\n  if (!initialLoad) {\n    this.updatePlugin();\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}