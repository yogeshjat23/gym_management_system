{"ast":null,"code":"/**\n * Traverses the tree nodes and calls a callback when no hidden node is found. The callback\n * is called with visual column index then.\n *\n * @param {TreeNode} node A tree node to traverse.\n * @param {Function} callback The callback function which will be called for each node.\n */\nexport function traverseHiddenNodeColumnIndexes(node, callback) {\n  node.walkDown(_ref => {\n    let {\n      data,\n      childs\n    } = _ref;\n    if (!data.isHidden) {\n      callback(data.columnIndex);\n      if (childs.length === 0) {\n        for (let i = 1; i < data.colspan; i++) {\n          callback(data.columnIndex + i);\n        }\n      }\n    }\n  });\n}\n\n/**\n * A tree helper for retrieving a data from the first child.\n *\n * @param {TreeNode} node A tree node to check.\n * @param {string} propertyName A name of the property whose value you want to get.\n * @returns {*}\n */\nexport function getFirstChildProperty(_ref2, propertyName) {\n  let {\n    childs\n  } = _ref2;\n  if (childs.length === 0) {\n    return;\n  }\n  return childs[0].data[propertyName];\n}\n\n/**\n * A tree helper which checks if passed node has the same original colspan as its\n * first child. In that case the node is treated as \"mirrored\" or \"reflected\" every\n * action performed on one of that nodes should be reflected to other \"mirrored\" node.\n *\n * In that case nodes A1 and A2 are \"reflected\"\n *   +----+----+----+----+\n *   | A1      | B1      |\n *   +----+----+----+----+\n *   | A2      | B2 | B3 |\n *   +----+----+----+----+.\n *\n * @param {TreeNode} node A tree node to check.\n * @returns {boolean}\n */\nexport function isNodeReflectsFirstChildColspan(node) {\n  return getFirstChildProperty(node, 'origColspan') === node.data.origColspan;\n}","map":{"version":3,"names":["traverseHiddenNodeColumnIndexes","node","callback","walkDown","_ref","data","childs","isHidden","columnIndex","length","i","colspan","getFirstChildProperty","_ref2","propertyName","isNodeReflectsFirstChildColspan","origColspan"],"sources":["D:/gym-project/frontend/node_modules/handsontable/plugins/nestedHeaders/stateManager/nodeModifiers/utils/tree.mjs"],"sourcesContent":["/**\n * Traverses the tree nodes and calls a callback when no hidden node is found. The callback\n * is called with visual column index then.\n *\n * @param {TreeNode} node A tree node to traverse.\n * @param {Function} callback The callback function which will be called for each node.\n */\nexport function traverseHiddenNodeColumnIndexes(node, callback) {\n  node.walkDown(_ref => {\n    let {\n      data,\n      childs\n    } = _ref;\n    if (!data.isHidden) {\n      callback(data.columnIndex);\n      if (childs.length === 0) {\n        for (let i = 1; i < data.colspan; i++) {\n          callback(data.columnIndex + i);\n        }\n      }\n    }\n  });\n}\n\n/**\n * A tree helper for retrieving a data from the first child.\n *\n * @param {TreeNode} node A tree node to check.\n * @param {string} propertyName A name of the property whose value you want to get.\n * @returns {*}\n */\nexport function getFirstChildProperty(_ref2, propertyName) {\n  let {\n    childs\n  } = _ref2;\n  if (childs.length === 0) {\n    return;\n  }\n  return childs[0].data[propertyName];\n}\n\n/**\n * A tree helper which checks if passed node has the same original colspan as its\n * first child. In that case the node is treated as \"mirrored\" or \"reflected\" every\n * action performed on one of that nodes should be reflected to other \"mirrored\" node.\n *\n * In that case nodes A1 and A2 are \"reflected\"\n *   +----+----+----+----+\n *   | A1      | B1      |\n *   +----+----+----+----+\n *   | A2      | B2 | B3 |\n *   +----+----+----+----+.\n *\n * @param {TreeNode} node A tree node to check.\n * @returns {boolean}\n */\nexport function isNodeReflectsFirstChildColspan(node) {\n  return getFirstChildProperty(node, 'origColspan') === node.data.origColspan;\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,+BAA+BA,CAACC,IAAI,EAAEC,QAAQ,EAAE;EAC9DD,IAAI,CAACE,QAAQ,CAACC,IAAI,IAAI;IACpB,IAAI;MACFC,IAAI;MACJC;IACF,CAAC,GAAGF,IAAI;IACR,IAAI,CAACC,IAAI,CAACE,QAAQ,EAAE;MAClBL,QAAQ,CAACG,IAAI,CAACG,WAAW,CAAC;MAC1B,IAAIF,MAAM,CAACG,MAAM,KAAK,CAAC,EAAE;QACvB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,IAAI,CAACM,OAAO,EAAED,CAAC,EAAE,EAAE;UACrCR,QAAQ,CAACG,IAAI,CAACG,WAAW,GAAGE,CAAC,CAAC;QAChC;MACF;IACF;EACF,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,qBAAqBA,CAACC,KAAK,EAAEC,YAAY,EAAE;EACzD,IAAI;IACFR;EACF,CAAC,GAAGO,KAAK;EACT,IAAIP,MAAM,CAACG,MAAM,KAAK,CAAC,EAAE;IACvB;EACF;EACA,OAAOH,MAAM,CAAC,CAAC,CAAC,CAACD,IAAI,CAACS,YAAY,CAAC;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,+BAA+BA,CAACd,IAAI,EAAE;EACpD,OAAOW,qBAAqB,CAACX,IAAI,EAAE,aAAa,CAAC,KAAKA,IAAI,CAACI,IAAI,CAACW,WAAW;AAC7E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}