{"ast":null,"code":"import { toSingleLine } from \"../../../../helpers/templateLiteralTag.mjs\";\n/**\n * @param {TreeNode} nodeToProcess A tree node to process.\n * @param {number} gridColumnIndex The visual column index that triggers the node modification.\n *                                 The index can be between the root node column index and\n *                                 column index plus node colspan length.\n */\nexport function hideColumn(nodeToProcess, gridColumnIndex) {\n  if (!Number.isInteger(gridColumnIndex)) {\n    throw new Error('The passed gridColumnIndex argument has invalid type.');\n  }\n  if (nodeToProcess.childs.length > 0) {\n    throw new Error(toSingleLine`The passed node is not the last node on the tree. Only for\\x20\nthe last node, the hide column modification can be applied.`);\n  }\n  const {\n    crossHiddenColumns\n  } = nodeToProcess.data;\n  if (crossHiddenColumns.includes(gridColumnIndex)) {\n    return;\n  }\n  let isCollapsibleNode = false;\n  nodeToProcess.walkUp(node => {\n    const {\n      data: {\n        collapsible\n      }\n    } = node;\n    if (collapsible) {\n      isCollapsibleNode = true;\n      return false; // Cancel tree traversing\n    }\n  });\n\n  // TODO: When the node is collapsible do not hide the column. Currently collapsible headers\n  // does not work with hidden columns (hidden index map types).\n  if (isCollapsibleNode) {\n    return;\n  }\n  nodeToProcess.walkUp(node => {\n    const {\n      data\n    } = node;\n    data.crossHiddenColumns.push(gridColumnIndex);\n    if (data.colspan > 1) {\n      data.colspan -= 1;\n    } else {\n      data.isHidden = true;\n    }\n  });\n}","map":{"version":3,"names":["toSingleLine","hideColumn","nodeToProcess","gridColumnIndex","Number","isInteger","Error","childs","length","crossHiddenColumns","data","includes","isCollapsibleNode","walkUp","node","collapsible","push","colspan","isHidden"],"sources":["D:/gym-project/frontend/node_modules/handsontable/plugins/nestedHeaders/stateManager/nodeModifiers/hideColumn.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport { toSingleLine } from \"../../../../helpers/templateLiteralTag.mjs\";\n/**\n * @param {TreeNode} nodeToProcess A tree node to process.\n * @param {number} gridColumnIndex The visual column index that triggers the node modification.\n *                                 The index can be between the root node column index and\n *                                 column index plus node colspan length.\n */\nexport function hideColumn(nodeToProcess, gridColumnIndex) {\n  if (!Number.isInteger(gridColumnIndex)) {\n    throw new Error('The passed gridColumnIndex argument has invalid type.');\n  }\n  if (nodeToProcess.childs.length > 0) {\n    throw new Error(toSingleLine`The passed node is not the last node on the tree. Only for\\x20\nthe last node, the hide column modification can be applied.`);\n  }\n  const {\n    crossHiddenColumns\n  } = nodeToProcess.data;\n  if (crossHiddenColumns.includes(gridColumnIndex)) {\n    return;\n  }\n  let isCollapsibleNode = false;\n  nodeToProcess.walkUp(node => {\n    const {\n      data: {\n        collapsible\n      }\n    } = node;\n    if (collapsible) {\n      isCollapsibleNode = true;\n      return false; // Cancel tree traversing\n    }\n  });\n\n  // TODO: When the node is collapsible do not hide the column. Currently collapsible headers\n  // does not work with hidden columns (hidden index map types).\n  if (isCollapsibleNode) {\n    return;\n  }\n  nodeToProcess.walkUp(node => {\n    const {\n      data\n    } = node;\n    data.crossHiddenColumns.push(gridColumnIndex);\n    if (data.colspan > 1) {\n      data.colspan -= 1;\n    } else {\n      data.isHidden = true;\n    }\n  });\n}"],"mappings":"AAEA,SAASA,YAAY,QAAQ,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAACC,aAAa,EAAEC,eAAe,EAAE;EACzD,IAAI,CAACC,MAAM,CAACC,SAAS,CAACF,eAAe,CAAC,EAAE;IACtC,MAAM,IAAIG,KAAK,CAAC,uDAAuD,CAAC;EAC1E;EACA,IAAIJ,aAAa,CAACK,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;IACnC,MAAM,IAAIF,KAAK,CAACN,YAAY;AAChC,4DAA4D,CAAC;EAC3D;EACA,MAAM;IACJS;EACF,CAAC,GAAGP,aAAa,CAACQ,IAAI;EACtB,IAAID,kBAAkB,CAACE,QAAQ,CAACR,eAAe,CAAC,EAAE;IAChD;EACF;EACA,IAAIS,iBAAiB,GAAG,KAAK;EAC7BV,aAAa,CAACW,MAAM,CAACC,IAAI,IAAI;IAC3B,MAAM;MACJJ,IAAI,EAAE;QACJK;MACF;IACF,CAAC,GAAGD,IAAI;IACR,IAAIC,WAAW,EAAE;MACfH,iBAAiB,GAAG,IAAI;MACxB,OAAO,KAAK,CAAC,CAAC;IAChB;EACF,CAAC,CAAC;;EAEF;EACA;EACA,IAAIA,iBAAiB,EAAE;IACrB;EACF;EACAV,aAAa,CAACW,MAAM,CAACC,IAAI,IAAI;IAC3B,MAAM;MACJJ;IACF,CAAC,GAAGI,IAAI;IACRJ,IAAI,CAACD,kBAAkB,CAACO,IAAI,CAACb,eAAe,CAAC;IAC7C,IAAIO,IAAI,CAACO,OAAO,GAAG,CAAC,EAAE;MACpBP,IAAI,CAACO,OAAO,IAAI,CAAC;IACnB,CAAC,MAAM;MACLP,IAAI,CAACQ,QAAQ,GAAG,IAAI;IACtB;EACF,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}