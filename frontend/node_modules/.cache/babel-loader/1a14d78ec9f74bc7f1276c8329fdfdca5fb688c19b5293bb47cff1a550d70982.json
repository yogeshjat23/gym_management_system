{"ast":null,"code":"var _jsxFileName = \"D:\\\\gym-project\\\\frontend\\\\src\\\\pages\\\\Add.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Handsontable from 'handsontable';\nimport { HotTable } from '@handsontable/react';\nimport 'handsontable/dist/handsontable.full.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExcelLikeGrid = () => {\n  _s();\n  const [data, setData] = useState([['', '', '']]); // Initialize with empty rows/columns\n\n  const handleSave = () => {\n    // Here, you'll send the data to your backend\n    fetch('/api/save-data', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        data\n      })\n    }).then(response => response.json()).then(result => {\n      console.log('Data saved:', result);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(HotTable, {\n      data: data,\n      colHeaders: true,\n      rowHeaders: true,\n      width: \"600\",\n      height: \"300\",\n      stretchH: \"all\",\n      afterChange: (changes, source) => {\n        if (source !== 'loadData') {\n          setData([...data]); // Update state with new data\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSave,\n      children: \"Save Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s(ExcelLikeGrid, \"3JRvK+qoEOmIAr67BP2kY3ZFV8M=\");\n_c = ExcelLikeGrid;\nexport default ExcelLikeGrid;\nvar _c;\n$RefreshReg$(_c, \"ExcelLikeGrid\");","map":{"version":3,"names":["React","useState","Handsontable","HotTable","jsxDEV","_jsxDEV","ExcelLikeGrid","_s","data","setData","handleSave","fetch","method","headers","body","JSON","stringify","then","response","json","result","console","log","children","colHeaders","rowHeaders","width","height","stretchH","afterChange","changes","source","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["D:/gym-project/frontend/src/pages/Add.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Handsontable from 'handsontable';\r\nimport { HotTable } from '@handsontable/react';\r\nimport 'handsontable/dist/handsontable.full.css';\r\n\r\nconst ExcelLikeGrid = () => {\r\n  const [data, setData] = useState([['', '', '']]); // Initialize with empty rows/columns\r\n\r\n  const handleSave = () => {\r\n    // Here, you'll send the data to your backend\r\n    fetch('/api/save-data', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ data }),\r\n    })\r\n      .then(response => response.json())\r\n      .then(result => {\r\n        console.log('Data saved:', result);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <HotTable\r\n        data={data}\r\n        colHeaders={true}\r\n        rowHeaders={true}\r\n        width=\"600\"\r\n        height=\"300\"\r\n        stretchH=\"all\"\r\n        afterChange={(changes, source) => {\r\n          if (source !== 'loadData') {\r\n            setData([...data]); // Update state with new data\r\n          }\r\n        }}\r\n      />\r\n      <button onClick={handleSave}>Save Data</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExcelLikeGrid;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,YAAY,MAAM,cAAc;AACvC,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,OAAO,yCAAyC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;;EAElD,MAAMS,UAAU,GAAGA,CAAA,KAAM;IACvB;IACAC,KAAK,CAAC,gBAAgB,EAAE;MACtBC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER;MAAK,CAAC;IAC/B,CAAC,CAAC,CACCS,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,MAAM,IAAI;MACdC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEF,MAAM,CAAC;IACpC,CAAC,CAAC;EACN,CAAC;EAED,oBACEf,OAAA;IAAAkB,QAAA,gBACElB,OAAA,CAACF,QAAQ;MACPK,IAAI,EAAEA,IAAK;MACXgB,UAAU,EAAE,IAAK;MACjBC,UAAU,EAAE,IAAK;MACjBC,KAAK,EAAC,KAAK;MACXC,MAAM,EAAC,KAAK;MACZC,QAAQ,EAAC,KAAK;MACdC,WAAW,EAAEA,CAACC,OAAO,EAAEC,MAAM,KAAK;QAChC,IAAIA,MAAM,KAAK,UAAU,EAAE;UACzBtB,OAAO,CAAC,CAAC,GAAGD,IAAI,CAAC,CAAC,CAAC,CAAC;QACtB;MACF;IAAE;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACF9B,OAAA;MAAQ+B,OAAO,EAAE1B,UAAW;MAAAa,QAAA,EAAC;IAAS;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5C,CAAC;AAEV,CAAC;AAAC5B,EAAA,CApCID,aAAa;AAAA+B,EAAA,GAAb/B,aAAa;AAsCnB,eAAeA,aAAa;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}