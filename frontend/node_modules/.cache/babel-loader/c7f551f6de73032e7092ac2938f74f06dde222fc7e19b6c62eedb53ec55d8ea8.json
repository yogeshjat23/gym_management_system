{"ast":null,"code":"function _classPrivateMethodInitSpec(e, a) {\n  _checkPrivateRedeclaration(e, a), a.add(e);\n}\nfunction _classPrivateFieldInitSpec(e, t, a) {\n  _checkPrivateRedeclaration(e, t), t.set(e, a);\n}\nfunction _checkPrivateRedeclaration(e, t) {\n  if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n}\nfunction _classPrivateFieldSet(s, a, r) {\n  return s.set(_assertClassBrand(s, a), r), r;\n}\nfunction _classPrivateFieldGet(s, a) {\n  return s.get(_assertClassBrand(s, a));\n}\nfunction _assertClassBrand(e, t, n) {\n  if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n;\n  throw new TypeError(\"Private element is not present on this object\");\n}\nimport { BasePlugin } from \"../base/index.mjs\";\nimport { addClass, closest, hasClass, removeClass, outerWidth, isDetached } from \"../../helpers/dom/element.mjs\";\nimport { arrayEach } from \"../../helpers/array.mjs\";\nimport { rangeEach } from \"../../helpers/number.mjs\";\nimport { PhysicalIndexToValueMap as IndexToValueMap } from \"../../translations/index.mjs\";\nimport { DEFAULT_ROW_HEIGHT } from \"../../3rdparty/walkontable/src/index.mjs\"; // Developer note! Whenever you make a change in this file, make an analogous change in manualColumnResize.js\nexport const PLUGIN_KEY = 'manualRowResize';\nexport const PLUGIN_PRIORITY = 30;\nconst PERSISTENT_STATE_KEY = 'manualRowHeights';\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @plugin ManualRowResize\n * @class ManualRowResize\n *\n * @description\n * This plugin allows to change rows height. To make rows height persistent the {@link Options#persistentState}\n * plugin should be enabled.\n *\n * The plugin creates additional components to make resizing possibly using user interface:\n * - handle - the draggable element that sets the desired height of the row.\n * - guide - the helper guide that shows the desired height as a horizontal guide.\n */\nvar _currentTH = /*#__PURE__*/new WeakMap();\nvar _currentRow = /*#__PURE__*/new WeakMap();\nvar _selectedRows = /*#__PURE__*/new WeakMap();\nvar _currentHeight = /*#__PURE__*/new WeakMap();\nvar _newSize = /*#__PURE__*/new WeakMap();\nvar _startY = /*#__PURE__*/new WeakMap();\nvar _startHeight = /*#__PURE__*/new WeakMap();\nvar _startOffset = /*#__PURE__*/new WeakMap();\nvar _handle = /*#__PURE__*/new WeakMap();\nvar _guide = /*#__PURE__*/new WeakMap();\nvar _pressed = /*#__PURE__*/new WeakMap();\nvar _isTriggeredByRMB = /*#__PURE__*/new WeakMap();\nvar _dblclick = /*#__PURE__*/new WeakMap();\nvar _autoresizeTimeout = /*#__PURE__*/new WeakMap();\nvar _rowHeightsMap = /*#__PURE__*/new WeakMap();\nvar _config = /*#__PURE__*/new WeakMap();\nvar _ManualRowResize_brand = /*#__PURE__*/new WeakSet();\nexport class ManualRowResize extends BasePlugin {\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n\n  /**\n   * @type {HTMLTableCellElement}\n   */\n\n  constructor(hotInstance) {\n    super(hotInstance);\n    /**\n     * 'mouseover' event callback - set the handle position.\n     *\n     * @param {MouseEvent} event The mouse event.\n     */\n    _classPrivateMethodInitSpec(this, _ManualRowResize_brand);\n    _classPrivateFieldInitSpec(this, _currentTH, null);\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _currentRow, null);\n    /**\n     * @type {number[]}\n     */\n    _classPrivateFieldInitSpec(this, _selectedRows, []);\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _currentHeight, null);\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _newSize, null);\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _startY, null);\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _startHeight, null);\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _startOffset, null);\n    /**\n     * @type {HTMLElement}\n     */\n    _classPrivateFieldInitSpec(this, _handle, this.hot.rootDocument.createElement('DIV'));\n    /**\n     * @type {HTMLElement}\n     */\n    _classPrivateFieldInitSpec(this, _guide, this.hot.rootDocument.createElement('DIV'));\n    /**\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _pressed, false);\n    /**\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _isTriggeredByRMB, false);\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _dblclick, 0);\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _autoresizeTimeout, null);\n    /**\n     * PhysicalIndexToValueMap to keep and track widths for physical row indexes.\n     *\n     * @type {PhysicalIndexToValueMap}\n     */\n    _classPrivateFieldInitSpec(this, _rowHeightsMap, void 0);\n    /**\n     * Private pool to save configuration from updateSettings.\n     *\n     * @type {object}\n     */\n    _classPrivateFieldInitSpec(this, _config, void 0);\n    addClass(_classPrivateFieldGet(_handle, this), 'manualRowResizer');\n    addClass(_classPrivateFieldGet(_guide, this), 'manualRowResizerGuide');\n  }\n\n  /**\n   * @private\n   * @returns {string}\n   */\n  get inlineDir() {\n    return this.hot.isRtl() ? 'right' : 'left';\n  }\n\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link ManualRowResize#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    if (this.enabled) {\n      return;\n    }\n    _classPrivateFieldSet(_rowHeightsMap, this, new IndexToValueMap());\n    _classPrivateFieldGet(_rowHeightsMap, this).addLocalHook('init', () => _assertClassBrand(_ManualRowResize_brand, this, _onMapInit).call(this));\n    this.hot.rowIndexMapper.registerMap(this.pluginName, _classPrivateFieldGet(_rowHeightsMap, this));\n    this.addHook('modifyRowHeight', (height, row) => _assertClassBrand(_ManualRowResize_brand, this, _onModifyRowHeight).call(this, height, row));\n    this.bindEvents();\n    super.enablePlugin();\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:\n   *  - [`manualRowResize`](@/api/options.md#manualrowresize)\n   */\n  updatePlugin() {\n    this.disablePlugin();\n    this.enablePlugin();\n    super.updatePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    _classPrivateFieldSet(_config, this, _classPrivateFieldGet(_rowHeightsMap, this).getValues());\n    this.hot.rowIndexMapper.unregisterMap(this.pluginName);\n    super.disablePlugin();\n  }\n\n  /**\n   * Saves the current sizes using the persistentState plugin (the {@link Options#persistentState} option has to be\n   * enabled).\n   *\n   * @fires Hooks#persistentStateSave\n   */\n  saveManualRowHeights() {\n    this.hot.runHooks('persistentStateSave', PERSISTENT_STATE_KEY, _classPrivateFieldGet(_rowHeightsMap, this).getValues());\n  }\n\n  /**\n   * Loads the previously saved sizes using the persistentState plugin (the {@link Options#persistentState} option\n   * has be enabled).\n   *\n   * @returns {Array}\n   * @fires Hooks#persistentStateLoad\n   */\n  loadManualRowHeights() {\n    const storedState = {};\n    this.hot.runHooks('persistentStateLoad', PERSISTENT_STATE_KEY, storedState);\n    return storedState.value;\n  }\n\n  /**\n   * Sets the new height for specified row index.\n   *\n   * @param {number} row Visual row index.\n   * @param {number} height Row height.\n   * @returns {number} Returns new height.\n   */\n  setManualSize(row, height) {\n    const physicalRow = this.hot.toPhysicalRow(row);\n    const newHeight = Math.max(height, DEFAULT_ROW_HEIGHT);\n    _classPrivateFieldGet(_rowHeightsMap, this).setValueAtIndex(physicalRow, newHeight);\n    return newHeight;\n  }\n\n  /**\n   * Returns the last desired row height set manually with the resize handle.\n   *\n   * @returns {number} The last desired row height.\n   */\n  getLastDesiredRowHeight() {\n    return _classPrivateFieldGet(_currentHeight, this);\n  }\n\n  /**\n   * Sets the resize handle position.\n   *\n   * @private\n   * @param {HTMLCellElement} TH TH HTML element.\n   */\n  setupHandlePosition(TH) {\n    _classPrivateFieldSet(_currentTH, this, TH);\n    const {\n      view\n    } = this.hot;\n    const {\n      _wt: wt\n    } = view;\n    const cellCoords = wt.wtTable.getCoords(_classPrivateFieldGet(_currentTH, this));\n    const row = cellCoords.row;\n\n    // Ignore row headers.\n    if (row < 0) {\n      return;\n    }\n    const headerWidth = outerWidth(_classPrivateFieldGet(_currentTH, this));\n    const box = _classPrivateFieldGet(_currentTH, this).getBoundingClientRect();\n    // Read \"fixedRowsTop\" and \"fixedRowsBottom\" through the Walkontable as in that context, the fixed\n    // rows are modified (reduced by the number of hidden rows) by TableView module.\n    const fixedRowTop = row < wt.getSetting('fixedRowsTop');\n    const fixedRowBottom = row >= view.countNotHiddenRowIndexes(0, 1) - wt.getSetting('fixedRowsBottom');\n    let relativeHeaderPosition;\n    if (fixedRowTop) {\n      relativeHeaderPosition = wt.wtOverlays.topInlineStartCornerOverlay.getRelativeCellPosition(_classPrivateFieldGet(_currentTH, this), cellCoords.row, cellCoords.col);\n    } else if (fixedRowBottom) {\n      relativeHeaderPosition = wt.wtOverlays.bottomInlineStartCornerOverlay.getRelativeCellPosition(_classPrivateFieldGet(_currentTH, this), cellCoords.row, cellCoords.col);\n    }\n\n    // If the TH is not a child of the top-left/bottom-left overlay, recalculate using\n    // the left overlay - as this overlay contains the rest of the headers.\n    if (!relativeHeaderPosition) {\n      relativeHeaderPosition = wt.wtOverlays.inlineStartOverlay.getRelativeCellPosition(_classPrivateFieldGet(_currentTH, this), cellCoords.row, cellCoords.col);\n    }\n    _classPrivateFieldSet(_currentRow, this, this.hot.rowIndexMapper.getVisualFromRenderableIndex(row));\n    _classPrivateFieldSet(_selectedRows, this, []);\n    const isFullRowSelected = this.hot.selection.isSelectedByCorner() || this.hot.selection.isSelectedByRowHeader();\n    if (this.hot.selection.isSelected() && isFullRowSelected) {\n      const selectionRanges = this.hot.getSelectedRange();\n      arrayEach(selectionRanges, selectionRange => {\n        const fromRow = selectionRange.getTopStartCorner().row;\n        const toRow = selectionRange.getBottomStartCorner().row;\n\n        // Add every selected row for resize action.\n        rangeEach(fromRow, toRow, rowIndex => {\n          if (!_classPrivateFieldGet(_selectedRows, this).includes(rowIndex)) {\n            _classPrivateFieldGet(_selectedRows, this).push(rowIndex);\n          }\n        });\n      });\n    }\n\n    // Resizing element beyond the current selection (also when there is no selection).\n    if (!_classPrivateFieldGet(_selectedRows, this).includes(_classPrivateFieldGet(_currentRow, this))) {\n      _classPrivateFieldSet(_selectedRows, this, [_classPrivateFieldGet(_currentRow, this)]);\n    }\n    _classPrivateFieldSet(_startOffset, this, relativeHeaderPosition.top - 6);\n    _classPrivateFieldSet(_startHeight, this, parseInt(box.height, 10));\n    _classPrivateFieldGet(_handle, this).style.top = `${_classPrivateFieldGet(_startOffset, this) + _classPrivateFieldGet(_startHeight, this)}px`;\n    _classPrivateFieldGet(_handle, this).style[this.inlineDir] = `${relativeHeaderPosition.start}px`;\n    _classPrivateFieldGet(_handle, this).style.width = `${headerWidth}px`;\n    this.hot.rootElement.appendChild(_classPrivateFieldGet(_handle, this));\n  }\n\n  /**\n   * Refresh the resize handle position.\n   *\n   * @private\n   */\n  refreshHandlePosition() {\n    _classPrivateFieldGet(_handle, this).style.top = `${_classPrivateFieldGet(_startOffset, this) + _classPrivateFieldGet(_currentHeight, this)}px`;\n  }\n\n  /**\n   * Sets the resize guide position.\n   *\n   * @private\n   */\n  setupGuidePosition() {\n    const handleWidth = parseInt(outerWidth(_classPrivateFieldGet(_handle, this)), 10);\n    const handleEndPosition = parseInt(_classPrivateFieldGet(_handle, this).style[this.inlineDir], 10) + handleWidth;\n    const maximumVisibleElementWidth = parseInt(this.hot.view.maximumVisibleElementWidth(0), 10);\n    addClass(_classPrivateFieldGet(_handle, this), 'active');\n    addClass(_classPrivateFieldGet(_guide, this), 'active');\n    _classPrivateFieldGet(_guide, this).style.top = _classPrivateFieldGet(_handle, this).style.top;\n    _classPrivateFieldGet(_guide, this).style[this.inlineDir] = `${handleEndPosition}px`;\n    _classPrivateFieldGet(_guide, this).style.width = `${maximumVisibleElementWidth - handleWidth}px`;\n    this.hot.rootElement.appendChild(_classPrivateFieldGet(_guide, this));\n  }\n\n  /**\n   * Refresh the resize guide position.\n   *\n   * @private\n   */\n  refreshGuidePosition() {\n    _classPrivateFieldGet(_guide, this).style.top = _classPrivateFieldGet(_handle, this).style.top;\n  }\n\n  /**\n   * Hides both the resize handle and resize guide.\n   *\n   * @private\n   */\n  hideHandleAndGuide() {\n    removeClass(_classPrivateFieldGet(_handle, this), 'active');\n    removeClass(_classPrivateFieldGet(_guide, this), 'active');\n  }\n\n  /**\n   * Checks if provided element is considered as a row header.\n   *\n   * @private\n   * @param {HTMLElement} element HTML element.\n   * @returns {boolean}\n   */\n  checkIfRowHeader(element) {\n    const tbody = closest(element, ['TBODY'], this.hot.rootElement);\n    const {\n      inlineStartOverlay,\n      topInlineStartCornerOverlay,\n      bottomInlineStartCornerOverlay\n    } = this.hot.view._wt.wtOverlays;\n    return [inlineStartOverlay.clone.wtTable.TBODY, topInlineStartCornerOverlay.clone.wtTable.TBODY, bottomInlineStartCornerOverlay.clone.wtTable.TBODY].includes(tbody);\n  }\n\n  /**\n   * Gets the TH element from the provided element.\n   *\n   * @private\n   * @param {HTMLElement} element HTML element.\n   * @returns {HTMLElement}\n   */\n  getClosestTHParent(element) {\n    if (element.tagName !== 'TABLE') {\n      if (element.tagName === 'TH') {\n        return element;\n      }\n      return this.getClosestTHParent(element.parentNode);\n    }\n    return null;\n  }\n\n  /**\n   * Returns the actual height for the provided row index.\n   *\n   * @private\n   * @param {number} row Visual row index.\n   * @returns {number} Actual row height.\n   */\n  getActualRowHeight(row) {\n    // TODO: this should utilize `this.hot.getRowHeight` after it's fixed and working properly.\n    const walkontableHeight = this.hot.view._wt.wtTable.getRowHeight(row);\n    if (walkontableHeight !== undefined && _classPrivateFieldGet(_newSize, this) < walkontableHeight) {\n      return walkontableHeight;\n    }\n    return _classPrivateFieldGet(_newSize, this);\n  }\n  /**\n   * Auto-size row after doubleclick - callback.\n   *\n   * @private\n   * @fires Hooks#beforeRowResize\n   * @fires Hooks#afterRowResize\n   */\n  afterMouseDownTimeout() {\n    const render = () => {\n      this.hot.forceFullRender = true;\n      this.hot.view.render(); // updates all\n      this.hot.view.adjustElementsSize();\n    };\n    const resize = (row, forceRender) => {\n      const hookNewSize = this.hot.runHooks('beforeRowResize', this.getActualRowHeight(row), row, true);\n      if (hookNewSize !== undefined) {\n        _classPrivateFieldSet(_newSize, this, hookNewSize);\n      }\n      this.setManualSize(row, _classPrivateFieldGet(_newSize, this)); // double click sets auto row size\n\n      this.hot.runHooks('afterRowResize', this.getActualRowHeight(row), row, true);\n      if (forceRender) {\n        render();\n      }\n    };\n    if (_classPrivateFieldGet(_dblclick, this) >= 2) {\n      const selectedRowsLength = _classPrivateFieldGet(_selectedRows, this).length;\n      if (selectedRowsLength > 1) {\n        arrayEach(_classPrivateFieldGet(_selectedRows, this), selectedRow => {\n          resize(selectedRow);\n        });\n        render();\n      } else {\n        arrayEach(_classPrivateFieldGet(_selectedRows, this), selectedRow => {\n          resize(selectedRow, true);\n        });\n      }\n    }\n    _classPrivateFieldSet(_dblclick, this, 0);\n    _classPrivateFieldSet(_autoresizeTimeout, this, null);\n  }\n\n  /**\n   * 'mousedown' event callback.\n   *\n   * @param {MouseEvent} event The mouse event.\n   */\n\n  /**\n   * Binds the mouse events.\n   *\n   * @private\n   */\n  bindEvents() {\n    const {\n      rootElement,\n      rootWindow\n    } = this.hot;\n    this.eventManager.addEventListener(rootElement, 'mouseover', e => _assertClassBrand(_ManualRowResize_brand, this, _onMouseOver).call(this, e));\n    this.eventManager.addEventListener(rootElement, 'mousedown', e => _assertClassBrand(_ManualRowResize_brand, this, _onMouseDown).call(this, e));\n    this.eventManager.addEventListener(rootWindow, 'mousemove', e => _assertClassBrand(_ManualRowResize_brand, this, _onMouseMove).call(this, e));\n    this.eventManager.addEventListener(rootWindow, 'mouseup', () => _assertClassBrand(_ManualRowResize_brand, this, _onMouseUp).call(this));\n    this.eventManager.addEventListener(_classPrivateFieldGet(_handle, this), 'contextmenu', () => _assertClassBrand(_ManualRowResize_brand, this, _onContextMenu).call(this));\n  }\n\n  /**\n   * Modifies the provided row height, based on the plugin settings.\n   *\n   * @param {number} height Row height.\n   * @param {number} row Visual row index.\n   * @returns {number}\n   */\n\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    super.destroy();\n  }\n}\nfunction _onMouseOver(event) {\n  // Workaround for #6926 - if the `event.target` is temporarily detached, we can skip this callback and wait for\n  // the next `onmouseover`.\n  if (isDetached(event.target)) {\n    return;\n  }\n\n  // A \"mouseover\" action is triggered right after executing \"contextmenu\" event. It should be ignored.\n  if (_classPrivateFieldGet(_isTriggeredByRMB, this) === true) {\n    return;\n  }\n  if (this.checkIfRowHeader(event.target)) {\n    const th = this.getClosestTHParent(event.target);\n    if (th) {\n      if (!_classPrivateFieldGet(_pressed, this)) {\n        this.setupHandlePosition(th);\n      }\n    }\n  }\n}\nfunction _onMouseDown(event) {\n  if (hasClass(event.target, 'manualRowResizer')) {\n    this.setupHandlePosition(_classPrivateFieldGet(_currentTH, this));\n    this.setupGuidePosition();\n    _classPrivateFieldSet(_pressed, this, true);\n    if (_classPrivateFieldGet(_autoresizeTimeout, this) === null) {\n      _classPrivateFieldSet(_autoresizeTimeout, this, setTimeout(() => this.afterMouseDownTimeout(), 500));\n      this.hot._registerTimeout(_classPrivateFieldGet(_autoresizeTimeout, this));\n    }\n    _classPrivateFieldSet(_dblclick, this, _classPrivateFieldGet(_dblclick, this) + 1);\n    _classPrivateFieldSet(_startY, this, event.pageY);\n    _classPrivateFieldSet(_newSize, this, _classPrivateFieldGet(_startHeight, this));\n  }\n}\n/**\n * 'mousemove' event callback - refresh the handle and guide positions, cache the new row height.\n *\n * @param {MouseEvent} event The mouse event.\n */\nfunction _onMouseMove(event) {\n  if (_classPrivateFieldGet(_pressed, this)) {\n    _classPrivateFieldSet(_currentHeight, this, _classPrivateFieldGet(_startHeight, this) + (event.pageY - _classPrivateFieldGet(_startY, this)));\n    arrayEach(_classPrivateFieldGet(_selectedRows, this), selectedRow => {\n      _classPrivateFieldSet(_newSize, this, this.setManualSize(selectedRow, _classPrivateFieldGet(_currentHeight, this)));\n    });\n    this.refreshHandlePosition();\n    this.refreshGuidePosition();\n  }\n}\n/**\n * 'mouseup' event callback - apply the row resizing.\n *\n * @fires Hooks#beforeRowResize\n * @fires Hooks#afterRowResize\n */\nfunction _onMouseUp() {\n  const render = () => {\n    this.hot.forceFullRender = true;\n    this.hot.view.render(); // updates all\n    this.hot.view.adjustElementsSize();\n  };\n  const runHooks = (row, forceRender) => {\n    this.hot.runHooks('beforeRowResize', this.getActualRowHeight(row), row, false);\n    if (forceRender) {\n      render();\n    }\n    this.saveManualRowHeights();\n    this.hot.runHooks('afterRowResize', this.getActualRowHeight(row), row, false);\n  };\n  if (_classPrivateFieldGet(_pressed, this)) {\n    this.hideHandleAndGuide();\n    _classPrivateFieldSet(_pressed, this, false);\n    if (_classPrivateFieldGet(_newSize, this) !== _classPrivateFieldGet(_startHeight, this)) {\n      const selectedRowsLength = _classPrivateFieldGet(_selectedRows, this).length;\n      if (selectedRowsLength > 1) {\n        arrayEach(_classPrivateFieldGet(_selectedRows, this), selectedRow => {\n          runHooks(selectedRow);\n        });\n        render();\n      } else {\n        arrayEach(_classPrivateFieldGet(_selectedRows, this), selectedRow => {\n          runHooks(selectedRow, true);\n        });\n      }\n    }\n    this.setupHandlePosition(_classPrivateFieldGet(_currentTH, this));\n  }\n}\n/**\n * Callback for \"contextmenu\" event triggered on element showing move handle. It removes handle and guide elements.\n */\nfunction _onContextMenu() {\n  this.hideHandleAndGuide();\n  this.hot.rootElement.removeChild(_classPrivateFieldGet(_handle, this));\n  this.hot.rootElement.removeChild(_classPrivateFieldGet(_guide, this));\n  _classPrivateFieldSet(_pressed, this, false);\n  _classPrivateFieldSet(_isTriggeredByRMB, this, true);\n\n  // There is thrown \"mouseover\" event right after opening a context menu. This flag inform that handle\n  // shouldn't be drawn just after removing it.\n  this.hot._registerImmediate(() => {\n    _classPrivateFieldSet(_isTriggeredByRMB, this, false);\n  });\n}\nfunction _onModifyRowHeight(height, row) {\n  let newHeight = height;\n  if (this.enabled) {\n    const physicalRow = this.hot.toPhysicalRow(row);\n    const rowHeight = _classPrivateFieldGet(_rowHeightsMap, this).getValueAtIndex(physicalRow);\n    if (this.hot.getSettings()[PLUGIN_KEY] && rowHeight) {\n      newHeight = rowHeight;\n    }\n  }\n  return newHeight;\n}\n/**\n * Callback to call on map's `init` local hook.\n */\nfunction _onMapInit() {\n  const initialSetting = this.hot.getSettings()[PLUGIN_KEY];\n  const loadedManualRowHeights = this.loadManualRowHeights();\n  this.hot.batchExecution(() => {\n    if (typeof loadedManualRowHeights !== 'undefined') {\n      loadedManualRowHeights.forEach((height, index) => {\n        _classPrivateFieldGet(_rowHeightsMap, this).setValueAtIndex(index, height);\n      });\n    } else if (Array.isArray(initialSetting)) {\n      initialSetting.forEach((height, index) => {\n        _classPrivateFieldGet(_rowHeightsMap, this).setValueAtIndex(index, height);\n      });\n      _classPrivateFieldSet(_config, this, initialSetting);\n    } else if (initialSetting === true && Array.isArray(_classPrivateFieldGet(_config, this))) {\n      _classPrivateFieldGet(_config, this).forEach((height, index) => {\n        _classPrivateFieldGet(_rowHeightsMap, this).setValueAtIndex(index, height);\n      });\n    }\n  }, true);\n}","map":{"version":3,"names":["_classPrivateMethodInitSpec","e","a","_checkPrivateRedeclaration","add","_classPrivateFieldInitSpec","t","set","has","TypeError","_classPrivateFieldSet","s","r","_assertClassBrand","_classPrivateFieldGet","get","n","arguments","length","BasePlugin","addClass","closest","hasClass","removeClass","outerWidth","isDetached","arrayEach","rangeEach","PhysicalIndexToValueMap","IndexToValueMap","DEFAULT_ROW_HEIGHT","PLUGIN_KEY","PLUGIN_PRIORITY","PERSISTENT_STATE_KEY","_currentTH","WeakMap","_currentRow","_selectedRows","_currentHeight","_newSize","_startY","_startHeight","_startOffset","_handle","_guide","_pressed","_isTriggeredByRMB","_dblclick","_autoresizeTimeout","_rowHeightsMap","_config","_ManualRowResize_brand","WeakSet","ManualRowResize","constructor","hotInstance","hot","rootDocument","createElement","inlineDir","isRtl","isEnabled","getSettings","enablePlugin","enabled","addLocalHook","_onMapInit","call","rowIndexMapper","registerMap","pluginName","addHook","height","row","_onModifyRowHeight","bindEvents","updatePlugin","disablePlugin","getValues","unregisterMap","saveManualRowHeights","runHooks","loadManualRowHeights","storedState","value","setManualSize","physicalRow","toPhysicalRow","newHeight","Math","max","setValueAtIndex","getLastDesiredRowHeight","setupHandlePosition","TH","view","_wt","wt","cellCoords","wtTable","getCoords","headerWidth","box","getBoundingClientRect","fixedRowTop","getSetting","fixedRowBottom","countNotHiddenRowIndexes","relativeHeaderPosition","wtOverlays","topInlineStartCornerOverlay","getRelativeCellPosition","col","bottomInlineStartCornerOverlay","inlineStartOverlay","getVisualFromRenderableIndex","isFullRowSelected","selection","isSelectedByCorner","isSelectedByRowHeader","isSelected","selectionRanges","getSelectedRange","selectionRange","fromRow","getTopStartCorner","toRow","getBottomStartCorner","rowIndex","includes","push","top","parseInt","style","start","width","rootElement","appendChild","refreshHandlePosition","setupGuidePosition","handleWidth","handleEndPosition","maximumVisibleElementWidth","refreshGuidePosition","hideHandleAndGuide","checkIfRowHeader","element","tbody","clone","TBODY","getClosestTHParent","tagName","parentNode","getActualRowHeight","walkontableHeight","getRowHeight","undefined","afterMouseDownTimeout","render","forceFullRender","adjustElementsSize","resize","forceRender","hookNewSize","selectedRowsLength","selectedRow","rootWindow","eventManager","addEventListener","_onMouseOver","_onMouseDown","_onMouseMove","_onMouseUp","_onContextMenu","destroy","event","target","th","setTimeout","_registerTimeout","pageY","removeChild","_registerImmediate","rowHeight","getValueAtIndex","initialSetting","loadedManualRowHeights","batchExecution","forEach","index","Array","isArray"],"sources":["D:/gym-project/frontend/node_modules/handsontable/plugins/manualRowResize/manualRowResize.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nfunction _classPrivateMethodInitSpec(e, a) { _checkPrivateRedeclaration(e, a), a.add(e); }\nfunction _classPrivateFieldInitSpec(e, t, a) { _checkPrivateRedeclaration(e, t), t.set(e, a); }\nfunction _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); }\nfunction _classPrivateFieldSet(s, a, r) { return s.set(_assertClassBrand(s, a), r), r; }\nfunction _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }\nfunction _assertClassBrand(e, t, n) { if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError(\"Private element is not present on this object\"); }\nimport { BasePlugin } from \"../base/index.mjs\";\nimport { addClass, closest, hasClass, removeClass, outerWidth, isDetached } from \"../../helpers/dom/element.mjs\";\nimport { arrayEach } from \"../../helpers/array.mjs\";\nimport { rangeEach } from \"../../helpers/number.mjs\";\nimport { PhysicalIndexToValueMap as IndexToValueMap } from \"../../translations/index.mjs\";\nimport { DEFAULT_ROW_HEIGHT } from \"../../3rdparty/walkontable/src/index.mjs\"; // Developer note! Whenever you make a change in this file, make an analogous change in manualColumnResize.js\nexport const PLUGIN_KEY = 'manualRowResize';\nexport const PLUGIN_PRIORITY = 30;\nconst PERSISTENT_STATE_KEY = 'manualRowHeights';\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @plugin ManualRowResize\n * @class ManualRowResize\n *\n * @description\n * This plugin allows to change rows height. To make rows height persistent the {@link Options#persistentState}\n * plugin should be enabled.\n *\n * The plugin creates additional components to make resizing possibly using user interface:\n * - handle - the draggable element that sets the desired height of the row.\n * - guide - the helper guide that shows the desired height as a horizontal guide.\n */\nvar _currentTH = /*#__PURE__*/new WeakMap();\nvar _currentRow = /*#__PURE__*/new WeakMap();\nvar _selectedRows = /*#__PURE__*/new WeakMap();\nvar _currentHeight = /*#__PURE__*/new WeakMap();\nvar _newSize = /*#__PURE__*/new WeakMap();\nvar _startY = /*#__PURE__*/new WeakMap();\nvar _startHeight = /*#__PURE__*/new WeakMap();\nvar _startOffset = /*#__PURE__*/new WeakMap();\nvar _handle = /*#__PURE__*/new WeakMap();\nvar _guide = /*#__PURE__*/new WeakMap();\nvar _pressed = /*#__PURE__*/new WeakMap();\nvar _isTriggeredByRMB = /*#__PURE__*/new WeakMap();\nvar _dblclick = /*#__PURE__*/new WeakMap();\nvar _autoresizeTimeout = /*#__PURE__*/new WeakMap();\nvar _rowHeightsMap = /*#__PURE__*/new WeakMap();\nvar _config = /*#__PURE__*/new WeakMap();\nvar _ManualRowResize_brand = /*#__PURE__*/new WeakSet();\nexport class ManualRowResize extends BasePlugin {\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n\n  /**\n   * @type {HTMLTableCellElement}\n   */\n\n  constructor(hotInstance) {\n    super(hotInstance);\n    /**\n     * 'mouseover' event callback - set the handle position.\n     *\n     * @param {MouseEvent} event The mouse event.\n     */\n    _classPrivateMethodInitSpec(this, _ManualRowResize_brand);\n    _classPrivateFieldInitSpec(this, _currentTH, null);\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _currentRow, null);\n    /**\n     * @type {number[]}\n     */\n    _classPrivateFieldInitSpec(this, _selectedRows, []);\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _currentHeight, null);\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _newSize, null);\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _startY, null);\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _startHeight, null);\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _startOffset, null);\n    /**\n     * @type {HTMLElement}\n     */\n    _classPrivateFieldInitSpec(this, _handle, this.hot.rootDocument.createElement('DIV'));\n    /**\n     * @type {HTMLElement}\n     */\n    _classPrivateFieldInitSpec(this, _guide, this.hot.rootDocument.createElement('DIV'));\n    /**\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _pressed, false);\n    /**\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _isTriggeredByRMB, false);\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _dblclick, 0);\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _autoresizeTimeout, null);\n    /**\n     * PhysicalIndexToValueMap to keep and track widths for physical row indexes.\n     *\n     * @type {PhysicalIndexToValueMap}\n     */\n    _classPrivateFieldInitSpec(this, _rowHeightsMap, void 0);\n    /**\n     * Private pool to save configuration from updateSettings.\n     *\n     * @type {object}\n     */\n    _classPrivateFieldInitSpec(this, _config, void 0);\n    addClass(_classPrivateFieldGet(_handle, this), 'manualRowResizer');\n    addClass(_classPrivateFieldGet(_guide, this), 'manualRowResizerGuide');\n  }\n\n  /**\n   * @private\n   * @returns {string}\n   */\n  get inlineDir() {\n    return this.hot.isRtl() ? 'right' : 'left';\n  }\n\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link ManualRowResize#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    if (this.enabled) {\n      return;\n    }\n    _classPrivateFieldSet(_rowHeightsMap, this, new IndexToValueMap());\n    _classPrivateFieldGet(_rowHeightsMap, this).addLocalHook('init', () => _assertClassBrand(_ManualRowResize_brand, this, _onMapInit).call(this));\n    this.hot.rowIndexMapper.registerMap(this.pluginName, _classPrivateFieldGet(_rowHeightsMap, this));\n    this.addHook('modifyRowHeight', (height, row) => _assertClassBrand(_ManualRowResize_brand, this, _onModifyRowHeight).call(this, height, row));\n    this.bindEvents();\n    super.enablePlugin();\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:\n   *  - [`manualRowResize`](@/api/options.md#manualrowresize)\n   */\n  updatePlugin() {\n    this.disablePlugin();\n    this.enablePlugin();\n    super.updatePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    _classPrivateFieldSet(_config, this, _classPrivateFieldGet(_rowHeightsMap, this).getValues());\n    this.hot.rowIndexMapper.unregisterMap(this.pluginName);\n    super.disablePlugin();\n  }\n\n  /**\n   * Saves the current sizes using the persistentState plugin (the {@link Options#persistentState} option has to be\n   * enabled).\n   *\n   * @fires Hooks#persistentStateSave\n   */\n  saveManualRowHeights() {\n    this.hot.runHooks('persistentStateSave', PERSISTENT_STATE_KEY, _classPrivateFieldGet(_rowHeightsMap, this).getValues());\n  }\n\n  /**\n   * Loads the previously saved sizes using the persistentState plugin (the {@link Options#persistentState} option\n   * has be enabled).\n   *\n   * @returns {Array}\n   * @fires Hooks#persistentStateLoad\n   */\n  loadManualRowHeights() {\n    const storedState = {};\n    this.hot.runHooks('persistentStateLoad', PERSISTENT_STATE_KEY, storedState);\n    return storedState.value;\n  }\n\n  /**\n   * Sets the new height for specified row index.\n   *\n   * @param {number} row Visual row index.\n   * @param {number} height Row height.\n   * @returns {number} Returns new height.\n   */\n  setManualSize(row, height) {\n    const physicalRow = this.hot.toPhysicalRow(row);\n    const newHeight = Math.max(height, DEFAULT_ROW_HEIGHT);\n    _classPrivateFieldGet(_rowHeightsMap, this).setValueAtIndex(physicalRow, newHeight);\n    return newHeight;\n  }\n\n  /**\n   * Returns the last desired row height set manually with the resize handle.\n   *\n   * @returns {number} The last desired row height.\n   */\n  getLastDesiredRowHeight() {\n    return _classPrivateFieldGet(_currentHeight, this);\n  }\n\n  /**\n   * Sets the resize handle position.\n   *\n   * @private\n   * @param {HTMLCellElement} TH TH HTML element.\n   */\n  setupHandlePosition(TH) {\n    _classPrivateFieldSet(_currentTH, this, TH);\n    const {\n      view\n    } = this.hot;\n    const {\n      _wt: wt\n    } = view;\n    const cellCoords = wt.wtTable.getCoords(_classPrivateFieldGet(_currentTH, this));\n    const row = cellCoords.row;\n\n    // Ignore row headers.\n    if (row < 0) {\n      return;\n    }\n    const headerWidth = outerWidth(_classPrivateFieldGet(_currentTH, this));\n    const box = _classPrivateFieldGet(_currentTH, this).getBoundingClientRect();\n    // Read \"fixedRowsTop\" and \"fixedRowsBottom\" through the Walkontable as in that context, the fixed\n    // rows are modified (reduced by the number of hidden rows) by TableView module.\n    const fixedRowTop = row < wt.getSetting('fixedRowsTop');\n    const fixedRowBottom = row >= view.countNotHiddenRowIndexes(0, 1) - wt.getSetting('fixedRowsBottom');\n    let relativeHeaderPosition;\n    if (fixedRowTop) {\n      relativeHeaderPosition = wt.wtOverlays.topInlineStartCornerOverlay.getRelativeCellPosition(_classPrivateFieldGet(_currentTH, this), cellCoords.row, cellCoords.col);\n    } else if (fixedRowBottom) {\n      relativeHeaderPosition = wt.wtOverlays.bottomInlineStartCornerOverlay.getRelativeCellPosition(_classPrivateFieldGet(_currentTH, this), cellCoords.row, cellCoords.col);\n    }\n\n    // If the TH is not a child of the top-left/bottom-left overlay, recalculate using\n    // the left overlay - as this overlay contains the rest of the headers.\n    if (!relativeHeaderPosition) {\n      relativeHeaderPosition = wt.wtOverlays.inlineStartOverlay.getRelativeCellPosition(_classPrivateFieldGet(_currentTH, this), cellCoords.row, cellCoords.col);\n    }\n    _classPrivateFieldSet(_currentRow, this, this.hot.rowIndexMapper.getVisualFromRenderableIndex(row));\n    _classPrivateFieldSet(_selectedRows, this, []);\n    const isFullRowSelected = this.hot.selection.isSelectedByCorner() || this.hot.selection.isSelectedByRowHeader();\n    if (this.hot.selection.isSelected() && isFullRowSelected) {\n      const selectionRanges = this.hot.getSelectedRange();\n      arrayEach(selectionRanges, selectionRange => {\n        const fromRow = selectionRange.getTopStartCorner().row;\n        const toRow = selectionRange.getBottomStartCorner().row;\n\n        // Add every selected row for resize action.\n        rangeEach(fromRow, toRow, rowIndex => {\n          if (!_classPrivateFieldGet(_selectedRows, this).includes(rowIndex)) {\n            _classPrivateFieldGet(_selectedRows, this).push(rowIndex);\n          }\n        });\n      });\n    }\n\n    // Resizing element beyond the current selection (also when there is no selection).\n    if (!_classPrivateFieldGet(_selectedRows, this).includes(_classPrivateFieldGet(_currentRow, this))) {\n      _classPrivateFieldSet(_selectedRows, this, [_classPrivateFieldGet(_currentRow, this)]);\n    }\n    _classPrivateFieldSet(_startOffset, this, relativeHeaderPosition.top - 6);\n    _classPrivateFieldSet(_startHeight, this, parseInt(box.height, 10));\n    _classPrivateFieldGet(_handle, this).style.top = `${_classPrivateFieldGet(_startOffset, this) + _classPrivateFieldGet(_startHeight, this)}px`;\n    _classPrivateFieldGet(_handle, this).style[this.inlineDir] = `${relativeHeaderPosition.start}px`;\n    _classPrivateFieldGet(_handle, this).style.width = `${headerWidth}px`;\n    this.hot.rootElement.appendChild(_classPrivateFieldGet(_handle, this));\n  }\n\n  /**\n   * Refresh the resize handle position.\n   *\n   * @private\n   */\n  refreshHandlePosition() {\n    _classPrivateFieldGet(_handle, this).style.top = `${_classPrivateFieldGet(_startOffset, this) + _classPrivateFieldGet(_currentHeight, this)}px`;\n  }\n\n  /**\n   * Sets the resize guide position.\n   *\n   * @private\n   */\n  setupGuidePosition() {\n    const handleWidth = parseInt(outerWidth(_classPrivateFieldGet(_handle, this)), 10);\n    const handleEndPosition = parseInt(_classPrivateFieldGet(_handle, this).style[this.inlineDir], 10) + handleWidth;\n    const maximumVisibleElementWidth = parseInt(this.hot.view.maximumVisibleElementWidth(0), 10);\n    addClass(_classPrivateFieldGet(_handle, this), 'active');\n    addClass(_classPrivateFieldGet(_guide, this), 'active');\n    _classPrivateFieldGet(_guide, this).style.top = _classPrivateFieldGet(_handle, this).style.top;\n    _classPrivateFieldGet(_guide, this).style[this.inlineDir] = `${handleEndPosition}px`;\n    _classPrivateFieldGet(_guide, this).style.width = `${maximumVisibleElementWidth - handleWidth}px`;\n    this.hot.rootElement.appendChild(_classPrivateFieldGet(_guide, this));\n  }\n\n  /**\n   * Refresh the resize guide position.\n   *\n   * @private\n   */\n  refreshGuidePosition() {\n    _classPrivateFieldGet(_guide, this).style.top = _classPrivateFieldGet(_handle, this).style.top;\n  }\n\n  /**\n   * Hides both the resize handle and resize guide.\n   *\n   * @private\n   */\n  hideHandleAndGuide() {\n    removeClass(_classPrivateFieldGet(_handle, this), 'active');\n    removeClass(_classPrivateFieldGet(_guide, this), 'active');\n  }\n\n  /**\n   * Checks if provided element is considered as a row header.\n   *\n   * @private\n   * @param {HTMLElement} element HTML element.\n   * @returns {boolean}\n   */\n  checkIfRowHeader(element) {\n    const tbody = closest(element, ['TBODY'], this.hot.rootElement);\n    const {\n      inlineStartOverlay,\n      topInlineStartCornerOverlay,\n      bottomInlineStartCornerOverlay\n    } = this.hot.view._wt.wtOverlays;\n    return [inlineStartOverlay.clone.wtTable.TBODY, topInlineStartCornerOverlay.clone.wtTable.TBODY, bottomInlineStartCornerOverlay.clone.wtTable.TBODY].includes(tbody);\n  }\n\n  /**\n   * Gets the TH element from the provided element.\n   *\n   * @private\n   * @param {HTMLElement} element HTML element.\n   * @returns {HTMLElement}\n   */\n  getClosestTHParent(element) {\n    if (element.tagName !== 'TABLE') {\n      if (element.tagName === 'TH') {\n        return element;\n      }\n      return this.getClosestTHParent(element.parentNode);\n    }\n    return null;\n  }\n\n  /**\n   * Returns the actual height for the provided row index.\n   *\n   * @private\n   * @param {number} row Visual row index.\n   * @returns {number} Actual row height.\n   */\n  getActualRowHeight(row) {\n    // TODO: this should utilize `this.hot.getRowHeight` after it's fixed and working properly.\n    const walkontableHeight = this.hot.view._wt.wtTable.getRowHeight(row);\n    if (walkontableHeight !== undefined && _classPrivateFieldGet(_newSize, this) < walkontableHeight) {\n      return walkontableHeight;\n    }\n    return _classPrivateFieldGet(_newSize, this);\n  }\n  /**\n   * Auto-size row after doubleclick - callback.\n   *\n   * @private\n   * @fires Hooks#beforeRowResize\n   * @fires Hooks#afterRowResize\n   */\n  afterMouseDownTimeout() {\n    const render = () => {\n      this.hot.forceFullRender = true;\n      this.hot.view.render(); // updates all\n      this.hot.view.adjustElementsSize();\n    };\n    const resize = (row, forceRender) => {\n      const hookNewSize = this.hot.runHooks('beforeRowResize', this.getActualRowHeight(row), row, true);\n      if (hookNewSize !== undefined) {\n        _classPrivateFieldSet(_newSize, this, hookNewSize);\n      }\n      this.setManualSize(row, _classPrivateFieldGet(_newSize, this)); // double click sets auto row size\n\n      this.hot.runHooks('afterRowResize', this.getActualRowHeight(row), row, true);\n      if (forceRender) {\n        render();\n      }\n    };\n    if (_classPrivateFieldGet(_dblclick, this) >= 2) {\n      const selectedRowsLength = _classPrivateFieldGet(_selectedRows, this).length;\n      if (selectedRowsLength > 1) {\n        arrayEach(_classPrivateFieldGet(_selectedRows, this), selectedRow => {\n          resize(selectedRow);\n        });\n        render();\n      } else {\n        arrayEach(_classPrivateFieldGet(_selectedRows, this), selectedRow => {\n          resize(selectedRow, true);\n        });\n      }\n    }\n    _classPrivateFieldSet(_dblclick, this, 0);\n    _classPrivateFieldSet(_autoresizeTimeout, this, null);\n  }\n\n  /**\n   * 'mousedown' event callback.\n   *\n   * @param {MouseEvent} event The mouse event.\n   */\n\n  /**\n   * Binds the mouse events.\n   *\n   * @private\n   */\n  bindEvents() {\n    const {\n      rootElement,\n      rootWindow\n    } = this.hot;\n    this.eventManager.addEventListener(rootElement, 'mouseover', e => _assertClassBrand(_ManualRowResize_brand, this, _onMouseOver).call(this, e));\n    this.eventManager.addEventListener(rootElement, 'mousedown', e => _assertClassBrand(_ManualRowResize_brand, this, _onMouseDown).call(this, e));\n    this.eventManager.addEventListener(rootWindow, 'mousemove', e => _assertClassBrand(_ManualRowResize_brand, this, _onMouseMove).call(this, e));\n    this.eventManager.addEventListener(rootWindow, 'mouseup', () => _assertClassBrand(_ManualRowResize_brand, this, _onMouseUp).call(this));\n    this.eventManager.addEventListener(_classPrivateFieldGet(_handle, this), 'contextmenu', () => _assertClassBrand(_ManualRowResize_brand, this, _onContextMenu).call(this));\n  }\n\n  /**\n   * Modifies the provided row height, based on the plugin settings.\n   *\n   * @param {number} height Row height.\n   * @param {number} row Visual row index.\n   * @returns {number}\n   */\n\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    super.destroy();\n  }\n}\nfunction _onMouseOver(event) {\n  // Workaround for #6926 - if the `event.target` is temporarily detached, we can skip this callback and wait for\n  // the next `onmouseover`.\n  if (isDetached(event.target)) {\n    return;\n  }\n\n  // A \"mouseover\" action is triggered right after executing \"contextmenu\" event. It should be ignored.\n  if (_classPrivateFieldGet(_isTriggeredByRMB, this) === true) {\n    return;\n  }\n  if (this.checkIfRowHeader(event.target)) {\n    const th = this.getClosestTHParent(event.target);\n    if (th) {\n      if (!_classPrivateFieldGet(_pressed, this)) {\n        this.setupHandlePosition(th);\n      }\n    }\n  }\n}\nfunction _onMouseDown(event) {\n  if (hasClass(event.target, 'manualRowResizer')) {\n    this.setupHandlePosition(_classPrivateFieldGet(_currentTH, this));\n    this.setupGuidePosition();\n    _classPrivateFieldSet(_pressed, this, true);\n    if (_classPrivateFieldGet(_autoresizeTimeout, this) === null) {\n      _classPrivateFieldSet(_autoresizeTimeout, this, setTimeout(() => this.afterMouseDownTimeout(), 500));\n      this.hot._registerTimeout(_classPrivateFieldGet(_autoresizeTimeout, this));\n    }\n    _classPrivateFieldSet(_dblclick, this, _classPrivateFieldGet(_dblclick, this) + 1);\n    _classPrivateFieldSet(_startY, this, event.pageY);\n    _classPrivateFieldSet(_newSize, this, _classPrivateFieldGet(_startHeight, this));\n  }\n}\n/**\n * 'mousemove' event callback - refresh the handle and guide positions, cache the new row height.\n *\n * @param {MouseEvent} event The mouse event.\n */\nfunction _onMouseMove(event) {\n  if (_classPrivateFieldGet(_pressed, this)) {\n    _classPrivateFieldSet(_currentHeight, this, _classPrivateFieldGet(_startHeight, this) + (event.pageY - _classPrivateFieldGet(_startY, this)));\n    arrayEach(_classPrivateFieldGet(_selectedRows, this), selectedRow => {\n      _classPrivateFieldSet(_newSize, this, this.setManualSize(selectedRow, _classPrivateFieldGet(_currentHeight, this)));\n    });\n    this.refreshHandlePosition();\n    this.refreshGuidePosition();\n  }\n}\n/**\n * 'mouseup' event callback - apply the row resizing.\n *\n * @fires Hooks#beforeRowResize\n * @fires Hooks#afterRowResize\n */\nfunction _onMouseUp() {\n  const render = () => {\n    this.hot.forceFullRender = true;\n    this.hot.view.render(); // updates all\n    this.hot.view.adjustElementsSize();\n  };\n  const runHooks = (row, forceRender) => {\n    this.hot.runHooks('beforeRowResize', this.getActualRowHeight(row), row, false);\n    if (forceRender) {\n      render();\n    }\n    this.saveManualRowHeights();\n    this.hot.runHooks('afterRowResize', this.getActualRowHeight(row), row, false);\n  };\n  if (_classPrivateFieldGet(_pressed, this)) {\n    this.hideHandleAndGuide();\n    _classPrivateFieldSet(_pressed, this, false);\n    if (_classPrivateFieldGet(_newSize, this) !== _classPrivateFieldGet(_startHeight, this)) {\n      const selectedRowsLength = _classPrivateFieldGet(_selectedRows, this).length;\n      if (selectedRowsLength > 1) {\n        arrayEach(_classPrivateFieldGet(_selectedRows, this), selectedRow => {\n          runHooks(selectedRow);\n        });\n        render();\n      } else {\n        arrayEach(_classPrivateFieldGet(_selectedRows, this), selectedRow => {\n          runHooks(selectedRow, true);\n        });\n      }\n    }\n    this.setupHandlePosition(_classPrivateFieldGet(_currentTH, this));\n  }\n}\n/**\n * Callback for \"contextmenu\" event triggered on element showing move handle. It removes handle and guide elements.\n */\nfunction _onContextMenu() {\n  this.hideHandleAndGuide();\n  this.hot.rootElement.removeChild(_classPrivateFieldGet(_handle, this));\n  this.hot.rootElement.removeChild(_classPrivateFieldGet(_guide, this));\n  _classPrivateFieldSet(_pressed, this, false);\n  _classPrivateFieldSet(_isTriggeredByRMB, this, true);\n\n  // There is thrown \"mouseover\" event right after opening a context menu. This flag inform that handle\n  // shouldn't be drawn just after removing it.\n  this.hot._registerImmediate(() => {\n    _classPrivateFieldSet(_isTriggeredByRMB, this, false);\n  });\n}\nfunction _onModifyRowHeight(height, row) {\n  let newHeight = height;\n  if (this.enabled) {\n    const physicalRow = this.hot.toPhysicalRow(row);\n    const rowHeight = _classPrivateFieldGet(_rowHeightsMap, this).getValueAtIndex(physicalRow);\n    if (this.hot.getSettings()[PLUGIN_KEY] && rowHeight) {\n      newHeight = rowHeight;\n    }\n  }\n  return newHeight;\n}\n/**\n * Callback to call on map's `init` local hook.\n */\nfunction _onMapInit() {\n  const initialSetting = this.hot.getSettings()[PLUGIN_KEY];\n  const loadedManualRowHeights = this.loadManualRowHeights();\n  this.hot.batchExecution(() => {\n    if (typeof loadedManualRowHeights !== 'undefined') {\n      loadedManualRowHeights.forEach((height, index) => {\n        _classPrivateFieldGet(_rowHeightsMap, this).setValueAtIndex(index, height);\n      });\n    } else if (Array.isArray(initialSetting)) {\n      initialSetting.forEach((height, index) => {\n        _classPrivateFieldGet(_rowHeightsMap, this).setValueAtIndex(index, height);\n      });\n      _classPrivateFieldSet(_config, this, initialSetting);\n    } else if (initialSetting === true && Array.isArray(_classPrivateFieldGet(_config, this))) {\n      _classPrivateFieldGet(_config, this).forEach((height, index) => {\n        _classPrivateFieldGet(_rowHeightsMap, this).setValueAtIndex(index, height);\n      });\n    }\n  }, true);\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}