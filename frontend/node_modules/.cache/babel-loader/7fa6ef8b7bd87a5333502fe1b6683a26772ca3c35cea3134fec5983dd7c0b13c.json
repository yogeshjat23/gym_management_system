{"ast":null,"code":"import { isFunction } from \"../../helpers/function.mjs\";\nconst DEFAULT_ERROR_ID_EXISTS = id => `The id '${id}' is already declared in a map.`;\n\n/**\n * @typedef {object} UniqueMap\n * @property {Function} addItem Adds a new item to the unique map.\n * @property {Function} clear Clears the map.\n * @property {Function} getId Returns ID for the passed item.\n * @property {Function} getItem Gets item from the passed ID.\n * @property {Function} getItems Gets all items from the map.\n * @property {Function} hasItem Verifies if the passed ID exists in a map.\n * @property {Function} removeItem Removes item from the passed id if exists.\n */\n/**\n * Creates a new unique map.\n *\n * @param {object} config The config for priority queue.\n * @param {Function} config.errorIdExists The function to generate custom message if ID is already taken.\n * @returns {UniqueMap}\n */\nexport function createUniqueMap() {\n  let {\n    errorIdExists\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const uniqueMap = new Map();\n  errorIdExists = isFunction(errorIdExists) ? errorIdExists : DEFAULT_ERROR_ID_EXISTS;\n\n  /**\n   * Adds a new item to the unique map. Throws error if `id` is already added.\n   *\n   * @param {*} id The ID of the adding item.\n   * @param {*} item The adding item.\n   */\n  function addItem(id, item) {\n    if (hasItem(id)) {\n      throw new Error(errorIdExists(id));\n    }\n    uniqueMap.set(id, item);\n  }\n\n  /**\n   * Removes item from the passed id if exists.\n   *\n   * @param {*} id The ID to remove.\n   * @returns {boolean}\n   */\n  function removeItem(id) {\n    return uniqueMap.delete(id);\n  }\n\n  /**\n   * Clears the map.\n   */\n  function clear() {\n    uniqueMap.clear();\n  }\n\n  /**\n   * Returns ID for the passed item.\n   *\n   * @param {*} item The item of the getting ID.\n   * @returns {*}\n   */\n  function getId(item) {\n    const [itemId] = getItems().find(_ref => {\n      let [id, element] = _ref;\n      if (item === element) {\n        return id;\n      }\n      return false;\n    }) || [null];\n    return itemId;\n  }\n\n  /**\n   * Returns item from the passed ID.\n   *\n   * @param {*} id The ID of the getting item.\n   * @returns {*}\n   */\n  function getItem(id) {\n    return uniqueMap.get(id);\n  }\n\n  /**\n   * Gets all items from the map.\n   *\n   * @returns {Array}\n   */\n  function getItems() {\n    return [...uniqueMap];\n  }\n\n  /**\n   * Verifies if the passed ID exists in a map.\n   *\n   * @param {*} id The ID to check if registered.\n   * @returns {boolean}\n   */\n  function hasItem(id) {\n    return uniqueMap.has(id);\n  }\n  return {\n    addItem,\n    clear,\n    getId,\n    getItem,\n    getItems,\n    hasItem,\n    removeItem\n  };\n}","map":{"version":3,"names":["isFunction","DEFAULT_ERROR_ID_EXISTS","id","createUniqueMap","errorIdExists","arguments","length","undefined","uniqueMap","Map","addItem","item","hasItem","Error","set","removeItem","delete","clear","getId","itemId","getItems","find","_ref","element","getItem","get","has"],"sources":["D:/gym-project/frontend/node_modules/handsontable/utils/dataStructures/uniqueMap.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nimport { isFunction } from \"../../helpers/function.mjs\";\nconst DEFAULT_ERROR_ID_EXISTS = id => `The id '${id}' is already declared in a map.`;\n\n/**\n * @typedef {object} UniqueMap\n * @property {Function} addItem Adds a new item to the unique map.\n * @property {Function} clear Clears the map.\n * @property {Function} getId Returns ID for the passed item.\n * @property {Function} getItem Gets item from the passed ID.\n * @property {Function} getItems Gets all items from the map.\n * @property {Function} hasItem Verifies if the passed ID exists in a map.\n * @property {Function} removeItem Removes item from the passed id if exists.\n */\n/**\n * Creates a new unique map.\n *\n * @param {object} config The config for priority queue.\n * @param {Function} config.errorIdExists The function to generate custom message if ID is already taken.\n * @returns {UniqueMap}\n */\nexport function createUniqueMap() {\n  let {\n    errorIdExists\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const uniqueMap = new Map();\n  errorIdExists = isFunction(errorIdExists) ? errorIdExists : DEFAULT_ERROR_ID_EXISTS;\n\n  /**\n   * Adds a new item to the unique map. Throws error if `id` is already added.\n   *\n   * @param {*} id The ID of the adding item.\n   * @param {*} item The adding item.\n   */\n  function addItem(id, item) {\n    if (hasItem(id)) {\n      throw new Error(errorIdExists(id));\n    }\n    uniqueMap.set(id, item);\n  }\n\n  /**\n   * Removes item from the passed id if exists.\n   *\n   * @param {*} id The ID to remove.\n   * @returns {boolean}\n   */\n  function removeItem(id) {\n    return uniqueMap.delete(id);\n  }\n\n  /**\n   * Clears the map.\n   */\n  function clear() {\n    uniqueMap.clear();\n  }\n\n  /**\n   * Returns ID for the passed item.\n   *\n   * @param {*} item The item of the getting ID.\n   * @returns {*}\n   */\n  function getId(item) {\n    const [itemId] = getItems().find(_ref => {\n      let [id, element] = _ref;\n      if (item === element) {\n        return id;\n      }\n      return false;\n    }) || [null];\n    return itemId;\n  }\n\n  /**\n   * Returns item from the passed ID.\n   *\n   * @param {*} id The ID of the getting item.\n   * @returns {*}\n   */\n  function getItem(id) {\n    return uniqueMap.get(id);\n  }\n\n  /**\n   * Gets all items from the map.\n   *\n   * @returns {Array}\n   */\n  function getItems() {\n    return [...uniqueMap];\n  }\n\n  /**\n   * Verifies if the passed ID exists in a map.\n   *\n   * @param {*} id The ID to check if registered.\n   * @returns {boolean}\n   */\n  function hasItem(id) {\n    return uniqueMap.has(id);\n  }\n  return {\n    addItem,\n    clear,\n    getId,\n    getItem,\n    getItems,\n    hasItem,\n    removeItem\n  };\n}"],"mappings":"AACA,SAASA,UAAU,QAAQ,4BAA4B;AACvD,MAAMC,uBAAuB,GAAGC,EAAE,IAAI,WAAWA,EAAE,iCAAiC;;AAEpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAeA,CAAA,EAAG;EAChC,IAAI;IACFC;EACF,CAAC,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAC1E,MAAMG,SAAS,GAAG,IAAIC,GAAG,CAAC,CAAC;EAC3BL,aAAa,GAAGJ,UAAU,CAACI,aAAa,CAAC,GAAGA,aAAa,GAAGH,uBAAuB;;EAEnF;AACF;AACA;AACA;AACA;AACA;EACE,SAASS,OAAOA,CAACR,EAAE,EAAES,IAAI,EAAE;IACzB,IAAIC,OAAO,CAACV,EAAE,CAAC,EAAE;MACf,MAAM,IAAIW,KAAK,CAACT,aAAa,CAACF,EAAE,CAAC,CAAC;IACpC;IACAM,SAAS,CAACM,GAAG,CAACZ,EAAE,EAAES,IAAI,CAAC;EACzB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,SAASI,UAAUA,CAACb,EAAE,EAAE;IACtB,OAAOM,SAAS,CAACQ,MAAM,CAACd,EAAE,CAAC;EAC7B;;EAEA;AACF;AACA;EACE,SAASe,KAAKA,CAAA,EAAG;IACfT,SAAS,CAACS,KAAK,CAAC,CAAC;EACnB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,SAASC,KAAKA,CAACP,IAAI,EAAE;IACnB,MAAM,CAACQ,MAAM,CAAC,GAAGC,QAAQ,CAAC,CAAC,CAACC,IAAI,CAACC,IAAI,IAAI;MACvC,IAAI,CAACpB,EAAE,EAAEqB,OAAO,CAAC,GAAGD,IAAI;MACxB,IAAIX,IAAI,KAAKY,OAAO,EAAE;QACpB,OAAOrB,EAAE;MACX;MACA,OAAO,KAAK;IACd,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;IACZ,OAAOiB,MAAM;EACf;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,SAASK,OAAOA,CAACtB,EAAE,EAAE;IACnB,OAAOM,SAAS,CAACiB,GAAG,CAACvB,EAAE,CAAC;EAC1B;;EAEA;AACF;AACA;AACA;AACA;EACE,SAASkB,QAAQA,CAAA,EAAG;IAClB,OAAO,CAAC,GAAGZ,SAAS,CAAC;EACvB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,SAASI,OAAOA,CAACV,EAAE,EAAE;IACnB,OAAOM,SAAS,CAACkB,GAAG,CAACxB,EAAE,CAAC;EAC1B;EACA,OAAO;IACLQ,OAAO;IACPO,KAAK;IACLC,KAAK;IACLM,OAAO;IACPJ,QAAQ;IACRR,OAAO;IACPG;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}