{"ast":null,"code":"import { createFocusNavigator } from \"./focusNavigator.mjs\";\nimport { SelectUI } from \"../ui/select.mjs\";\nimport { BaseUI } from \"../ui/_base.mjs\";\nimport { LinkUI } from \"../ui/link.mjs\";\nconst SHORTCUTS_MENU_CONTEXT = 'filters';\n\n/**\n * @typedef MenuFocusNavigator\n * @property {function(number): void} setCurrentPage Sets the current index of the selected focus.\n * @property {function(): number} getCurrentPage Gets the index of currently focus element.\n * @property {function(): void} toFirstItem Move the focus index to the first element in the list.\n * @property {function(): void} toLastItem Move the focus index to the last element in the list.\n * @property {function(): void} toNextItem Move the focus index to the next element in the list.\n * @property {function(): void} toPreviousItem Move the focus index to the previous element in the list.\n * @property {function(): void} clear Clear the internal state of the navigator.\n * @property {function(): void} listen Activate the navigator by listening the keyboard shortcuts.\n */\n/**\n * Creates navigator controller for filter subcomponents in the menu.\n *\n * @param {Menu} mainMenu The main Menu instance.\n * @param {BaseUI[]} menuItems The list of the component's elements to paginate to.\n * @returns {Paginator}\n */\nexport function createMenuFocusController(mainMenu, menuItems) {\n  /**\n   * @type {number} The last selected menu item (before clearing the the menu state after going\n   * into the focus mode triggered by the TAB or SHIFT+TAB keys).\n   */\n  let lastSelectedMenuItem = -1;\n  const focusNavigator = createFocusNavigator(menuItems);\n  const updateNavigatorPosition = element => () => {\n    if (mainMenu.isOpened()) {\n      mainMenu.getKeyboardShortcutsCtrl().listen(SHORTCUTS_MENU_CONTEXT);\n    }\n    focusNavigator.setCurrentPage(menuItems.indexOf(element));\n  };\n\n  // update navigator position (internal state) to element that was recently clicked or focused\n  menuItems.forEach(element => {\n    if (element instanceof BaseUI) {\n      element.addLocalHook('click', updateNavigatorPosition(element));\n      element.addLocalHook('focus', updateNavigatorPosition(element));\n      element.addLocalHook('afterClose', updateNavigatorPosition(element));\n    }\n  });\n  mainMenu.addLocalHook('afterSelectionChange', selectedItem => {\n    if (!selectedItem.key.startsWith('filter_')) {\n      focusNavigator.clear();\n    }\n  });\n\n  /**\n   * Extends the menu and submenus with new keyboard shortcuts.\n   *\n   * @param {*} menu The menu (as main menu or submenu) instance.\n   */\n  function addKeyboardShortcuts(menu) {\n    const mainMenuShortcutsCtrl = mainMenu.getKeyboardShortcutsCtrl();\n    const currentMenuShortcutsCtrl = menu.getKeyboardShortcutsCtrl();\n    focusNavigator.clear();\n    currentMenuShortcutsCtrl.addCustomShortcuts([{\n      keys: [['Tab'], ['Shift', 'Tab']],\n      forwardToContext: mainMenuShortcutsCtrl.getContext(SHORTCUTS_MENU_CONTEXT),\n      callback: () => {\n        if (menu.isSubMenu()) {\n          menu.close();\n        }\n        mainMenuShortcutsCtrl.listen(SHORTCUTS_MENU_CONTEXT);\n      }\n    }]);\n    if (menu.isSubMenu()) {\n      return;\n    }\n    mainMenuShortcutsCtrl.addCustomShortcuts([{\n      keys: [['Tab'], ['Shift', 'Tab']],\n      callback: event => {\n        const menuNavigator = mainMenu.getNavigator();\n        if (menuNavigator.getCurrentPage() > -1) {\n          lastSelectedMenuItem = menuNavigator.getCurrentPage();\n        }\n        menuNavigator.clear();\n        if (event.shiftKey) {\n          focusNavigator.toPreviousItem();\n        } else {\n          focusNavigator.toNextItem();\n        }\n      }\n    }, {\n      keys: [['Escape']],\n      callback: () => {\n        mainMenu.close();\n      }\n    }, {\n      keys: [['Enter'], ['Space']],\n      preventDefault: false,\n      callback: event => {\n        const element = menuItems[focusNavigator.getCurrentPage()];\n        if (element instanceof SelectUI) {\n          element.openOptions();\n          event.preventDefault();\n        }\n        if (element instanceof LinkUI) {\n          element.activate();\n          event.preventDefault();\n        }\n        if (!(element instanceof BaseUI)) {\n          event.preventDefault();\n        }\n      }\n    }], SHORTCUTS_MENU_CONTEXT);\n  }\n  mainMenu.addLocalHook('afterSubmenuOpen', addKeyboardShortcuts);\n  mainMenu.addLocalHook('afterOpen', addKeyboardShortcuts);\n\n  /**\n   * Focuses the menu and switches its shortcut context to that one which controls\n   * the focus navigation.\n   */\n  function listen() {\n    mainMenu.focus();\n    mainMenu.getKeyboardShortcutsCtrl().listen(SHORTCUTS_MENU_CONTEXT);\n  }\n\n  /**\n   * Retrieves the last selected menu item (before clearing the state after going into the focus mode).\n   *\n   * @returns {number} The last selected menu item.\n   */\n  function getLastMenuPage() {\n    return lastSelectedMenuItem;\n  }\n  return {\n    ...focusNavigator,\n    listen,\n    getLastMenuPage\n  };\n}","map":{"version":3,"names":["createFocusNavigator","SelectUI","BaseUI","LinkUI","SHORTCUTS_MENU_CONTEXT","createMenuFocusController","mainMenu","menuItems","lastSelectedMenuItem","focusNavigator","updateNavigatorPosition","element","isOpened","getKeyboardShortcutsCtrl","listen","setCurrentPage","indexOf","forEach","addLocalHook","selectedItem","key","startsWith","clear","addKeyboardShortcuts","menu","mainMenuShortcutsCtrl","currentMenuShortcutsCtrl","addCustomShortcuts","keys","forwardToContext","getContext","callback","isSubMenu","close","event","menuNavigator","getNavigator","getCurrentPage","shiftKey","toPreviousItem","toNextItem","preventDefault","openOptions","activate","focus","getLastMenuPage"],"sources":["D:/gym-project/frontend/node_modules/handsontable/plugins/filters/menu/focusController.mjs"],"sourcesContent":["import { createFocusNavigator } from \"./focusNavigator.mjs\";\nimport { SelectUI } from \"../ui/select.mjs\";\nimport { BaseUI } from \"../ui/_base.mjs\";\nimport { LinkUI } from \"../ui/link.mjs\";\nconst SHORTCUTS_MENU_CONTEXT = 'filters';\n\n/**\n * @typedef MenuFocusNavigator\n * @property {function(number): void} setCurrentPage Sets the current index of the selected focus.\n * @property {function(): number} getCurrentPage Gets the index of currently focus element.\n * @property {function(): void} toFirstItem Move the focus index to the first element in the list.\n * @property {function(): void} toLastItem Move the focus index to the last element in the list.\n * @property {function(): void} toNextItem Move the focus index to the next element in the list.\n * @property {function(): void} toPreviousItem Move the focus index to the previous element in the list.\n * @property {function(): void} clear Clear the internal state of the navigator.\n * @property {function(): void} listen Activate the navigator by listening the keyboard shortcuts.\n */\n/**\n * Creates navigator controller for filter subcomponents in the menu.\n *\n * @param {Menu} mainMenu The main Menu instance.\n * @param {BaseUI[]} menuItems The list of the component's elements to paginate to.\n * @returns {Paginator}\n */\nexport function createMenuFocusController(mainMenu, menuItems) {\n  /**\n   * @type {number} The last selected menu item (before clearing the the menu state after going\n   * into the focus mode triggered by the TAB or SHIFT+TAB keys).\n   */\n  let lastSelectedMenuItem = -1;\n  const focusNavigator = createFocusNavigator(menuItems);\n  const updateNavigatorPosition = element => () => {\n    if (mainMenu.isOpened()) {\n      mainMenu.getKeyboardShortcutsCtrl().listen(SHORTCUTS_MENU_CONTEXT);\n    }\n    focusNavigator.setCurrentPage(menuItems.indexOf(element));\n  };\n\n  // update navigator position (internal state) to element that was recently clicked or focused\n  menuItems.forEach(element => {\n    if (element instanceof BaseUI) {\n      element.addLocalHook('click', updateNavigatorPosition(element));\n      element.addLocalHook('focus', updateNavigatorPosition(element));\n      element.addLocalHook('afterClose', updateNavigatorPosition(element));\n    }\n  });\n  mainMenu.addLocalHook('afterSelectionChange', selectedItem => {\n    if (!selectedItem.key.startsWith('filter_')) {\n      focusNavigator.clear();\n    }\n  });\n\n  /**\n   * Extends the menu and submenus with new keyboard shortcuts.\n   *\n   * @param {*} menu The menu (as main menu or submenu) instance.\n   */\n  function addKeyboardShortcuts(menu) {\n    const mainMenuShortcutsCtrl = mainMenu.getKeyboardShortcutsCtrl();\n    const currentMenuShortcutsCtrl = menu.getKeyboardShortcutsCtrl();\n    focusNavigator.clear();\n    currentMenuShortcutsCtrl.addCustomShortcuts([{\n      keys: [['Tab'], ['Shift', 'Tab']],\n      forwardToContext: mainMenuShortcutsCtrl.getContext(SHORTCUTS_MENU_CONTEXT),\n      callback: () => {\n        if (menu.isSubMenu()) {\n          menu.close();\n        }\n        mainMenuShortcutsCtrl.listen(SHORTCUTS_MENU_CONTEXT);\n      }\n    }]);\n    if (menu.isSubMenu()) {\n      return;\n    }\n    mainMenuShortcutsCtrl.addCustomShortcuts([{\n      keys: [['Tab'], ['Shift', 'Tab']],\n      callback: event => {\n        const menuNavigator = mainMenu.getNavigator();\n        if (menuNavigator.getCurrentPage() > -1) {\n          lastSelectedMenuItem = menuNavigator.getCurrentPage();\n        }\n        menuNavigator.clear();\n        if (event.shiftKey) {\n          focusNavigator.toPreviousItem();\n        } else {\n          focusNavigator.toNextItem();\n        }\n      }\n    }, {\n      keys: [['Escape']],\n      callback: () => {\n        mainMenu.close();\n      }\n    }, {\n      keys: [['Enter'], ['Space']],\n      preventDefault: false,\n      callback: event => {\n        const element = menuItems[focusNavigator.getCurrentPage()];\n        if (element instanceof SelectUI) {\n          element.openOptions();\n          event.preventDefault();\n        }\n        if (element instanceof LinkUI) {\n          element.activate();\n          event.preventDefault();\n        }\n        if (!(element instanceof BaseUI)) {\n          event.preventDefault();\n        }\n      }\n    }], SHORTCUTS_MENU_CONTEXT);\n  }\n  mainMenu.addLocalHook('afterSubmenuOpen', addKeyboardShortcuts);\n  mainMenu.addLocalHook('afterOpen', addKeyboardShortcuts);\n\n  /**\n   * Focuses the menu and switches its shortcut context to that one which controls\n   * the focus navigation.\n   */\n  function listen() {\n    mainMenu.focus();\n    mainMenu.getKeyboardShortcutsCtrl().listen(SHORTCUTS_MENU_CONTEXT);\n  }\n\n  /**\n   * Retrieves the last selected menu item (before clearing the state after going into the focus mode).\n   *\n   * @returns {number} The last selected menu item.\n   */\n  function getLastMenuPage() {\n    return lastSelectedMenuItem;\n  }\n  return {\n    ...focusNavigator,\n    listen,\n    getLastMenuPage\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}