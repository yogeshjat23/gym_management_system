{"ast":null,"code":"import { textRenderer } from \"../textRenderer/index.mjs\";\nimport { fastInnerHTML } from \"../../helpers/dom/element.mjs\";\nimport { rangeEach } from \"../../helpers/number.mjs\";\nexport const RENDERER_TYPE = 'password';\n\n/**\n * @private\n * @param {Core} hotInstance The Handsontable instance.\n * @param {HTMLTableCellElement} TD The rendered cell element.\n * @param {number} row The visual row index.\n * @param {number} col The visual column index.\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\n * @param {*} value The rendered value.\n * @param {object} cellProperties The cell meta object (see {@link Core#getCellMeta}).\n */\nexport function passwordRenderer(hotInstance, TD, row, col, prop, value, cellProperties) {\n  textRenderer.apply(this, [hotInstance, TD, row, col, prop, value, cellProperties]);\n  const hashLength = cellProperties.hashLength || TD.innerHTML.length;\n  const hashSymbol = cellProperties.hashSymbol || '*';\n  let hash = '';\n  rangeEach(hashLength - 1, () => {\n    hash += hashSymbol;\n  });\n  fastInnerHTML(TD, hash);\n}\npasswordRenderer.RENDERER_TYPE = RENDERER_TYPE;","map":{"version":3,"names":["textRenderer","fastInnerHTML","rangeEach","RENDERER_TYPE","passwordRenderer","hotInstance","TD","row","col","prop","value","cellProperties","apply","hashLength","innerHTML","length","hashSymbol","hash"],"sources":["D:/gym-project/frontend/node_modules/handsontable/renderers/passwordRenderer/passwordRenderer.mjs"],"sourcesContent":["import { textRenderer } from \"../textRenderer/index.mjs\";\nimport { fastInnerHTML } from \"../../helpers/dom/element.mjs\";\nimport { rangeEach } from \"../../helpers/number.mjs\";\nexport const RENDERER_TYPE = 'password';\n\n/**\n * @private\n * @param {Core} hotInstance The Handsontable instance.\n * @param {HTMLTableCellElement} TD The rendered cell element.\n * @param {number} row The visual row index.\n * @param {number} col The visual column index.\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\n * @param {*} value The rendered value.\n * @param {object} cellProperties The cell meta object (see {@link Core#getCellMeta}).\n */\nexport function passwordRenderer(hotInstance, TD, row, col, prop, value, cellProperties) {\n  textRenderer.apply(this, [hotInstance, TD, row, col, prop, value, cellProperties]);\n  const hashLength = cellProperties.hashLength || TD.innerHTML.length;\n  const hashSymbol = cellProperties.hashSymbol || '*';\n  let hash = '';\n  rangeEach(hashLength - 1, () => {\n    hash += hashSymbol;\n  });\n  fastInnerHTML(TD, hash);\n}\npasswordRenderer.RENDERER_TYPE = RENDERER_TYPE;"],"mappings":"AAAA,SAASA,YAAY,QAAQ,2BAA2B;AACxD,SAASC,aAAa,QAAQ,+BAA+B;AAC7D,SAASC,SAAS,QAAQ,0BAA0B;AACpD,OAAO,MAAMC,aAAa,GAAG,UAAU;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,gBAAgBA,CAACC,WAAW,EAAEC,EAAE,EAAEC,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAEC,KAAK,EAAEC,cAAc,EAAE;EACvFX,YAAY,CAACY,KAAK,CAAC,IAAI,EAAE,CAACP,WAAW,EAAEC,EAAE,EAAEC,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAEC,KAAK,EAAEC,cAAc,CAAC,CAAC;EAClF,MAAME,UAAU,GAAGF,cAAc,CAACE,UAAU,IAAIP,EAAE,CAACQ,SAAS,CAACC,MAAM;EACnE,MAAMC,UAAU,GAAGL,cAAc,CAACK,UAAU,IAAI,GAAG;EACnD,IAAIC,IAAI,GAAG,EAAE;EACbf,SAAS,CAACW,UAAU,GAAG,CAAC,EAAE,MAAM;IAC9BI,IAAI,IAAID,UAAU;EACpB,CAAC,CAAC;EACFf,aAAa,CAACK,EAAE,EAAEW,IAAI,CAAC;AACzB;AACAb,gBAAgB,CAACD,aAAa,GAAGA,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}