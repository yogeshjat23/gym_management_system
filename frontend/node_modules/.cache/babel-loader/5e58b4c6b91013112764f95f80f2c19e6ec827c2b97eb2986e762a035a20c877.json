{"ast":null,"code":"function _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport { addClass, getMaximumScrollTop, getScrollbarWidth, getScrollTop, getWindowScrollLeft, hasClass, outerHeight, removeClass, setOverlayPosition, resetCssTransform } from \"../../../../helpers/dom/element.mjs\";\nimport TopOverlayTable from \"./../table/top.mjs\";\nimport { Overlay } from \"./_base.mjs\";\nimport { CORNER_DEFAULT_STYLE } from \"../selection/index.mjs\";\nimport { CLONE_TOP } from \"./constants.mjs\";\n/**\n * @class TopOverlay\n */\nexport class TopOverlay extends Overlay {\n  /**\n   * @param {Walkontable} wotInstance The Walkontable instance. @TODO refactoring: check if can be deleted.\n   * @param {FacadeGetter} facadeGetter Function which return proper facade.\n   * @param {Settings} wtSettings The Walkontable settings.\n   * @param {DomBindings} domBindings Dom elements bound to the current instance.\n   */\n  constructor(wotInstance, facadeGetter, wtSettings, domBindings) {\n    super(wotInstance, facadeGetter, CLONE_TOP, wtSettings, domBindings);\n    /**\n     * Cached value which holds the previous value of the `fixedRowsTop` option.\n     * It is used as a comparison value that can be used to detect changes in this value.\n     *\n     * @type {number}\n     */\n    _defineProperty(this, \"cachedFixedRowsTop\", -1);\n    this.cachedFixedRowsTop = this.wtSettings.getSetting('fixedRowsTop');\n  }\n\n  /**\n   * Factory method to create a subclass of `Table` that is relevant to this overlay.\n   *\n   * @see Table#constructor\n   * @param {...*} args Parameters that will be forwarded to the `Table` constructor.\n   * @returns {TopOverlayTable}\n   */\n  createTable() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return new TopOverlayTable(...args);\n  }\n\n  /**\n   * Checks if overlay should be fully rendered.\n   *\n   * @returns {boolean}\n   */\n  shouldBeRendered() {\n    return this.wtSettings.getSetting('shouldRenderTopOverlay');\n  }\n\n  /**\n   * Updates the top overlay position.\n   *\n   * @returns {boolean}\n   */\n  resetFixedPosition() {\n    if (!this.needFullRender || !this.shouldBeRendered() || !this.wot.wtTable.holder.parentNode) {\n      // removed from DOM\n      return false;\n    }\n    const overlayRoot = this.clone.wtTable.holder.parentNode;\n    const {\n      rootWindow\n    } = this.domBindings;\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    let overlayPosition = 0;\n    let skipInnerBorderAdjusting = false;\n    if (this.trimmingContainer === rootWindow && (!preventOverflow || preventOverflow !== 'vertical')) {\n      const {\n        wtTable\n      } = this.wot;\n      const hiderRect = wtTable.hider.getBoundingClientRect();\n      const bottom = Math.ceil(hiderRect.bottom);\n      const rootHeight = overlayRoot.offsetHeight;\n\n      // This checks if the overlay is going to an infinite loop caused by added (or removed)\n      // `innerBorderTop` class name. Toggling the class name shifts the viewport by 1px and\n      // triggers the `scroll` event. It causes the table to render. The new render cycle takes into,\n      // account the shift and toggles the class name again. This causes the next loops. This\n      // happens only on Chrome (#7256).\n      //\n      // When we detect that the table bottom position is the same as the overlay bottom,\n      // do not toggle the class name.\n      //\n      // This workaround will be able to be cleared after merging the SVG borders, which introduces\n      // frozen lines (no more `innerBorderTop` workaround).\n      skipInnerBorderAdjusting = bottom === rootHeight;\n      overlayPosition = this.getOverlayOffset();\n      setOverlayPosition(overlayRoot, '0px', `${overlayPosition}px`);\n    } else {\n      overlayPosition = this.getScrollPosition();\n      resetCssTransform(overlayRoot);\n    }\n    const positionChanged = this.adjustHeaderBordersPosition(overlayPosition, skipInnerBorderAdjusting);\n    this.adjustElementsSize();\n    return positionChanged;\n  }\n\n  /**\n   * Sets the main overlay's vertical scroll position.\n   *\n   * @param {number} pos The scroll position.\n   * @returns {boolean}\n   */\n  setScrollPosition(pos) {\n    const rootWindow = this.domBindings.rootWindow;\n    let result = false;\n    if (this.mainTableScrollableElement === rootWindow && rootWindow.scrollY !== pos) {\n      rootWindow.scrollTo(getWindowScrollLeft(rootWindow), pos);\n      result = true;\n    } else if (this.mainTableScrollableElement.scrollTop !== pos) {\n      this.mainTableScrollableElement.scrollTop = pos;\n      result = true;\n    }\n    return result;\n  }\n\n  /**\n   * Triggers onScroll hook callback.\n   */\n  onScroll() {\n    this.wtSettings.getSetting('onScrollHorizontally');\n  }\n\n  /**\n   * Calculates total sum cells height.\n   *\n   * @param {number} from Row index which calculates started from.\n   * @param {number} to Row index where calculation is finished.\n   * @returns {number} Height sum.\n   */\n  sumCellSizes(from, to) {\n    const defaultRowHeight = this.wtSettings.getSetting('defaultRowHeight');\n    let row = from;\n    let sum = 0;\n    while (row < to) {\n      const height = this.wot.wtTable.getRowHeight(row);\n      sum += height === undefined ? defaultRowHeight : height;\n      row += 1;\n    }\n    return sum;\n  }\n\n  /**\n   * Adjust overlay root element, children and master table element sizes (width, height).\n   */\n  adjustElementsSize() {\n    this.updateTrimmingContainer();\n    if (this.needFullRender) {\n      this.adjustRootElementSize();\n      this.adjustRootChildrenSize();\n    }\n  }\n\n  /**\n   * Adjust overlay root element size (width and height).\n   */\n  adjustRootElementSize() {\n    const {\n      wtTable\n    } = this.wot;\n    const {\n      rootDocument,\n      rootWindow\n    } = this.domBindings;\n    const scrollbarWidth = getScrollbarWidth(rootDocument);\n    const overlayRoot = this.clone.wtTable.holder.parentNode;\n    const overlayRootStyle = overlayRoot.style;\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    if (this.trimmingContainer !== rootWindow || preventOverflow === 'horizontal') {\n      let width = this.wot.wtViewport.getWorkspaceWidth();\n      if (this.wot.wtOverlays.hasScrollbarRight) {\n        width -= scrollbarWidth;\n      }\n      width = Math.min(width, wtTable.wtRootElement.scrollWidth);\n      overlayRootStyle.width = `${width}px`;\n    } else {\n      overlayRootStyle.width = '';\n    }\n    this.clone.wtTable.holder.style.width = overlayRootStyle.width;\n    let tableHeight = outerHeight(this.clone.wtTable.TABLE);\n    if (!this.wot.wtTable.hasDefinedSize()) {\n      tableHeight = 0;\n    }\n    overlayRootStyle.height = `${tableHeight}px`;\n  }\n\n  /**\n   * Adjust overlay root childs size.\n   */\n  adjustRootChildrenSize() {\n    const {\n      holder\n    } = this.clone.wtTable;\n    const selectionCornerOffset = this.wot.selectionManager.getFocusSelection() ? parseInt(CORNER_DEFAULT_STYLE.height, 10) / 2 : 0;\n    this.clone.wtTable.hider.style.width = this.hider.style.width;\n    holder.style.width = holder.parentNode.style.width;\n    // Add selection corner protruding part to the holder total height to make sure that\n    // borders' corner won't be cut after vertical scroll (#6937).\n    holder.style.height = `${parseInt(holder.parentNode.style.height, 10) + selectionCornerOffset}px`;\n  }\n\n  /**\n   * Adjust the overlay dimensions and position.\n   */\n  applyToDOM() {\n    const total = this.wtSettings.getSetting('totalRows');\n    if (typeof this.wot.wtViewport.rowsRenderCalculator.startPosition === 'number') {\n      this.spreader.style.top = `${this.wot.wtViewport.rowsRenderCalculator.startPosition}px`;\n    } else if (total === 0) {\n      // can happen if there are 0 rows\n      this.spreader.style.top = '0';\n    } else {\n      throw new Error('Incorrect value of the rowsRenderCalculator');\n    }\n    this.spreader.style.bottom = '';\n    if (this.needFullRender) {\n      this.syncOverlayOffset();\n    }\n  }\n\n  /**\n   * Synchronize calculated left position to an element.\n   */\n  syncOverlayOffset() {\n    const styleProperty = this.isRtl() ? 'right' : 'left';\n    const {\n      spreader\n    } = this.clone.wtTable;\n    if (typeof this.wot.wtViewport.columnsRenderCalculator.startPosition === 'number') {\n      spreader.style[styleProperty] = `${this.wot.wtViewport.columnsRenderCalculator.startPosition}px`;\n    } else {\n      spreader.style[styleProperty] = '';\n    }\n  }\n\n  /**\n   * Scrolls vertically to a row.\n   *\n   * @param {number} sourceRow Row index which you want to scroll to.\n   * @param {boolean} [bottomEdge] If `true`, scrolls according to the bottom edge (top edge is by default).\n   * @returns {boolean}\n   */\n  scrollTo(sourceRow, bottomEdge) {\n    const {\n      wot,\n      wtSettings\n    } = this;\n    const sourceInstance = wot.cloneSource ? wot.cloneSource : wot;\n    const mainHolder = sourceInstance.wtTable.holder;\n    const columnHeaders = wtSettings.getSetting('columnHeaders');\n    const fixedRowsTop = wtSettings.getSetting('fixedRowsTop');\n    const columnHeaderBorderCompensation = fixedRowsTop === 0 && columnHeaders.length > 0 && !hasClass(mainHolder.parentNode, 'innerBorderTop') ? 1 : 0;\n    let newY = this.getTableParentOffset();\n    let scrollbarCompensation = 0;\n    if (bottomEdge) {\n      const rowHeight = this.wot.wtTable.getRowHeight(sourceRow);\n      const viewportHeight = this.wot.wtViewport.getViewportHeight();\n      if (rowHeight > viewportHeight) {\n        bottomEdge = false;\n      }\n    }\n    if (bottomEdge && mainHolder.offsetHeight !== mainHolder.clientHeight) {\n      scrollbarCompensation = getScrollbarWidth(this.domBindings.rootDocument);\n    }\n    if (bottomEdge) {\n      const fixedRowsBottom = wtSettings.getSetting('fixedRowsBottom');\n      const totalRows = wtSettings.getSetting('totalRows');\n      newY += this.sumCellSizes(0, sourceRow + 1);\n      newY -= wot.wtViewport.getViewportHeight() - this.sumCellSizes(totalRows - fixedRowsBottom, totalRows);\n      // Fix 1 pixel offset when cell is selected\n      newY += 1;\n      // Compensate for the bottom header border if scrolled from the absolute top.\n      newY += columnHeaderBorderCompensation;\n    } else {\n      newY += this.sumCellSizes(wtSettings.getSetting('fixedRowsTop'), sourceRow);\n    }\n    newY += scrollbarCompensation;\n\n    // If the table is scrolled all the way up when starting the scroll and going to be scrolled to the bottom,\n    // we need to compensate for the potential header bottom border height.\n    if (getMaximumScrollTop(this.mainTableScrollableElement) === newY - columnHeaderBorderCompensation && columnHeaderBorderCompensation > 0) {\n      this.wot.wtOverlays.expandHiderVerticallyBy(columnHeaderBorderCompensation);\n    }\n    return this.setScrollPosition(newY);\n  }\n\n  /**\n   * Gets table parent top position.\n   *\n   * @returns {number}\n   */\n  getTableParentOffset() {\n    if (this.mainTableScrollableElement === this.domBindings.rootWindow) {\n      return this.wot.wtTable.holderOffset.top;\n    }\n    return 0;\n  }\n\n  /**\n   * Gets the main overlay's vertical scroll position.\n   *\n   * @returns {number} Main table's vertical scroll position.\n   */\n  getScrollPosition() {\n    return getScrollTop(this.mainTableScrollableElement, this.domBindings.rootWindow);\n  }\n\n  /**\n   * Gets the main overlay's vertical overlay offset.\n   *\n   * @returns {number} Main table's vertical overlay offset.\n   */\n  getOverlayOffset() {\n    const {\n      rootWindow\n    } = this.domBindings;\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    let overlayOffset = 0;\n    if (this.trimmingContainer === rootWindow && (!preventOverflow || preventOverflow !== 'vertical')) {\n      const rootHeight = this.wot.wtTable.getTotalHeight();\n      const overlayRootHeight = this.clone.wtTable.getTotalHeight();\n      const maxOffset = rootHeight - overlayRootHeight;\n      overlayOffset = Math.max(this.getScrollPosition() - this.getTableParentOffset(), 0);\n      if (overlayOffset > maxOffset) {\n        overlayOffset = 0;\n      }\n    }\n    return overlayOffset;\n  }\n\n  /**\n   * Adds css classes to hide the header border's header (cell-selection border hiding issue).\n   *\n   * @param {number} position Header Y position if trimming container is window or scroll top if not.\n   * @param {boolean} [skipInnerBorderAdjusting=false] If `true` the inner border adjusting will be skipped.\n   * @returns {boolean}\n   */\n  adjustHeaderBordersPosition(position) {\n    let skipInnerBorderAdjusting = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const {\n      wtSettings\n    } = this;\n    const masterParent = this.wot.wtTable.holder.parentNode;\n    const totalColumns = wtSettings.getSetting('totalColumns');\n    const preventHorizontalOverflow = wtSettings.getSetting('preventOverflow') === 'horizontal';\n    if (totalColumns) {\n      removeClass(masterParent, 'emptyColumns');\n    } else {\n      addClass(masterParent, 'emptyColumns');\n    }\n    let positionChanged = false;\n    if (!skipInnerBorderAdjusting && !preventHorizontalOverflow) {\n      const fixedRowsTop = wtSettings.getSetting('fixedRowsTop');\n      const areFixedRowsTopChanged = this.cachedFixedRowsTop !== fixedRowsTop;\n      const columnHeaders = wtSettings.getSetting('columnHeaders');\n      if ((areFixedRowsTopChanged || fixedRowsTop === 0) && columnHeaders.length > 0) {\n        const previousState = hasClass(masterParent, 'innerBorderTop');\n        this.cachedFixedRowsTop = wtSettings.getSetting('fixedRowsTop');\n        if (position || wtSettings.getSetting('totalRows') === 0) {\n          addClass(masterParent, 'innerBorderTop');\n          positionChanged = !previousState;\n        } else {\n          removeClass(masterParent, 'innerBorderTop');\n          positionChanged = previousState;\n        }\n      }\n    }\n    return positionChanged;\n  }\n}","map":{"version":3,"names":["_defineProperty","e","r","t","_toPropertyKey","Object","defineProperty","value","enumerable","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","addClass","getMaximumScrollTop","getScrollbarWidth","getScrollTop","getWindowScrollLeft","hasClass","outerHeight","removeClass","setOverlayPosition","resetCssTransform","TopOverlayTable","Overlay","CORNER_DEFAULT_STYLE","CLONE_TOP","TopOverlay","constructor","wotInstance","facadeGetter","wtSettings","domBindings","cachedFixedRowsTop","getSetting","createTable","_len","arguments","length","args","Array","_key","shouldBeRendered","resetFixedPosition","needFullRender","wot","wtTable","holder","parentNode","overlayRoot","clone","rootWindow","preventOverflow","overlayPosition","skipInnerBorderAdjusting","trimmingContainer","hiderRect","hider","getBoundingClientRect","bottom","Math","ceil","rootHeight","offsetHeight","getOverlayOffset","getScrollPosition","positionChanged","adjustHeaderBordersPosition","adjustElementsSize","setScrollPosition","pos","result","mainTableScrollableElement","scrollY","scrollTo","scrollTop","onScroll","sumCellSizes","from","to","defaultRowHeight","row","sum","height","getRowHeight","undefined","updateTrimmingContainer","adjustRootElementSize","adjustRootChildrenSize","rootDocument","scrollbarWidth","overlayRootStyle","style","width","wtViewport","getWorkspaceWidth","wtOverlays","hasScrollbarRight","min","wtRootElement","scrollWidth","tableHeight","TABLE","hasDefinedSize","selectionCornerOffset","selectionManager","getFocusSelection","parseInt","applyToDOM","total","rowsRenderCalculator","startPosition","spreader","top","Error","syncOverlayOffset","styleProperty","isRtl","columnsRenderCalculator","sourceRow","bottomEdge","sourceInstance","cloneSource","mainHolder","columnHeaders","fixedRowsTop","columnHeaderBorderCompensation","newY","getTableParentOffset","scrollbarCompensation","rowHeight","viewportHeight","getViewportHeight","clientHeight","fixedRowsBottom","totalRows","expandHiderVerticallyBy","holderOffset","overlayOffset","getTotalHeight","overlayRootHeight","maxOffset","max","position","masterParent","totalColumns","preventHorizontalOverflow","areFixedRowsTopChanged","previousState"],"sources":["D:/gym-project/frontend/node_modules/handsontable/3rdparty/walkontable/src/overlay/top.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport { addClass, getMaximumScrollTop, getScrollbarWidth, getScrollTop, getWindowScrollLeft, hasClass, outerHeight, removeClass, setOverlayPosition, resetCssTransform } from \"../../../../helpers/dom/element.mjs\";\nimport TopOverlayTable from \"./../table/top.mjs\";\nimport { Overlay } from \"./_base.mjs\";\nimport { CORNER_DEFAULT_STYLE } from \"../selection/index.mjs\";\nimport { CLONE_TOP } from \"./constants.mjs\";\n/**\n * @class TopOverlay\n */\nexport class TopOverlay extends Overlay {\n  /**\n   * @param {Walkontable} wotInstance The Walkontable instance. @TODO refactoring: check if can be deleted.\n   * @param {FacadeGetter} facadeGetter Function which return proper facade.\n   * @param {Settings} wtSettings The Walkontable settings.\n   * @param {DomBindings} domBindings Dom elements bound to the current instance.\n   */\n  constructor(wotInstance, facadeGetter, wtSettings, domBindings) {\n    super(wotInstance, facadeGetter, CLONE_TOP, wtSettings, domBindings);\n    /**\n     * Cached value which holds the previous value of the `fixedRowsTop` option.\n     * It is used as a comparison value that can be used to detect changes in this value.\n     *\n     * @type {number}\n     */\n    _defineProperty(this, \"cachedFixedRowsTop\", -1);\n    this.cachedFixedRowsTop = this.wtSettings.getSetting('fixedRowsTop');\n  }\n\n  /**\n   * Factory method to create a subclass of `Table` that is relevant to this overlay.\n   *\n   * @see Table#constructor\n   * @param {...*} args Parameters that will be forwarded to the `Table` constructor.\n   * @returns {TopOverlayTable}\n   */\n  createTable() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return new TopOverlayTable(...args);\n  }\n\n  /**\n   * Checks if overlay should be fully rendered.\n   *\n   * @returns {boolean}\n   */\n  shouldBeRendered() {\n    return this.wtSettings.getSetting('shouldRenderTopOverlay');\n  }\n\n  /**\n   * Updates the top overlay position.\n   *\n   * @returns {boolean}\n   */\n  resetFixedPosition() {\n    if (!this.needFullRender || !this.shouldBeRendered() || !this.wot.wtTable.holder.parentNode) {\n      // removed from DOM\n      return false;\n    }\n    const overlayRoot = this.clone.wtTable.holder.parentNode;\n    const {\n      rootWindow\n    } = this.domBindings;\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    let overlayPosition = 0;\n    let skipInnerBorderAdjusting = false;\n    if (this.trimmingContainer === rootWindow && (!preventOverflow || preventOverflow !== 'vertical')) {\n      const {\n        wtTable\n      } = this.wot;\n      const hiderRect = wtTable.hider.getBoundingClientRect();\n      const bottom = Math.ceil(hiderRect.bottom);\n      const rootHeight = overlayRoot.offsetHeight;\n\n      // This checks if the overlay is going to an infinite loop caused by added (or removed)\n      // `innerBorderTop` class name. Toggling the class name shifts the viewport by 1px and\n      // triggers the `scroll` event. It causes the table to render. The new render cycle takes into,\n      // account the shift and toggles the class name again. This causes the next loops. This\n      // happens only on Chrome (#7256).\n      //\n      // When we detect that the table bottom position is the same as the overlay bottom,\n      // do not toggle the class name.\n      //\n      // This workaround will be able to be cleared after merging the SVG borders, which introduces\n      // frozen lines (no more `innerBorderTop` workaround).\n      skipInnerBorderAdjusting = bottom === rootHeight;\n      overlayPosition = this.getOverlayOffset();\n      setOverlayPosition(overlayRoot, '0px', `${overlayPosition}px`);\n    } else {\n      overlayPosition = this.getScrollPosition();\n      resetCssTransform(overlayRoot);\n    }\n    const positionChanged = this.adjustHeaderBordersPosition(overlayPosition, skipInnerBorderAdjusting);\n    this.adjustElementsSize();\n    return positionChanged;\n  }\n\n  /**\n   * Sets the main overlay's vertical scroll position.\n   *\n   * @param {number} pos The scroll position.\n   * @returns {boolean}\n   */\n  setScrollPosition(pos) {\n    const rootWindow = this.domBindings.rootWindow;\n    let result = false;\n    if (this.mainTableScrollableElement === rootWindow && rootWindow.scrollY !== pos) {\n      rootWindow.scrollTo(getWindowScrollLeft(rootWindow), pos);\n      result = true;\n    } else if (this.mainTableScrollableElement.scrollTop !== pos) {\n      this.mainTableScrollableElement.scrollTop = pos;\n      result = true;\n    }\n    return result;\n  }\n\n  /**\n   * Triggers onScroll hook callback.\n   */\n  onScroll() {\n    this.wtSettings.getSetting('onScrollHorizontally');\n  }\n\n  /**\n   * Calculates total sum cells height.\n   *\n   * @param {number} from Row index which calculates started from.\n   * @param {number} to Row index where calculation is finished.\n   * @returns {number} Height sum.\n   */\n  sumCellSizes(from, to) {\n    const defaultRowHeight = this.wtSettings.getSetting('defaultRowHeight');\n    let row = from;\n    let sum = 0;\n    while (row < to) {\n      const height = this.wot.wtTable.getRowHeight(row);\n      sum += height === undefined ? defaultRowHeight : height;\n      row += 1;\n    }\n    return sum;\n  }\n\n  /**\n   * Adjust overlay root element, children and master table element sizes (width, height).\n   */\n  adjustElementsSize() {\n    this.updateTrimmingContainer();\n    if (this.needFullRender) {\n      this.adjustRootElementSize();\n      this.adjustRootChildrenSize();\n    }\n  }\n\n  /**\n   * Adjust overlay root element size (width and height).\n   */\n  adjustRootElementSize() {\n    const {\n      wtTable\n    } = this.wot;\n    const {\n      rootDocument,\n      rootWindow\n    } = this.domBindings;\n    const scrollbarWidth = getScrollbarWidth(rootDocument);\n    const overlayRoot = this.clone.wtTable.holder.parentNode;\n    const overlayRootStyle = overlayRoot.style;\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    if (this.trimmingContainer !== rootWindow || preventOverflow === 'horizontal') {\n      let width = this.wot.wtViewport.getWorkspaceWidth();\n      if (this.wot.wtOverlays.hasScrollbarRight) {\n        width -= scrollbarWidth;\n      }\n      width = Math.min(width, wtTable.wtRootElement.scrollWidth);\n      overlayRootStyle.width = `${width}px`;\n    } else {\n      overlayRootStyle.width = '';\n    }\n    this.clone.wtTable.holder.style.width = overlayRootStyle.width;\n    let tableHeight = outerHeight(this.clone.wtTable.TABLE);\n    if (!this.wot.wtTable.hasDefinedSize()) {\n      tableHeight = 0;\n    }\n    overlayRootStyle.height = `${tableHeight}px`;\n  }\n\n  /**\n   * Adjust overlay root childs size.\n   */\n  adjustRootChildrenSize() {\n    const {\n      holder\n    } = this.clone.wtTable;\n    const selectionCornerOffset = this.wot.selectionManager.getFocusSelection() ? parseInt(CORNER_DEFAULT_STYLE.height, 10) / 2 : 0;\n    this.clone.wtTable.hider.style.width = this.hider.style.width;\n    holder.style.width = holder.parentNode.style.width;\n    // Add selection corner protruding part to the holder total height to make sure that\n    // borders' corner won't be cut after vertical scroll (#6937).\n    holder.style.height = `${parseInt(holder.parentNode.style.height, 10) + selectionCornerOffset}px`;\n  }\n\n  /**\n   * Adjust the overlay dimensions and position.\n   */\n  applyToDOM() {\n    const total = this.wtSettings.getSetting('totalRows');\n    if (typeof this.wot.wtViewport.rowsRenderCalculator.startPosition === 'number') {\n      this.spreader.style.top = `${this.wot.wtViewport.rowsRenderCalculator.startPosition}px`;\n    } else if (total === 0) {\n      // can happen if there are 0 rows\n      this.spreader.style.top = '0';\n    } else {\n      throw new Error('Incorrect value of the rowsRenderCalculator');\n    }\n    this.spreader.style.bottom = '';\n    if (this.needFullRender) {\n      this.syncOverlayOffset();\n    }\n  }\n\n  /**\n   * Synchronize calculated left position to an element.\n   */\n  syncOverlayOffset() {\n    const styleProperty = this.isRtl() ? 'right' : 'left';\n    const {\n      spreader\n    } = this.clone.wtTable;\n    if (typeof this.wot.wtViewport.columnsRenderCalculator.startPosition === 'number') {\n      spreader.style[styleProperty] = `${this.wot.wtViewport.columnsRenderCalculator.startPosition}px`;\n    } else {\n      spreader.style[styleProperty] = '';\n    }\n  }\n\n  /**\n   * Scrolls vertically to a row.\n   *\n   * @param {number} sourceRow Row index which you want to scroll to.\n   * @param {boolean} [bottomEdge] If `true`, scrolls according to the bottom edge (top edge is by default).\n   * @returns {boolean}\n   */\n  scrollTo(sourceRow, bottomEdge) {\n    const {\n      wot,\n      wtSettings\n    } = this;\n    const sourceInstance = wot.cloneSource ? wot.cloneSource : wot;\n    const mainHolder = sourceInstance.wtTable.holder;\n    const columnHeaders = wtSettings.getSetting('columnHeaders');\n    const fixedRowsTop = wtSettings.getSetting('fixedRowsTop');\n    const columnHeaderBorderCompensation = fixedRowsTop === 0 && columnHeaders.length > 0 && !hasClass(mainHolder.parentNode, 'innerBorderTop') ? 1 : 0;\n    let newY = this.getTableParentOffset();\n    let scrollbarCompensation = 0;\n    if (bottomEdge) {\n      const rowHeight = this.wot.wtTable.getRowHeight(sourceRow);\n      const viewportHeight = this.wot.wtViewport.getViewportHeight();\n      if (rowHeight > viewportHeight) {\n        bottomEdge = false;\n      }\n    }\n    if (bottomEdge && mainHolder.offsetHeight !== mainHolder.clientHeight) {\n      scrollbarCompensation = getScrollbarWidth(this.domBindings.rootDocument);\n    }\n    if (bottomEdge) {\n      const fixedRowsBottom = wtSettings.getSetting('fixedRowsBottom');\n      const totalRows = wtSettings.getSetting('totalRows');\n      newY += this.sumCellSizes(0, sourceRow + 1);\n      newY -= wot.wtViewport.getViewportHeight() - this.sumCellSizes(totalRows - fixedRowsBottom, totalRows);\n      // Fix 1 pixel offset when cell is selected\n      newY += 1;\n      // Compensate for the bottom header border if scrolled from the absolute top.\n      newY += columnHeaderBorderCompensation;\n    } else {\n      newY += this.sumCellSizes(wtSettings.getSetting('fixedRowsTop'), sourceRow);\n    }\n    newY += scrollbarCompensation;\n\n    // If the table is scrolled all the way up when starting the scroll and going to be scrolled to the bottom,\n    // we need to compensate for the potential header bottom border height.\n    if (getMaximumScrollTop(this.mainTableScrollableElement) === newY - columnHeaderBorderCompensation && columnHeaderBorderCompensation > 0) {\n      this.wot.wtOverlays.expandHiderVerticallyBy(columnHeaderBorderCompensation);\n    }\n    return this.setScrollPosition(newY);\n  }\n\n  /**\n   * Gets table parent top position.\n   *\n   * @returns {number}\n   */\n  getTableParentOffset() {\n    if (this.mainTableScrollableElement === this.domBindings.rootWindow) {\n      return this.wot.wtTable.holderOffset.top;\n    }\n    return 0;\n  }\n\n  /**\n   * Gets the main overlay's vertical scroll position.\n   *\n   * @returns {number} Main table's vertical scroll position.\n   */\n  getScrollPosition() {\n    return getScrollTop(this.mainTableScrollableElement, this.domBindings.rootWindow);\n  }\n\n  /**\n   * Gets the main overlay's vertical overlay offset.\n   *\n   * @returns {number} Main table's vertical overlay offset.\n   */\n  getOverlayOffset() {\n    const {\n      rootWindow\n    } = this.domBindings;\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    let overlayOffset = 0;\n    if (this.trimmingContainer === rootWindow && (!preventOverflow || preventOverflow !== 'vertical')) {\n      const rootHeight = this.wot.wtTable.getTotalHeight();\n      const overlayRootHeight = this.clone.wtTable.getTotalHeight();\n      const maxOffset = rootHeight - overlayRootHeight;\n      overlayOffset = Math.max(this.getScrollPosition() - this.getTableParentOffset(), 0);\n      if (overlayOffset > maxOffset) {\n        overlayOffset = 0;\n      }\n    }\n    return overlayOffset;\n  }\n\n  /**\n   * Adds css classes to hide the header border's header (cell-selection border hiding issue).\n   *\n   * @param {number} position Header Y position if trimming container is window or scroll top if not.\n   * @param {boolean} [skipInnerBorderAdjusting=false] If `true` the inner border adjusting will be skipped.\n   * @returns {boolean}\n   */\n  adjustHeaderBordersPosition(position) {\n    let skipInnerBorderAdjusting = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const {\n      wtSettings\n    } = this;\n    const masterParent = this.wot.wtTable.holder.parentNode;\n    const totalColumns = wtSettings.getSetting('totalColumns');\n    const preventHorizontalOverflow = wtSettings.getSetting('preventOverflow') === 'horizontal';\n    if (totalColumns) {\n      removeClass(masterParent, 'emptyColumns');\n    } else {\n      addClass(masterParent, 'emptyColumns');\n    }\n    let positionChanged = false;\n    if (!skipInnerBorderAdjusting && !preventHorizontalOverflow) {\n      const fixedRowsTop = wtSettings.getSetting('fixedRowsTop');\n      const areFixedRowsTopChanged = this.cachedFixedRowsTop !== fixedRowsTop;\n      const columnHeaders = wtSettings.getSetting('columnHeaders');\n      if ((areFixedRowsTopChanged || fixedRowsTop === 0) && columnHeaders.length > 0) {\n        const previousState = hasClass(masterParent, 'innerBorderTop');\n        this.cachedFixedRowsTop = wtSettings.getSetting('fixedRowsTop');\n        if (position || wtSettings.getSetting('totalRows') === 0) {\n          addClass(masterParent, 'innerBorderTop');\n          positionChanged = !previousState;\n        } else {\n          removeClass(masterParent, 'innerBorderTop');\n          positionChanged = previousState;\n        }\n      }\n    }\n    return positionChanged;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}