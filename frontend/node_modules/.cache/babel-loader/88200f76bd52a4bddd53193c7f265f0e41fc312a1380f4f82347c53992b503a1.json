{"ast":null,"code":"import numbro from 'numbro';\nimport { textRenderer } from \"../textRenderer/index.mjs\";\nimport { isNumeric } from \"../../helpers/number.mjs\";\nexport const RENDERER_TYPE = 'numeric';\n\n/**\n * Get the rendered value.\n *\n * @param {*} value Value to be rendered.\n * @param {CellMeta} cellProperties Cell meta object.\n * @returns {*} Returns the rendered value.\n */\nexport function getRenderedValue(value, cellProperties) {\n  if (isNumeric(value)) {\n    const numericFormat = cellProperties.numericFormat;\n    const cellCulture = numericFormat && numericFormat.culture || '-';\n    const cellFormatPattern = numericFormat && numericFormat.pattern;\n    if (typeof cellCulture !== 'undefined' && !numbro.languages()[cellCulture]) {\n      const shortTag = cellCulture.replace('-', '');\n      const langData = numbro.allLanguages ? numbro.allLanguages[cellCulture] : numbro[shortTag];\n      if (langData) {\n        numbro.registerLanguage(langData);\n      }\n    }\n    numbro.setLanguage(cellCulture);\n    value = numbro(value).format(cellFormatPattern || '0');\n  }\n  return value;\n}\n\n/**\n * Numeric cell renderer.\n *\n * @private\n * @param {Core} hotInstance The Handsontable instance.\n * @param {HTMLTableCellElement} TD The rendered cell element.\n * @param {number} row The visual row index.\n * @param {number} col The visual column index.\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\n * @param {*} value The rendered value.\n * @param {object} cellProperties The cell meta object (see {@link Core#getCellMeta}).\n */\nexport function numericRenderer(hotInstance, TD, row, col, prop, value, cellProperties) {\n  let newValue = value;\n  if (isNumeric(newValue)) {\n    const className = cellProperties.className || '';\n    const classArr = className.length ? className.split(' ') : [];\n    newValue = getRenderedValue(newValue, cellProperties);\n    if (classArr.indexOf('htLeft') < 0 && classArr.indexOf('htCenter') < 0 && classArr.indexOf('htRight') < 0 && classArr.indexOf('htJustify') < 0) {\n      classArr.push('htRight');\n    }\n    if (classArr.indexOf('htNumeric') < 0) {\n      classArr.push('htNumeric');\n    }\n    cellProperties.className = classArr.join(' ');\n    TD.dir = 'ltr';\n  }\n  textRenderer(hotInstance, TD, row, col, prop, newValue, cellProperties);\n}\nnumericRenderer.RENDERER_TYPE = RENDERER_TYPE;","map":{"version":3,"names":["numbro","textRenderer","isNumeric","RENDERER_TYPE","getRenderedValue","value","cellProperties","numericFormat","cellCulture","culture","cellFormatPattern","pattern","languages","shortTag","replace","langData","allLanguages","registerLanguage","setLanguage","format","numericRenderer","hotInstance","TD","row","col","prop","newValue","className","classArr","length","split","indexOf","push","join","dir"],"sources":["D:/gym-project/frontend/node_modules/handsontable/renderers/numericRenderer/numericRenderer.mjs"],"sourcesContent":["import \"core-js/modules/es.array.push.js\";\nimport numbro from 'numbro';\nimport { textRenderer } from \"../textRenderer/index.mjs\";\nimport { isNumeric } from \"../../helpers/number.mjs\";\nexport const RENDERER_TYPE = 'numeric';\n\n/**\n * Get the rendered value.\n *\n * @param {*} value Value to be rendered.\n * @param {CellMeta} cellProperties Cell meta object.\n * @returns {*} Returns the rendered value.\n */\nexport function getRenderedValue(value, cellProperties) {\n  if (isNumeric(value)) {\n    const numericFormat = cellProperties.numericFormat;\n    const cellCulture = numericFormat && numericFormat.culture || '-';\n    const cellFormatPattern = numericFormat && numericFormat.pattern;\n    if (typeof cellCulture !== 'undefined' && !numbro.languages()[cellCulture]) {\n      const shortTag = cellCulture.replace('-', '');\n      const langData = numbro.allLanguages ? numbro.allLanguages[cellCulture] : numbro[shortTag];\n      if (langData) {\n        numbro.registerLanguage(langData);\n      }\n    }\n    numbro.setLanguage(cellCulture);\n    value = numbro(value).format(cellFormatPattern || '0');\n  }\n  return value;\n}\n\n/**\n * Numeric cell renderer.\n *\n * @private\n * @param {Core} hotInstance The Handsontable instance.\n * @param {HTMLTableCellElement} TD The rendered cell element.\n * @param {number} row The visual row index.\n * @param {number} col The visual column index.\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\n * @param {*} value The rendered value.\n * @param {object} cellProperties The cell meta object (see {@link Core#getCellMeta}).\n */\nexport function numericRenderer(hotInstance, TD, row, col, prop, value, cellProperties) {\n  let newValue = value;\n  if (isNumeric(newValue)) {\n    const className = cellProperties.className || '';\n    const classArr = className.length ? className.split(' ') : [];\n    newValue = getRenderedValue(newValue, cellProperties);\n    if (classArr.indexOf('htLeft') < 0 && classArr.indexOf('htCenter') < 0 && classArr.indexOf('htRight') < 0 && classArr.indexOf('htJustify') < 0) {\n      classArr.push('htRight');\n    }\n    if (classArr.indexOf('htNumeric') < 0) {\n      classArr.push('htNumeric');\n    }\n    cellProperties.className = classArr.join(' ');\n    TD.dir = 'ltr';\n  }\n  textRenderer(hotInstance, TD, row, col, prop, newValue, cellProperties);\n}\nnumericRenderer.RENDERER_TYPE = RENDERER_TYPE;"],"mappings":"AACA,OAAOA,MAAM,MAAM,QAAQ;AAC3B,SAASC,YAAY,QAAQ,2BAA2B;AACxD,SAASC,SAAS,QAAQ,0BAA0B;AACpD,OAAO,MAAMC,aAAa,GAAG,SAAS;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,gBAAgBA,CAACC,KAAK,EAAEC,cAAc,EAAE;EACtD,IAAIJ,SAAS,CAACG,KAAK,CAAC,EAAE;IACpB,MAAME,aAAa,GAAGD,cAAc,CAACC,aAAa;IAClD,MAAMC,WAAW,GAAGD,aAAa,IAAIA,aAAa,CAACE,OAAO,IAAI,GAAG;IACjE,MAAMC,iBAAiB,GAAGH,aAAa,IAAIA,aAAa,CAACI,OAAO;IAChE,IAAI,OAAOH,WAAW,KAAK,WAAW,IAAI,CAACR,MAAM,CAACY,SAAS,CAAC,CAAC,CAACJ,WAAW,CAAC,EAAE;MAC1E,MAAMK,QAAQ,GAAGL,WAAW,CAACM,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;MAC7C,MAAMC,QAAQ,GAAGf,MAAM,CAACgB,YAAY,GAAGhB,MAAM,CAACgB,YAAY,CAACR,WAAW,CAAC,GAAGR,MAAM,CAACa,QAAQ,CAAC;MAC1F,IAAIE,QAAQ,EAAE;QACZf,MAAM,CAACiB,gBAAgB,CAACF,QAAQ,CAAC;MACnC;IACF;IACAf,MAAM,CAACkB,WAAW,CAACV,WAAW,CAAC;IAC/BH,KAAK,GAAGL,MAAM,CAACK,KAAK,CAAC,CAACc,MAAM,CAACT,iBAAiB,IAAI,GAAG,CAAC;EACxD;EACA,OAAOL,KAAK;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASe,eAAeA,CAACC,WAAW,EAAEC,EAAE,EAAEC,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAEpB,KAAK,EAAEC,cAAc,EAAE;EACtF,IAAIoB,QAAQ,GAAGrB,KAAK;EACpB,IAAIH,SAAS,CAACwB,QAAQ,CAAC,EAAE;IACvB,MAAMC,SAAS,GAAGrB,cAAc,CAACqB,SAAS,IAAI,EAAE;IAChD,MAAMC,QAAQ,GAAGD,SAAS,CAACE,MAAM,GAAGF,SAAS,CAACG,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE;IAC7DJ,QAAQ,GAAGtB,gBAAgB,CAACsB,QAAQ,EAAEpB,cAAc,CAAC;IACrD,IAAIsB,QAAQ,CAACG,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAIH,QAAQ,CAACG,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,IAAIH,QAAQ,CAACG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,IAAIH,QAAQ,CAACG,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE;MAC9IH,QAAQ,CAACI,IAAI,CAAC,SAAS,CAAC;IAC1B;IACA,IAAIJ,QAAQ,CAACG,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE;MACrCH,QAAQ,CAACI,IAAI,CAAC,WAAW,CAAC;IAC5B;IACA1B,cAAc,CAACqB,SAAS,GAAGC,QAAQ,CAACK,IAAI,CAAC,GAAG,CAAC;IAC7CX,EAAE,CAACY,GAAG,GAAG,KAAK;EAChB;EACAjC,YAAY,CAACoB,WAAW,EAAEC,EAAE,EAAEC,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAEC,QAAQ,EAAEpB,cAAc,CAAC;AACzE;AACAc,eAAe,CAACjB,aAAa,GAAGA,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}