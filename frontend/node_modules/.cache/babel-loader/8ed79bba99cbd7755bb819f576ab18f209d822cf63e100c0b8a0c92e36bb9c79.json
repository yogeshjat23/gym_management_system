{"ast":null,"code":"function _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport { rangeEach } from \"../../helpers/number.mjs\";\nimport { mixin } from \"../../helpers/object.mjs\";\nimport { isFunction } from \"../../helpers/function.mjs\";\nimport localHooks from \"../../mixins/localHooks.mjs\";\n/**\n * Map for storing mappings from an index to a value.\n *\n * @class IndexMap\n */\nexport class IndexMap {\n  constructor() {\n    let initValueOrFn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    /**\n     * List of values for particular indexes.\n     *\n     * @private\n     * @type {Array}\n     */\n    _defineProperty(this, \"indexedValues\", []);\n    /**\n     * Initial value or function for each existing index.\n     *\n     * @private\n     * @type {*}\n     */\n    _defineProperty(this, \"initValueOrFn\", void 0);\n    this.initValueOrFn = initValueOrFn;\n  }\n\n  /**\n   * Get full list of values for particular indexes.\n   *\n   * @returns {Array}\n   */\n  getValues() {\n    return this.indexedValues;\n  }\n\n  /**\n   * Get value for the particular index.\n   *\n   * @param {number} index Index for which value is got.\n   * @returns {*}\n   */\n  getValueAtIndex(index) {\n    const values = this.indexedValues;\n    if (index < values.length) {\n      return values[index];\n    }\n  }\n\n  /**\n   * Set new values for particular indexes.\n   *\n   * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.\n   *\n   * @param {Array} values List of set values.\n   */\n  setValues(values) {\n    this.indexedValues = values.slice();\n    this.runLocalHooks('change');\n  }\n\n  /**\n   * Set new value for the particular index.\n   *\n   * @param {number} index The index.\n   * @param {*} value The value to save.\n   *\n   * Note: Please keep in mind that it is not possible to set value beyond the map (not respecting already set\n   * map's size). Please use the `setValues` method when you would like to extend the map.\n   * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.\n   *\n   * @returns {boolean}\n   */\n  setValueAtIndex(index, value) {\n    if (index < this.indexedValues.length) {\n      this.indexedValues[index] = value;\n      this.runLocalHooks('change');\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Clear all values to the defaults.\n   */\n  clear() {\n    this.setDefaultValues();\n  }\n\n  /**\n   * Get length of the index map.\n   *\n   * @returns {number}\n   */\n  getLength() {\n    return this.getValues().length;\n  }\n\n  /**\n   * Set default values for elements from `0` to `n`, where `n` is equal to the handled variable.\n   *\n   * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.\n   *\n   * @private\n   * @param {number} [length] Length of list.\n   */\n  setDefaultValues() {\n    let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.indexedValues.length;\n    this.indexedValues.length = 0;\n    if (isFunction(this.initValueOrFn)) {\n      rangeEach(length - 1, index => this.indexedValues.push(this.initValueOrFn(index)));\n    } else {\n      rangeEach(length - 1, () => this.indexedValues.push(this.initValueOrFn));\n    }\n    this.runLocalHooks('change');\n  }\n\n  /**\n   * Initialize list with default values for particular indexes.\n   *\n   * @private\n   * @param {number} length New length of indexed list.\n   * @returns {IndexMap}\n   */\n  init(length) {\n    this.setDefaultValues(length);\n    this.runLocalHooks('init');\n    return this;\n  }\n\n  /**\n   * Add values to the list.\n   *\n   * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.\n   *\n   * @private\n   */\n  insert() {\n    this.runLocalHooks('change');\n  }\n\n  /**\n   * Remove values from the list.\n   *\n   * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.\n   *\n   * @private\n   */\n  remove() {\n    this.runLocalHooks('change');\n  }\n\n  /**\n   * Destroys the Map instance.\n   */\n  destroy() {\n    this.clearLocalHooks();\n    this.indexedValues = null;\n    this.initValueOrFn = null;\n  }\n}\nmixin(IndexMap, localHooks);","map":{"version":3,"names":["_defineProperty","e","r","t","_toPropertyKey","Object","defineProperty","value","enumerable","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","rangeEach","mixin","isFunction","localHooks","IndexMap","constructor","initValueOrFn","arguments","length","undefined","getValues","indexedValues","getValueAtIndex","index","values","setValues","slice","runLocalHooks","setValueAtIndex","clear","setDefaultValues","getLength","push","init","insert","remove","destroy","clearLocalHooks"],"sources":["D:/gym-project/frontend/node_modules/handsontable/translations/maps/indexMap.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport { rangeEach } from \"../../helpers/number.mjs\";\nimport { mixin } from \"../../helpers/object.mjs\";\nimport { isFunction } from \"../../helpers/function.mjs\";\nimport localHooks from \"../../mixins/localHooks.mjs\";\n/**\n * Map for storing mappings from an index to a value.\n *\n * @class IndexMap\n */\nexport class IndexMap {\n  constructor() {\n    let initValueOrFn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    /**\n     * List of values for particular indexes.\n     *\n     * @private\n     * @type {Array}\n     */\n    _defineProperty(this, \"indexedValues\", []);\n    /**\n     * Initial value or function for each existing index.\n     *\n     * @private\n     * @type {*}\n     */\n    _defineProperty(this, \"initValueOrFn\", void 0);\n    this.initValueOrFn = initValueOrFn;\n  }\n\n  /**\n   * Get full list of values for particular indexes.\n   *\n   * @returns {Array}\n   */\n  getValues() {\n    return this.indexedValues;\n  }\n\n  /**\n   * Get value for the particular index.\n   *\n   * @param {number} index Index for which value is got.\n   * @returns {*}\n   */\n  getValueAtIndex(index) {\n    const values = this.indexedValues;\n    if (index < values.length) {\n      return values[index];\n    }\n  }\n\n  /**\n   * Set new values for particular indexes.\n   *\n   * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.\n   *\n   * @param {Array} values List of set values.\n   */\n  setValues(values) {\n    this.indexedValues = values.slice();\n    this.runLocalHooks('change');\n  }\n\n  /**\n   * Set new value for the particular index.\n   *\n   * @param {number} index The index.\n   * @param {*} value The value to save.\n   *\n   * Note: Please keep in mind that it is not possible to set value beyond the map (not respecting already set\n   * map's size). Please use the `setValues` method when you would like to extend the map.\n   * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.\n   *\n   * @returns {boolean}\n   */\n  setValueAtIndex(index, value) {\n    if (index < this.indexedValues.length) {\n      this.indexedValues[index] = value;\n      this.runLocalHooks('change');\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Clear all values to the defaults.\n   */\n  clear() {\n    this.setDefaultValues();\n  }\n\n  /**\n   * Get length of the index map.\n   *\n   * @returns {number}\n   */\n  getLength() {\n    return this.getValues().length;\n  }\n\n  /**\n   * Set default values for elements from `0` to `n`, where `n` is equal to the handled variable.\n   *\n   * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.\n   *\n   * @private\n   * @param {number} [length] Length of list.\n   */\n  setDefaultValues() {\n    let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.indexedValues.length;\n    this.indexedValues.length = 0;\n    if (isFunction(this.initValueOrFn)) {\n      rangeEach(length - 1, index => this.indexedValues.push(this.initValueOrFn(index)));\n    } else {\n      rangeEach(length - 1, () => this.indexedValues.push(this.initValueOrFn));\n    }\n    this.runLocalHooks('change');\n  }\n\n  /**\n   * Initialize list with default values for particular indexes.\n   *\n   * @private\n   * @param {number} length New length of indexed list.\n   * @returns {IndexMap}\n   */\n  init(length) {\n    this.setDefaultValues(length);\n    this.runLocalHooks('init');\n    return this;\n  }\n\n  /**\n   * Add values to the list.\n   *\n   * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.\n   *\n   * @private\n   */\n  insert() {\n    this.runLocalHooks('change');\n  }\n\n  /**\n   * Remove values from the list.\n   *\n   * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.\n   *\n   * @private\n   */\n  remove() {\n    this.runLocalHooks('change');\n  }\n\n  /**\n   * Destroys the Map instance.\n   */\n  destroy() {\n    this.clearLocalHooks();\n    this.indexedValues = null;\n    this.initValueOrFn = null;\n  }\n}\nmixin(IndexMap, localHooks);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}