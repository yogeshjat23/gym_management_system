{"ast":null,"code":"function _classPrivateMethodInitSpec(e, a) {\n  _checkPrivateRedeclaration(e, a), a.add(e);\n}\nfunction _checkPrivateRedeclaration(e, t) {\n  if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _assertClassBrand(e, t, n) {\n  if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n;\n  throw new TypeError(\"Private element is not present on this object\");\n}\nimport { createHighlight as createActiveHighlight } from \"./types/activeHeader.mjs\";\nimport { createHighlight as createAreaLayeredHighlight } from \"./types/areaLayered.mjs\";\nimport { createHighlight as createAreaHighlight } from \"./types/area.mjs\";\nimport { createHighlight as createColumnHighlight } from \"./types/column.mjs\";\nimport { createHighlight as createFocusHighlight } from \"./types/focus.mjs\";\nimport { createHighlight as createCustomHighlight } from \"./types/customSelection.mjs\";\nimport { createHighlight as createFillHighlight } from \"./types/fill.mjs\";\nimport { createHighlight as createHeaderHighlight } from \"./types/header.mjs\";\nimport { createHighlight as createRowHighlight } from \"./types/row.mjs\";\nimport { HIGHLIGHT_ACTIVE_HEADER_TYPE, HIGHLIGHT_AREA_TYPE, HIGHLIGHT_FOCUS_TYPE, HIGHLIGHT_CUSTOM_SELECTION_TYPE, HIGHLIGHT_FILL_TYPE, HIGHLIGHT_HEADER_TYPE, HIGHLIGHT_ROW_TYPE, HIGHLIGHT_COLUMN_TYPE } from \"../../3rdparty/walkontable/src/index.mjs\";\nimport { arrayEach } from \"./../../helpers/array.mjs\";\nexport { HIGHLIGHT_ACTIVE_HEADER_TYPE as ACTIVE_HEADER_TYPE, HIGHLIGHT_AREA_TYPE as AREA_TYPE, HIGHLIGHT_FOCUS_TYPE as FOCUS_TYPE, HIGHLIGHT_CUSTOM_SELECTION_TYPE as CUSTOM_SELECTION_TYPE, HIGHLIGHT_FILL_TYPE as FILL_TYPE, HIGHLIGHT_HEADER_TYPE as HEADER_TYPE, HIGHLIGHT_ROW_TYPE as ROW_TYPE, HIGHLIGHT_COLUMN_TYPE as COLUMN_TYPE };\n\n/**\n * Highlight class responsible for managing Walkontable Selection classes.\n *\n * With Highlight object you can manipulate four different highlight types:\n *  - `cell` can be added only to a single cell at a time and it defines currently selected cell;\n *  - `fill` can occur only once and its highlight defines selection of autofill functionality (managed by the plugin with the same name);\n *  - `areas` can be added to multiple cells at a time. This type highlights selected cell or multiple cells.\n *    The multiple cells have to be defined as an uninterrupted order (regular shape). Otherwise, the new layer of\n *    that type should be created to manage not-consecutive selection;\n *  - `header` can occur multiple times. This type is designed to highlight only headers. Like `area` type it\n *    can appear with multiple highlights (accessed under different level layers).\n *\n * @class Highlight\n * @util\n */\nvar _Highlight_brand = /*#__PURE__*/new WeakSet();\nclass Highlight {\n  constructor(options) {\n    /**\n     * Creates (if not exist in the cache) Walkontable Selection instance.\n     *\n     * @param {Map} cacheMap The map where the instance will be cached.\n     * @param {Function} highlightFactory The function factory.\n     * @returns {VisualSelection}\n     */\n    _classPrivateMethodInitSpec(this, _Highlight_brand);\n    /**\n     * Options consumed by Highlight class and Walkontable Selection classes.\n     *\n     * @type {object}\n     */\n    _defineProperty(this, \"options\", void 0);\n    /**\n     * The property which describes which layer level of the visual selection will be modified.\n     * This option is valid only for `area` and `header` highlight types which occurs multiple times on\n     * the table (as a non-consecutive selection).\n     *\n     * An order of the layers is the same as the order of added new non-consecutive selections.\n     *\n     * @type {number}\n     * @default 0\n     */\n    _defineProperty(this, \"layerLevel\", 0);\n    /**\n     * `cell` highlight object which describes attributes for the currently selected cell.\n     * It can only occur only once on the table.\n     *\n     * @type {Selection}\n     */\n    _defineProperty(this, \"focus\", void 0);\n    /**\n     * `fill` highlight object which describes attributes for the borders for autofill functionality.\n     * It can only occur only once on the table.\n     *\n     * @type {Selection}\n     */\n    _defineProperty(this, \"fill\", void 0);\n    /**\n     * Collection of the `area` highlights. That objects describes attributes for the borders and selection of\n     * the multiple selected cells. It can occur multiple times on the table.\n     *\n     * @type {Map.<number, Selection>}\n     */\n    _defineProperty(this, \"layeredAreas\", new Map());\n    /**\n     * Collection of the `highlight` highlights. That objects describes attributes for the borders and selection of\n     * the multiple selected cells. It can occur multiple times on the table.\n     *\n     * @type {Map.<number, Selection>}\n     */\n    _defineProperty(this, \"areas\", new Map());\n    /**\n     * Collection of the `header` highlights. That objects describes attributes for the selection of\n     * the multiple selected rows in the table header. It can occur multiple times on the table.\n     *\n     * @type {Map.<number, Selection>}\n     */\n    _defineProperty(this, \"rowHeaders\", new Map());\n    /**\n     * Collection of the `header` highlights. That objects describes attributes for the selection of\n     * the multiple selected columns in the table header. It can occur multiple times on the table.\n     *\n     * @type {Map.<number, Selection>}\n     */\n    _defineProperty(this, \"columnHeaders\", new Map());\n    /**\n     * Collection of the `active-header` highlights. That objects describes attributes for the selection of\n     * the multiple selected rows in the table header. The table headers which have selected all items in\n     * a row will be marked as `active-header`.\n     *\n     * @type {Map.<number, Selection>}\n     */\n    _defineProperty(this, \"activeRowHeaders\", new Map());\n    /**\n     * Collection of the `active-header` highlights. That objects describes attributes for the selection of\n     * the multiple selected columns in the table header. The table headers which have selected all items in\n     * a row will be marked as `active-header`.\n     *\n     * @type {Map.<number, Selection>}\n     */\n    _defineProperty(this, \"activeColumnHeaders\", new Map());\n    /**\n     * Collection of the `active-header` highlights. That objects describes attributes for the selection of\n     * the selected corner in the table header. The table headers which have selected all items in\n     * a row will be marked as `active-header`.\n     *\n     * @type {Map.<number, Selection>}\n     */\n    _defineProperty(this, \"activeCornerHeaders\", new Map());\n    /**\n     * Collection of the `rows` highlights. That objects describes attributes for the selection of\n     * the multiple selected cells in a row. It can occur multiple times on the table.\n     *\n     * @type {Map.<number, Selection>}\n     */\n    _defineProperty(this, \"rowHighlights\", new Map());\n    /**\n     * Collection of the `columns` highlights. That objects describes attributes for the selection of\n     * the multiple selected cells in a column. It can occur multiple times on the table.\n     *\n     * @type {Map.<number, Selection>}\n     */\n    _defineProperty(this, \"columnHighlights\", new Map());\n    /**\n     * Collection of the `custom-selection`, holder for example borders added through CustomBorders plugin.\n     *\n     * @type {Selection[]}\n     */\n    _defineProperty(this, \"customSelections\", []);\n    this.options = options;\n    this.focus = createFocusHighlight(options);\n    this.fill = createFillHighlight(options);\n  }\n\n  /**\n   * Check if highlight cell rendering is disabled for specified highlight type.\n   *\n   * @param {string} highlightType Highlight type. Possible values are: `cell`, `area`, `fill` or `header`.\n   * @param {CellCoords} coords The CellCoords instance with defined visual coordinates.\n   * @returns {boolean}\n   */\n  isEnabledFor(highlightType, coords) {\n    let type = highlightType;\n\n    // Legacy compatibility.\n    if (highlightType === HIGHLIGHT_FOCUS_TYPE) {\n      type = 'current'; // One from settings for `disableVisualSelection` up to Handsontable 0.36/Handsontable Pro 1.16.0.\n    }\n    let disableHighlight = this.options.disabledCellSelection(coords.row, coords.col);\n    if (typeof disableHighlight === 'string') {\n      disableHighlight = [disableHighlight];\n    }\n    return disableHighlight === false || Array.isArray(disableHighlight) && !disableHighlight.includes(type);\n  }\n\n  /**\n   * Set a new layer level to make access to the desire `area` and `header` highlights.\n   *\n   * @param {number} [level=0] Layer level to use.\n   * @returns {Highlight}\n   */\n  useLayerLevel() {\n    let level = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    this.layerLevel = level;\n    return this;\n  }\n\n  /**\n   * Get Walkontable Selection instance created for controlling highlight of the currently\n   * focused cell (or header).\n   *\n   * @returns {Selection}\n   */\n  getFocus() {\n    return this.focus;\n  }\n\n  /**\n   * Get Walkontable Selection instance created for controlling highlight of the autofill functionality.\n   *\n   * @returns {Selection}\n   */\n  getFill() {\n    return this.fill;\n  }\n\n  /**\n   * Creates (if not exist in the cache) Walkontable Selection instance created for controlling\n   * `area` highlights.\n   *\n   * @returns {Selection}\n   */\n  createLayeredArea() {\n    return _assertClassBrand(_Highlight_brand, this, _createHighlight).call(this, this.layeredAreas, createAreaLayeredHighlight);\n  }\n\n  /**\n   * Get all Walkontable Selection instances which describes the state of the visual highlight of the cells.\n   *\n   * @returns {Selection[]}\n   */\n  getLayeredAreas() {\n    return [...this.layeredAreas.values()];\n  }\n\n  /**\n   * Creates (if not exist in the cache) Walkontable Selection instance created for controlling\n   * `highlight` highlights.\n   *\n   * @returns {Selection}\n   */\n  createArea() {\n    return _assertClassBrand(_Highlight_brand, this, _createHighlight).call(this, this.areas, createAreaHighlight);\n  }\n\n  /**\n   * Get all Walkontable Selection instances which describes the state of the visual highlight of the cells.\n   *\n   * @returns {Selection[]}\n   */\n  getAreas() {\n    return [...this.areas.values()];\n  }\n\n  /**\n   * Creates (if not exist in the cache) Walkontable Selection instance created for controlling\n   * header highlight for rows.\n   *\n   * @returns {Selection}\n   */\n  createRowHeader() {\n    return _assertClassBrand(_Highlight_brand, this, _createHighlight).call(this, this.rowHeaders, createHeaderHighlight);\n  }\n\n  /**\n   * Get all Walkontable Selection instances which describes the state of the visual highlight of the headers.\n   *\n   * @returns {Selection[]}\n   */\n  getRowHeaders() {\n    return [...this.rowHeaders.values()];\n  }\n\n  /**\n   * Creates (if not exist in the cache) Walkontable Selection instance created for controlling\n   * header highlight for columns.\n   *\n   * @returns {Selection}\n   */\n  createColumnHeader() {\n    return _assertClassBrand(_Highlight_brand, this, _createHighlight).call(this, this.columnHeaders, createHeaderHighlight);\n  }\n\n  /**\n   * Get all Walkontable Selection instances which describes the state of the visual highlight of the headers.\n   *\n   * @returns {Selection[]}\n   */\n  getColumnHeaders() {\n    return [...this.columnHeaders.values()];\n  }\n\n  /**\n   * Creates (if not exist in the cache) Walkontable Selection instance created for controlling\n   * highlight for active row headers.\n   *\n   * @returns {Selection}\n   */\n  createActiveRowHeader() {\n    return _assertClassBrand(_Highlight_brand, this, _createHighlight).call(this, this.activeRowHeaders, createActiveHighlight);\n  }\n\n  /**\n   * Get all Walkontable Selection instances which describes the state of the visual highlight of the active headers.\n   *\n   * @returns {Selection[]}\n   */\n  getActiveRowHeaders() {\n    return [...this.activeRowHeaders.values()];\n  }\n\n  /**\n   * Creates (if not exist in the cache) Walkontable Selection instance created for controlling\n   * highlight for active column headers.\n   *\n   * @returns {Selection}\n   */\n  createActiveColumnHeader() {\n    return _assertClassBrand(_Highlight_brand, this, _createHighlight).call(this, this.activeColumnHeaders, createActiveHighlight);\n  }\n\n  /**\n   * Get all Walkontable Selection instances which describes the state of the visual highlight of the active headers.\n   *\n   * @returns {Selection[]}\n   */\n  getActiveColumnHeaders() {\n    return [...this.activeColumnHeaders.values()];\n  }\n\n  /**\n   * Creates (if not exist in the cache) Walkontable Selection instance created for controlling\n   * highlight for the headers corner.\n   *\n   * @returns {Selection}\n   */\n  createActiveCornerHeader() {\n    return _assertClassBrand(_Highlight_brand, this, _createHighlight).call(this, this.activeCornerHeaders, createActiveHighlight);\n  }\n\n  /**\n   * Get all Walkontable Selection instances which describes the state of the visual highlight of the headers corner.\n   *\n   * @returns {Selection[]}\n   */\n  getActiveCornerHeaders() {\n    return [...this.activeCornerHeaders.values()];\n  }\n\n  /**\n   * Creates (if not exist in the cache) Walkontable Selection instance created for controlling\n   * highlight cells in a row.\n   *\n   * @returns {Selection}\n   */\n  createRowHighlight() {\n    return _assertClassBrand(_Highlight_brand, this, _createHighlight).call(this, this.rowHighlights, createRowHighlight);\n  }\n\n  /**\n   * Get all Walkontable Selection instances which describes the state of the rows highlighting.\n   *\n   * @returns {Selection[]}\n   */\n  getRowHighlights() {\n    return [...this.rowHighlights.values()];\n  }\n\n  /**\n   * Creates (if not exist in the cache) Walkontable Selection instance created for controlling\n   * highlight cells in a column.\n   *\n   * @returns {Selection}\n   */\n  createColumnHighlight() {\n    return _assertClassBrand(_Highlight_brand, this, _createHighlight).call(this, this.columnHighlights, createColumnHighlight);\n  }\n\n  /**\n   * Get all Walkontable Selection instances which describes the state of the columns highlighting.\n   *\n   * @returns {Selection[]}\n   */\n  getColumnHighlights() {\n    return [...this.columnHighlights.values()];\n  }\n\n  /**\n   * Get Walkontable Selection instance created for controlling highlight of the custom selection functionality.\n   *\n   * @returns {Selection}\n   */\n  getCustomSelections() {\n    return [...this.customSelections.values()];\n  }\n\n  /**\n   * Add selection to the custom selection instance. The new selection are added to the end of the selection collection.\n   *\n   * @param {object} selectionInstance The selection instance.\n   */\n  addCustomSelection(selectionInstance) {\n    this.customSelections.push(createCustomHighlight({\n      ...this.options,\n      ...selectionInstance\n    }));\n  }\n\n  /**\n   * Perform cleaning visual highlights for the whole table.\n   */\n  clear() {\n    this.focus.clear();\n    this.fill.clear();\n    arrayEach(this.areas.values(), highlight => void highlight.clear());\n    arrayEach(this.layeredAreas.values(), highlight => void highlight.clear());\n    arrayEach(this.rowHeaders.values(), highlight => void highlight.clear());\n    arrayEach(this.columnHeaders.values(), highlight => void highlight.clear());\n    arrayEach(this.activeRowHeaders.values(), highlight => void highlight.clear());\n    arrayEach(this.activeColumnHeaders.values(), highlight => void highlight.clear());\n    arrayEach(this.activeCornerHeaders.values(), highlight => void highlight.clear());\n    arrayEach(this.rowHighlights.values(), highlight => void highlight.clear());\n    arrayEach(this.columnHighlights.values(), highlight => void highlight.clear());\n  }\n  /**\n   * This object can be iterate over using `for of` syntax or using internal `arrayEach` helper.\n   *\n   * @returns {Selection[]}\n   */\n  [Symbol.iterator]() {\n    return [this.focus, this.fill, ...this.areas.values(), ...this.layeredAreas.values(), ...this.rowHeaders.values(), ...this.columnHeaders.values(), ...this.activeRowHeaders.values(), ...this.activeColumnHeaders.values(), ...this.activeCornerHeaders.values(), ...this.rowHighlights.values(), ...this.columnHighlights.values(), ...this.customSelections][Symbol.iterator]();\n  }\n}\nfunction _createHighlight(cacheMap, highlightFactory) {\n  const layerLevel = this.layerLevel;\n  if (cacheMap.has(layerLevel)) {\n    return cacheMap.get(layerLevel);\n  }\n  const highlight = highlightFactory({\n    layerLevel,\n    ...this.options\n  });\n  cacheMap.set(layerLevel, highlight);\n  return highlight;\n}\nexport default Highlight;","map":{"version":3,"names":["_classPrivateMethodInitSpec","e","a","_checkPrivateRedeclaration","add","t","has","TypeError","_defineProperty","r","_toPropertyKey","Object","defineProperty","value","enumerable","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","String","Number","_assertClassBrand","n","arguments","length","createHighlight","createActiveHighlight","createAreaLayeredHighlight","createAreaHighlight","createColumnHighlight","createFocusHighlight","createCustomHighlight","createFillHighlight","createHeaderHighlight","createRowHighlight","HIGHLIGHT_ACTIVE_HEADER_TYPE","HIGHLIGHT_AREA_TYPE","HIGHLIGHT_FOCUS_TYPE","HIGHLIGHT_CUSTOM_SELECTION_TYPE","HIGHLIGHT_FILL_TYPE","HIGHLIGHT_HEADER_TYPE","HIGHLIGHT_ROW_TYPE","HIGHLIGHT_COLUMN_TYPE","arrayEach","ACTIVE_HEADER_TYPE","AREA_TYPE","FOCUS_TYPE","CUSTOM_SELECTION_TYPE","FILL_TYPE","HEADER_TYPE","ROW_TYPE","COLUMN_TYPE","_Highlight_brand","WeakSet","Highlight","constructor","options","Map","focus","fill","isEnabledFor","highlightType","coords","type","disableHighlight","disabledCellSelection","row","col","Array","isArray","includes","useLayerLevel","level","undefined","layerLevel","getFocus","getFill","createLayeredArea","_createHighlight","layeredAreas","getLayeredAreas","values","createArea","areas","getAreas","createRowHeader","rowHeaders","getRowHeaders","createColumnHeader","columnHeaders","getColumnHeaders","createActiveRowHeader","activeRowHeaders","getActiveRowHeaders","createActiveColumnHeader","activeColumnHeaders","getActiveColumnHeaders","createActiveCornerHeader","activeCornerHeaders","getActiveCornerHeaders","rowHighlights","getRowHighlights","columnHighlights","getColumnHighlights","getCustomSelections","customSelections","addCustomSelection","selectionInstance","push","clear","highlight","iterator","cacheMap","highlightFactory","get","set"],"sources":["D:/gym-project/frontend/node_modules/handsontable/selection/highlight/highlight.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nfunction _classPrivateMethodInitSpec(e, a) { _checkPrivateRedeclaration(e, a), a.add(e); }\nfunction _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _assertClassBrand(e, t, n) { if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError(\"Private element is not present on this object\"); }\nimport { createHighlight as createActiveHighlight } from \"./types/activeHeader.mjs\";\nimport { createHighlight as createAreaLayeredHighlight } from \"./types/areaLayered.mjs\";\nimport { createHighlight as createAreaHighlight } from \"./types/area.mjs\";\nimport { createHighlight as createColumnHighlight } from \"./types/column.mjs\";\nimport { createHighlight as createFocusHighlight } from \"./types/focus.mjs\";\nimport { createHighlight as createCustomHighlight } from \"./types/customSelection.mjs\";\nimport { createHighlight as createFillHighlight } from \"./types/fill.mjs\";\nimport { createHighlight as createHeaderHighlight } from \"./types/header.mjs\";\nimport { createHighlight as createRowHighlight } from \"./types/row.mjs\";\nimport { HIGHLIGHT_ACTIVE_HEADER_TYPE, HIGHLIGHT_AREA_TYPE, HIGHLIGHT_FOCUS_TYPE, HIGHLIGHT_CUSTOM_SELECTION_TYPE, HIGHLIGHT_FILL_TYPE, HIGHLIGHT_HEADER_TYPE, HIGHLIGHT_ROW_TYPE, HIGHLIGHT_COLUMN_TYPE } from \"../../3rdparty/walkontable/src/index.mjs\";\nimport { arrayEach } from \"./../../helpers/array.mjs\";\nexport { HIGHLIGHT_ACTIVE_HEADER_TYPE as ACTIVE_HEADER_TYPE, HIGHLIGHT_AREA_TYPE as AREA_TYPE, HIGHLIGHT_FOCUS_TYPE as FOCUS_TYPE, HIGHLIGHT_CUSTOM_SELECTION_TYPE as CUSTOM_SELECTION_TYPE, HIGHLIGHT_FILL_TYPE as FILL_TYPE, HIGHLIGHT_HEADER_TYPE as HEADER_TYPE, HIGHLIGHT_ROW_TYPE as ROW_TYPE, HIGHLIGHT_COLUMN_TYPE as COLUMN_TYPE };\n\n/**\n * Highlight class responsible for managing Walkontable Selection classes.\n *\n * With Highlight object you can manipulate four different highlight types:\n *  - `cell` can be added only to a single cell at a time and it defines currently selected cell;\n *  - `fill` can occur only once and its highlight defines selection of autofill functionality (managed by the plugin with the same name);\n *  - `areas` can be added to multiple cells at a time. This type highlights selected cell or multiple cells.\n *    The multiple cells have to be defined as an uninterrupted order (regular shape). Otherwise, the new layer of\n *    that type should be created to manage not-consecutive selection;\n *  - `header` can occur multiple times. This type is designed to highlight only headers. Like `area` type it\n *    can appear with multiple highlights (accessed under different level layers).\n *\n * @class Highlight\n * @util\n */\nvar _Highlight_brand = /*#__PURE__*/new WeakSet();\nclass Highlight {\n  constructor(options) {\n    /**\n     * Creates (if not exist in the cache) Walkontable Selection instance.\n     *\n     * @param {Map} cacheMap The map where the instance will be cached.\n     * @param {Function} highlightFactory The function factory.\n     * @returns {VisualSelection}\n     */\n    _classPrivateMethodInitSpec(this, _Highlight_brand);\n    /**\n     * Options consumed by Highlight class and Walkontable Selection classes.\n     *\n     * @type {object}\n     */\n    _defineProperty(this, \"options\", void 0);\n    /**\n     * The property which describes which layer level of the visual selection will be modified.\n     * This option is valid only for `area` and `header` highlight types which occurs multiple times on\n     * the table (as a non-consecutive selection).\n     *\n     * An order of the layers is the same as the order of added new non-consecutive selections.\n     *\n     * @type {number}\n     * @default 0\n     */\n    _defineProperty(this, \"layerLevel\", 0);\n    /**\n     * `cell` highlight object which describes attributes for the currently selected cell.\n     * It can only occur only once on the table.\n     *\n     * @type {Selection}\n     */\n    _defineProperty(this, \"focus\", void 0);\n    /**\n     * `fill` highlight object which describes attributes for the borders for autofill functionality.\n     * It can only occur only once on the table.\n     *\n     * @type {Selection}\n     */\n    _defineProperty(this, \"fill\", void 0);\n    /**\n     * Collection of the `area` highlights. That objects describes attributes for the borders and selection of\n     * the multiple selected cells. It can occur multiple times on the table.\n     *\n     * @type {Map.<number, Selection>}\n     */\n    _defineProperty(this, \"layeredAreas\", new Map());\n    /**\n     * Collection of the `highlight` highlights. That objects describes attributes for the borders and selection of\n     * the multiple selected cells. It can occur multiple times on the table.\n     *\n     * @type {Map.<number, Selection>}\n     */\n    _defineProperty(this, \"areas\", new Map());\n    /**\n     * Collection of the `header` highlights. That objects describes attributes for the selection of\n     * the multiple selected rows in the table header. It can occur multiple times on the table.\n     *\n     * @type {Map.<number, Selection>}\n     */\n    _defineProperty(this, \"rowHeaders\", new Map());\n    /**\n     * Collection of the `header` highlights. That objects describes attributes for the selection of\n     * the multiple selected columns in the table header. It can occur multiple times on the table.\n     *\n     * @type {Map.<number, Selection>}\n     */\n    _defineProperty(this, \"columnHeaders\", new Map());\n    /**\n     * Collection of the `active-header` highlights. That objects describes attributes for the selection of\n     * the multiple selected rows in the table header. The table headers which have selected all items in\n     * a row will be marked as `active-header`.\n     *\n     * @type {Map.<number, Selection>}\n     */\n    _defineProperty(this, \"activeRowHeaders\", new Map());\n    /**\n     * Collection of the `active-header` highlights. That objects describes attributes for the selection of\n     * the multiple selected columns in the table header. The table headers which have selected all items in\n     * a row will be marked as `active-header`.\n     *\n     * @type {Map.<number, Selection>}\n     */\n    _defineProperty(this, \"activeColumnHeaders\", new Map());\n    /**\n     * Collection of the `active-header` highlights. That objects describes attributes for the selection of\n     * the selected corner in the table header. The table headers which have selected all items in\n     * a row will be marked as `active-header`.\n     *\n     * @type {Map.<number, Selection>}\n     */\n    _defineProperty(this, \"activeCornerHeaders\", new Map());\n    /**\n     * Collection of the `rows` highlights. That objects describes attributes for the selection of\n     * the multiple selected cells in a row. It can occur multiple times on the table.\n     *\n     * @type {Map.<number, Selection>}\n     */\n    _defineProperty(this, \"rowHighlights\", new Map());\n    /**\n     * Collection of the `columns` highlights. That objects describes attributes for the selection of\n     * the multiple selected cells in a column. It can occur multiple times on the table.\n     *\n     * @type {Map.<number, Selection>}\n     */\n    _defineProperty(this, \"columnHighlights\", new Map());\n    /**\n     * Collection of the `custom-selection`, holder for example borders added through CustomBorders plugin.\n     *\n     * @type {Selection[]}\n     */\n    _defineProperty(this, \"customSelections\", []);\n    this.options = options;\n    this.focus = createFocusHighlight(options);\n    this.fill = createFillHighlight(options);\n  }\n\n  /**\n   * Check if highlight cell rendering is disabled for specified highlight type.\n   *\n   * @param {string} highlightType Highlight type. Possible values are: `cell`, `area`, `fill` or `header`.\n   * @param {CellCoords} coords The CellCoords instance with defined visual coordinates.\n   * @returns {boolean}\n   */\n  isEnabledFor(highlightType, coords) {\n    let type = highlightType;\n\n    // Legacy compatibility.\n    if (highlightType === HIGHLIGHT_FOCUS_TYPE) {\n      type = 'current'; // One from settings for `disableVisualSelection` up to Handsontable 0.36/Handsontable Pro 1.16.0.\n    }\n    let disableHighlight = this.options.disabledCellSelection(coords.row, coords.col);\n    if (typeof disableHighlight === 'string') {\n      disableHighlight = [disableHighlight];\n    }\n    return disableHighlight === false || Array.isArray(disableHighlight) && !disableHighlight.includes(type);\n  }\n\n  /**\n   * Set a new layer level to make access to the desire `area` and `header` highlights.\n   *\n   * @param {number} [level=0] Layer level to use.\n   * @returns {Highlight}\n   */\n  useLayerLevel() {\n    let level = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    this.layerLevel = level;\n    return this;\n  }\n\n  /**\n   * Get Walkontable Selection instance created for controlling highlight of the currently\n   * focused cell (or header).\n   *\n   * @returns {Selection}\n   */\n  getFocus() {\n    return this.focus;\n  }\n\n  /**\n   * Get Walkontable Selection instance created for controlling highlight of the autofill functionality.\n   *\n   * @returns {Selection}\n   */\n  getFill() {\n    return this.fill;\n  }\n\n  /**\n   * Creates (if not exist in the cache) Walkontable Selection instance created for controlling\n   * `area` highlights.\n   *\n   * @returns {Selection}\n   */\n  createLayeredArea() {\n    return _assertClassBrand(_Highlight_brand, this, _createHighlight).call(this, this.layeredAreas, createAreaLayeredHighlight);\n  }\n\n  /**\n   * Get all Walkontable Selection instances which describes the state of the visual highlight of the cells.\n   *\n   * @returns {Selection[]}\n   */\n  getLayeredAreas() {\n    return [...this.layeredAreas.values()];\n  }\n\n  /**\n   * Creates (if not exist in the cache) Walkontable Selection instance created for controlling\n   * `highlight` highlights.\n   *\n   * @returns {Selection}\n   */\n  createArea() {\n    return _assertClassBrand(_Highlight_brand, this, _createHighlight).call(this, this.areas, createAreaHighlight);\n  }\n\n  /**\n   * Get all Walkontable Selection instances which describes the state of the visual highlight of the cells.\n   *\n   * @returns {Selection[]}\n   */\n  getAreas() {\n    return [...this.areas.values()];\n  }\n\n  /**\n   * Creates (if not exist in the cache) Walkontable Selection instance created for controlling\n   * header highlight for rows.\n   *\n   * @returns {Selection}\n   */\n  createRowHeader() {\n    return _assertClassBrand(_Highlight_brand, this, _createHighlight).call(this, this.rowHeaders, createHeaderHighlight);\n  }\n\n  /**\n   * Get all Walkontable Selection instances which describes the state of the visual highlight of the headers.\n   *\n   * @returns {Selection[]}\n   */\n  getRowHeaders() {\n    return [...this.rowHeaders.values()];\n  }\n\n  /**\n   * Creates (if not exist in the cache) Walkontable Selection instance created for controlling\n   * header highlight for columns.\n   *\n   * @returns {Selection}\n   */\n  createColumnHeader() {\n    return _assertClassBrand(_Highlight_brand, this, _createHighlight).call(this, this.columnHeaders, createHeaderHighlight);\n  }\n\n  /**\n   * Get all Walkontable Selection instances which describes the state of the visual highlight of the headers.\n   *\n   * @returns {Selection[]}\n   */\n  getColumnHeaders() {\n    return [...this.columnHeaders.values()];\n  }\n\n  /**\n   * Creates (if not exist in the cache) Walkontable Selection instance created for controlling\n   * highlight for active row headers.\n   *\n   * @returns {Selection}\n   */\n  createActiveRowHeader() {\n    return _assertClassBrand(_Highlight_brand, this, _createHighlight).call(this, this.activeRowHeaders, createActiveHighlight);\n  }\n\n  /**\n   * Get all Walkontable Selection instances which describes the state of the visual highlight of the active headers.\n   *\n   * @returns {Selection[]}\n   */\n  getActiveRowHeaders() {\n    return [...this.activeRowHeaders.values()];\n  }\n\n  /**\n   * Creates (if not exist in the cache) Walkontable Selection instance created for controlling\n   * highlight for active column headers.\n   *\n   * @returns {Selection}\n   */\n  createActiveColumnHeader() {\n    return _assertClassBrand(_Highlight_brand, this, _createHighlight).call(this, this.activeColumnHeaders, createActiveHighlight);\n  }\n\n  /**\n   * Get all Walkontable Selection instances which describes the state of the visual highlight of the active headers.\n   *\n   * @returns {Selection[]}\n   */\n  getActiveColumnHeaders() {\n    return [...this.activeColumnHeaders.values()];\n  }\n\n  /**\n   * Creates (if not exist in the cache) Walkontable Selection instance created for controlling\n   * highlight for the headers corner.\n   *\n   * @returns {Selection}\n   */\n  createActiveCornerHeader() {\n    return _assertClassBrand(_Highlight_brand, this, _createHighlight).call(this, this.activeCornerHeaders, createActiveHighlight);\n  }\n\n  /**\n   * Get all Walkontable Selection instances which describes the state of the visual highlight of the headers corner.\n   *\n   * @returns {Selection[]}\n   */\n  getActiveCornerHeaders() {\n    return [...this.activeCornerHeaders.values()];\n  }\n\n  /**\n   * Creates (if not exist in the cache) Walkontable Selection instance created for controlling\n   * highlight cells in a row.\n   *\n   * @returns {Selection}\n   */\n  createRowHighlight() {\n    return _assertClassBrand(_Highlight_brand, this, _createHighlight).call(this, this.rowHighlights, createRowHighlight);\n  }\n\n  /**\n   * Get all Walkontable Selection instances which describes the state of the rows highlighting.\n   *\n   * @returns {Selection[]}\n   */\n  getRowHighlights() {\n    return [...this.rowHighlights.values()];\n  }\n\n  /**\n   * Creates (if not exist in the cache) Walkontable Selection instance created for controlling\n   * highlight cells in a column.\n   *\n   * @returns {Selection}\n   */\n  createColumnHighlight() {\n    return _assertClassBrand(_Highlight_brand, this, _createHighlight).call(this, this.columnHighlights, createColumnHighlight);\n  }\n\n  /**\n   * Get all Walkontable Selection instances which describes the state of the columns highlighting.\n   *\n   * @returns {Selection[]}\n   */\n  getColumnHighlights() {\n    return [...this.columnHighlights.values()];\n  }\n\n  /**\n   * Get Walkontable Selection instance created for controlling highlight of the custom selection functionality.\n   *\n   * @returns {Selection}\n   */\n  getCustomSelections() {\n    return [...this.customSelections.values()];\n  }\n\n  /**\n   * Add selection to the custom selection instance. The new selection are added to the end of the selection collection.\n   *\n   * @param {object} selectionInstance The selection instance.\n   */\n  addCustomSelection(selectionInstance) {\n    this.customSelections.push(createCustomHighlight({\n      ...this.options,\n      ...selectionInstance\n    }));\n  }\n\n  /**\n   * Perform cleaning visual highlights for the whole table.\n   */\n  clear() {\n    this.focus.clear();\n    this.fill.clear();\n    arrayEach(this.areas.values(), highlight => void highlight.clear());\n    arrayEach(this.layeredAreas.values(), highlight => void highlight.clear());\n    arrayEach(this.rowHeaders.values(), highlight => void highlight.clear());\n    arrayEach(this.columnHeaders.values(), highlight => void highlight.clear());\n    arrayEach(this.activeRowHeaders.values(), highlight => void highlight.clear());\n    arrayEach(this.activeColumnHeaders.values(), highlight => void highlight.clear());\n    arrayEach(this.activeCornerHeaders.values(), highlight => void highlight.clear());\n    arrayEach(this.rowHighlights.values(), highlight => void highlight.clear());\n    arrayEach(this.columnHighlights.values(), highlight => void highlight.clear());\n  }\n  /**\n   * This object can be iterate over using `for of` syntax or using internal `arrayEach` helper.\n   *\n   * @returns {Selection[]}\n   */\n  [Symbol.iterator]() {\n    return [this.focus, this.fill, ...this.areas.values(), ...this.layeredAreas.values(), ...this.rowHeaders.values(), ...this.columnHeaders.values(), ...this.activeRowHeaders.values(), ...this.activeColumnHeaders.values(), ...this.activeCornerHeaders.values(), ...this.rowHighlights.values(), ...this.columnHighlights.values(), ...this.customSelections][Symbol.iterator]();\n  }\n}\nfunction _createHighlight(cacheMap, highlightFactory) {\n  const layerLevel = this.layerLevel;\n  if (cacheMap.has(layerLevel)) {\n    return cacheMap.get(layerLevel);\n  }\n  const highlight = highlightFactory({\n    layerLevel,\n    ...this.options\n  });\n  cacheMap.set(layerLevel, highlight);\n  return highlight;\n}\nexport default Highlight;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}