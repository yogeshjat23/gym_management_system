{"ast":null,"code":"import { isDefined } from \"../../helpers/mixed.mjs\";\nimport { ASC_SORT_STATE, DESC_SORT_STATE } from \"./utils.mjs\";\nconst HEADER_CLASS_ASC_SORT = 'ascending';\nconst HEADER_CLASS_DESC_SORT = 'descending';\nconst HEADER_CLASS_INDICATOR_DISABLED = 'indicatorDisabled';\nconst HEADER_SORT_CLASS = 'columnSorting';\nconst HEADER_ACTION_CLASS = 'sortAction';\nconst orderToCssClass = new Map([[ASC_SORT_STATE, HEADER_CLASS_ASC_SORT], [DESC_SORT_STATE, HEADER_CLASS_DESC_SORT]]);\n\n/**\n * Get CSS classes which should be added to particular column header.\n *\n * @param {object} columnStatesManager Instance of column state manager.\n * @param {number} column Visual column index.\n * @param {boolean} showSortIndicator Indicates if indicator should be shown for the particular column.\n * @param {boolean} headerAction Indicates if header click to sort should be possible.\n * @returns {Array} Array of CSS classes.\n */\nexport function getClassesToAdd(columnStatesManager, column, showSortIndicator, headerAction) {\n  const cssClasses = [HEADER_SORT_CLASS];\n  if (headerAction) {\n    cssClasses.push(HEADER_ACTION_CLASS);\n  }\n  if (showSortIndicator === false) {\n    cssClasses.push(HEADER_CLASS_INDICATOR_DISABLED);\n    return cssClasses;\n  }\n  const columnOrder = columnStatesManager.getSortOrderOfColumn(column);\n  if (isDefined(columnOrder)) {\n    cssClasses.push(orderToCssClass.get(columnOrder));\n  }\n  return cssClasses;\n}\n\n/**\n * Get CSS classes which should be removed from column header.\n *\n * @returns {Array} Array of CSS classes.\n */\nexport function getClassesToRemove() {\n  return Array.from(orderToCssClass.values()).concat(HEADER_ACTION_CLASS, HEADER_CLASS_INDICATOR_DISABLED, HEADER_SORT_CLASS);\n}","map":{"version":3,"names":["isDefined","ASC_SORT_STATE","DESC_SORT_STATE","HEADER_CLASS_ASC_SORT","HEADER_CLASS_DESC_SORT","HEADER_CLASS_INDICATOR_DISABLED","HEADER_SORT_CLASS","HEADER_ACTION_CLASS","orderToCssClass","Map","getClassesToAdd","columnStatesManager","column","showSortIndicator","headerAction","cssClasses","push","columnOrder","getSortOrderOfColumn","get","getClassesToRemove","Array","from","values","concat"],"sources":["D:/gym-project/frontend/node_modules/handsontable/plugins/columnSorting/domHelpers.mjs"],"sourcesContent":["import \"core-js/modules/es.array.push.js\";\nimport { isDefined } from \"../../helpers/mixed.mjs\";\nimport { ASC_SORT_STATE, DESC_SORT_STATE } from \"./utils.mjs\";\nconst HEADER_CLASS_ASC_SORT = 'ascending';\nconst HEADER_CLASS_DESC_SORT = 'descending';\nconst HEADER_CLASS_INDICATOR_DISABLED = 'indicatorDisabled';\nconst HEADER_SORT_CLASS = 'columnSorting';\nconst HEADER_ACTION_CLASS = 'sortAction';\nconst orderToCssClass = new Map([[ASC_SORT_STATE, HEADER_CLASS_ASC_SORT], [DESC_SORT_STATE, HEADER_CLASS_DESC_SORT]]);\n\n/**\n * Get CSS classes which should be added to particular column header.\n *\n * @param {object} columnStatesManager Instance of column state manager.\n * @param {number} column Visual column index.\n * @param {boolean} showSortIndicator Indicates if indicator should be shown for the particular column.\n * @param {boolean} headerAction Indicates if header click to sort should be possible.\n * @returns {Array} Array of CSS classes.\n */\nexport function getClassesToAdd(columnStatesManager, column, showSortIndicator, headerAction) {\n  const cssClasses = [HEADER_SORT_CLASS];\n  if (headerAction) {\n    cssClasses.push(HEADER_ACTION_CLASS);\n  }\n  if (showSortIndicator === false) {\n    cssClasses.push(HEADER_CLASS_INDICATOR_DISABLED);\n    return cssClasses;\n  }\n  const columnOrder = columnStatesManager.getSortOrderOfColumn(column);\n  if (isDefined(columnOrder)) {\n    cssClasses.push(orderToCssClass.get(columnOrder));\n  }\n  return cssClasses;\n}\n\n/**\n * Get CSS classes which should be removed from column header.\n *\n * @returns {Array} Array of CSS classes.\n */\nexport function getClassesToRemove() {\n  return Array.from(orderToCssClass.values()).concat(HEADER_ACTION_CLASS, HEADER_CLASS_INDICATOR_DISABLED, HEADER_SORT_CLASS);\n}"],"mappings":"AACA,SAASA,SAAS,QAAQ,yBAAyB;AACnD,SAASC,cAAc,EAAEC,eAAe,QAAQ,aAAa;AAC7D,MAAMC,qBAAqB,GAAG,WAAW;AACzC,MAAMC,sBAAsB,GAAG,YAAY;AAC3C,MAAMC,+BAA+B,GAAG,mBAAmB;AAC3D,MAAMC,iBAAiB,GAAG,eAAe;AACzC,MAAMC,mBAAmB,GAAG,YAAY;AACxC,MAAMC,eAAe,GAAG,IAAIC,GAAG,CAAC,CAAC,CAACR,cAAc,EAAEE,qBAAqB,CAAC,EAAE,CAACD,eAAe,EAAEE,sBAAsB,CAAC,CAAC,CAAC;;AAErH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASM,eAAeA,CAACC,mBAAmB,EAAEC,MAAM,EAAEC,iBAAiB,EAAEC,YAAY,EAAE;EAC5F,MAAMC,UAAU,GAAG,CAACT,iBAAiB,CAAC;EACtC,IAAIQ,YAAY,EAAE;IAChBC,UAAU,CAACC,IAAI,CAACT,mBAAmB,CAAC;EACtC;EACA,IAAIM,iBAAiB,KAAK,KAAK,EAAE;IAC/BE,UAAU,CAACC,IAAI,CAACX,+BAA+B,CAAC;IAChD,OAAOU,UAAU;EACnB;EACA,MAAME,WAAW,GAAGN,mBAAmB,CAACO,oBAAoB,CAACN,MAAM,CAAC;EACpE,IAAIZ,SAAS,CAACiB,WAAW,CAAC,EAAE;IAC1BF,UAAU,CAACC,IAAI,CAACR,eAAe,CAACW,GAAG,CAACF,WAAW,CAAC,CAAC;EACnD;EACA,OAAOF,UAAU;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASK,kBAAkBA,CAAA,EAAG;EACnC,OAAOC,KAAK,CAACC,IAAI,CAACd,eAAe,CAACe,MAAM,CAAC,CAAC,CAAC,CAACC,MAAM,CAACjB,mBAAmB,EAAEF,+BAA+B,EAAEC,iBAAiB,CAAC;AAC7H","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}