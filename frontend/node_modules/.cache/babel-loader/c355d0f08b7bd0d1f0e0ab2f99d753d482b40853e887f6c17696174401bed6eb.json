{"ast":null,"code":"/* eslint-disable no-restricted-globals */\n/**\n * Polyfill for requestAnimationFrame.\n *\n * @param {Function} callback The function to call when it's time.\n * @returns {number}\n */\nexport function requestAnimationFrame(callback) {\n  return window.requestAnimationFrame(callback);\n}\n\n/**\n * Polyfill for cancelAnimationFrame.\n *\n * @param {number} id The request Id, generated by `requestAnimationFrame`.\n */\nexport function cancelAnimationFrame(id) {\n  window.cancelAnimationFrame(id);\n}\n\n/**\n * @returns {boolean}\n */\nexport function isTouchSupported() {\n  return 'ontouchstart' in window;\n}\n\n/**\n * Checks if the environment that the code runs in is a browser.\n *\n * @returns {boolean}\n */\nexport function isCSR() {\n  return typeof window !== 'undefined';\n}\nlet comparisonFunction;\n\n/**\n * Get string comparison function for sorting purposes. It supports multilingual string comparison base on Internationalization API.\n *\n * @param {string} [language] The language code used for phrases sorting.\n * @param {object} [options] Additional options for sort comparator.\n * @returns {*}\n */\nexport function getComparisonFunction(language) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (comparisonFunction) {\n    return comparisonFunction;\n  }\n  if (typeof Intl === 'object') {\n    comparisonFunction = new Intl.Collator(language, options).compare;\n  } else if (typeof String.prototype.localeCompare === 'function') {\n    comparisonFunction = (a, b) => `${a}`.localeCompare(b);\n  } else {\n    comparisonFunction = (a, b) => {\n      if (a === b) {\n        return 0;\n      }\n      return a > b ? -1 : 1;\n    };\n  }\n  return comparisonFunction;\n}","map":{"version":3,"names":["requestAnimationFrame","callback","window","cancelAnimationFrame","id","isTouchSupported","isCSR","comparisonFunction","getComparisonFunction","language","options","arguments","length","undefined","Intl","Collator","compare","String","prototype","localeCompare","a","b"],"sources":["D:/gym-project/frontend/node_modules/handsontable/helpers/feature.mjs"],"sourcesContent":["/* eslint-disable no-restricted-globals */\n/**\n * Polyfill for requestAnimationFrame.\n *\n * @param {Function} callback The function to call when it's time.\n * @returns {number}\n */\nexport function requestAnimationFrame(callback) {\n  return window.requestAnimationFrame(callback);\n}\n\n/**\n * Polyfill for cancelAnimationFrame.\n *\n * @param {number} id The request Id, generated by `requestAnimationFrame`.\n */\nexport function cancelAnimationFrame(id) {\n  window.cancelAnimationFrame(id);\n}\n\n/**\n * @returns {boolean}\n */\nexport function isTouchSupported() {\n  return 'ontouchstart' in window;\n}\n\n/**\n * Checks if the environment that the code runs in is a browser.\n *\n * @returns {boolean}\n */\nexport function isCSR() {\n  return typeof window !== 'undefined';\n}\nlet comparisonFunction;\n\n/**\n * Get string comparison function for sorting purposes. It supports multilingual string comparison base on Internationalization API.\n *\n * @param {string} [language] The language code used for phrases sorting.\n * @param {object} [options] Additional options for sort comparator.\n * @returns {*}\n */\nexport function getComparisonFunction(language) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (comparisonFunction) {\n    return comparisonFunction;\n  }\n  if (typeof Intl === 'object') {\n    comparisonFunction = new Intl.Collator(language, options).compare;\n  } else if (typeof String.prototype.localeCompare === 'function') {\n    comparisonFunction = (a, b) => `${a}`.localeCompare(b);\n  } else {\n    comparisonFunction = (a, b) => {\n      if (a === b) {\n        return 0;\n      }\n      return a > b ? -1 : 1;\n    };\n  }\n  return comparisonFunction;\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,qBAAqBA,CAACC,QAAQ,EAAE;EAC9C,OAAOC,MAAM,CAACF,qBAAqB,CAACC,QAAQ,CAAC;AAC/C;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,oBAAoBA,CAACC,EAAE,EAAE;EACvCF,MAAM,CAACC,oBAAoB,CAACC,EAAE,CAAC;AACjC;;AAEA;AACA;AACA;AACA,OAAO,SAASC,gBAAgBA,CAAA,EAAG;EACjC,OAAO,cAAc,IAAIH,MAAM;AACjC;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,KAAKA,CAAA,EAAG;EACtB,OAAO,OAAOJ,MAAM,KAAK,WAAW;AACtC;AACA,IAAIK,kBAAkB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,qBAAqBA,CAACC,QAAQ,EAAE;EAC9C,IAAIC,OAAO,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACpF,IAAIJ,kBAAkB,EAAE;IACtB,OAAOA,kBAAkB;EAC3B;EACA,IAAI,OAAOO,IAAI,KAAK,QAAQ,EAAE;IAC5BP,kBAAkB,GAAG,IAAIO,IAAI,CAACC,QAAQ,CAACN,QAAQ,EAAEC,OAAO,CAAC,CAACM,OAAO;EACnE,CAAC,MAAM,IAAI,OAAOC,MAAM,CAACC,SAAS,CAACC,aAAa,KAAK,UAAU,EAAE;IAC/DZ,kBAAkB,GAAGA,CAACa,CAAC,EAAEC,CAAC,KAAK,GAAGD,CAAC,EAAE,CAACD,aAAa,CAACE,CAAC,CAAC;EACxD,CAAC,MAAM;IACLd,kBAAkB,GAAGA,CAACa,CAAC,EAAEC,CAAC,KAAK;MAC7B,IAAID,CAAC,KAAKC,CAAC,EAAE;QACX,OAAO,CAAC;MACV;MACA,OAAOD,CAAC,GAAGC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;IACvB,CAAC;EACH;EACA,OAAOd,kBAAkB;AAC3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}