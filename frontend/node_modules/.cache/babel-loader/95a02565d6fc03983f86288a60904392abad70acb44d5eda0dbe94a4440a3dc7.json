{"ast":null,"code":"import { getStyle, getComputedStyle, getTrimmingContainer, isVisible } from \"./../../../../helpers/dom/element.mjs\";\nimport Table from \"../table.mjs\";\nimport calculatedRows from \"./mixin/calculatedRows.mjs\";\nimport calculatedColumns from \"./mixin/calculatedColumns.mjs\";\nimport { mixin } from \"./../../../../helpers/object.mjs\";\n/**\n * Subclass of `Table` that provides the helper methods relevant to the master table (not overlays), implemented through mixins.\n *\n * @mixes calculatedRows\n * @mixes calculatedColumns\n */\nclass MasterTable extends Table {\n  /**\n   * @param {TableDao} dataAccessObject The data access object.\n   * @param {FacadeGetter} facadeGetter Function which return proper facade.\n   * @param {DomBindings} domBindings Bindings into DOM.\n   * @param {Settings} wtSettings The Walkontable settings.\n   */\n  constructor(dataAccessObject, facadeGetter, domBindings, wtSettings) {\n    super(dataAccessObject, facadeGetter, domBindings, wtSettings, 'master');\n  }\n  alignOverlaysWithTrimmingContainer() {\n    const trimmingElement = getTrimmingContainer(this.wtRootElement);\n    const {\n      rootWindow\n    } = this.domBindings;\n    if (trimmingElement === rootWindow) {\n      const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n      if (!preventOverflow) {\n        this.holder.style.overflow = 'visible';\n        this.wtRootElement.style.overflow = 'visible';\n      }\n    } else {\n      const trimmingElementParent = trimmingElement.parentElement;\n      const trimmingHeight = getStyle(trimmingElement, 'height', rootWindow);\n      const trimmingOverflow = getStyle(trimmingElement, 'overflow', rootWindow);\n      const holderStyle = this.holder.style;\n      const {\n        scrollWidth,\n        scrollHeight\n      } = trimmingElement;\n      let width = trimmingElement.offsetWidth;\n      let height = trimmingElement.offsetHeight;\n      const overflow = ['auto', 'hidden', 'scroll'];\n      if (trimmingElementParent && overflow.includes(trimmingOverflow)) {\n        const cloneNode = trimmingElement.cloneNode(false);\n\n        // Before calculating the height of the trimming element, set overflow: auto to hide scrollbars.\n        // An issue occurred on Firefox, where an empty element with overflow: scroll returns an element height higher than 0px\n        // despite an empty content within.\n        cloneNode.style.overflow = 'auto';\n        // Issue #9545 shows problem with calculating height for HOT on Firefox while placing instance in some\n        // flex containers and setting overflow for some `div` section.\n        cloneNode.style.position = 'absolute';\n        if (trimmingElement.nextElementSibling) {\n          trimmingElementParent.insertBefore(cloneNode, trimmingElement.nextElementSibling);\n        } else {\n          trimmingElementParent.appendChild(cloneNode);\n        }\n        const cloneHeight = parseInt(getComputedStyle(cloneNode, rootWindow).height, 10);\n        trimmingElementParent.removeChild(cloneNode);\n        if (cloneHeight === 0) {\n          height = 0;\n        }\n      }\n      height = Math.min(height, scrollHeight);\n      holderStyle.height = trimmingHeight === 'auto' ? 'auto' : `${height}px`;\n      width = Math.min(width, scrollWidth);\n      holderStyle.width = `${width}px`;\n      holderStyle.overflow = '';\n      this.hasTableHeight = holderStyle.height === 'auto' ? true : height > 0;\n      this.hasTableWidth = width > 0;\n    }\n    this.isTableVisible = isVisible(this.TABLE);\n  }\n  markOversizedColumnHeaders() {\n    const {\n      wtSettings\n    } = this;\n    const {\n      wtViewport\n    } = this.dataAccessObject;\n    const overlayName = 'master';\n    const columnHeaders = wtSettings.getSetting('columnHeaders');\n    const columnHeadersCount = columnHeaders.length;\n    if (columnHeadersCount && !wtViewport.hasOversizedColumnHeadersMarked[overlayName]) {\n      const rowHeaders = wtSettings.getSetting('rowHeaders');\n      const rowHeaderCount = rowHeaders.length;\n      const columnCount = this.getRenderedColumnsCount();\n      for (let i = 0; i < columnHeadersCount; i++) {\n        for (let renderedColumnIndex = -1 * rowHeaderCount; renderedColumnIndex < columnCount; renderedColumnIndex++) {\n          // eslint-disable-line max-len\n          this.markIfOversizedColumnHeader(renderedColumnIndex);\n        }\n      }\n      wtViewport.hasOversizedColumnHeadersMarked[overlayName] = true;\n    }\n  }\n}\nmixin(MasterTable, calculatedRows);\nmixin(MasterTable, calculatedColumns);\nexport default MasterTable;","map":{"version":3,"names":["getStyle","getComputedStyle","getTrimmingContainer","isVisible","Table","calculatedRows","calculatedColumns","mixin","MasterTable","constructor","dataAccessObject","facadeGetter","domBindings","wtSettings","alignOverlaysWithTrimmingContainer","trimmingElement","wtRootElement","rootWindow","preventOverflow","getSetting","holder","style","overflow","trimmingElementParent","parentElement","trimmingHeight","trimmingOverflow","holderStyle","scrollWidth","scrollHeight","width","offsetWidth","height","offsetHeight","includes","cloneNode","position","nextElementSibling","insertBefore","appendChild","cloneHeight","parseInt","removeChild","Math","min","hasTableHeight","hasTableWidth","isTableVisible","TABLE","markOversizedColumnHeaders","wtViewport","overlayName","columnHeaders","columnHeadersCount","length","hasOversizedColumnHeadersMarked","rowHeaders","rowHeaderCount","columnCount","getRenderedColumnsCount","i","renderedColumnIndex","markIfOversizedColumnHeader"],"sources":["D:/gym-project/frontend/node_modules/handsontable/3rdparty/walkontable/src/table/master.mjs"],"sourcesContent":["import { getStyle, getComputedStyle, getTrimmingContainer, isVisible } from \"./../../../../helpers/dom/element.mjs\";\nimport Table from \"../table.mjs\";\nimport calculatedRows from \"./mixin/calculatedRows.mjs\";\nimport calculatedColumns from \"./mixin/calculatedColumns.mjs\";\nimport { mixin } from \"./../../../../helpers/object.mjs\";\n/**\n * Subclass of `Table` that provides the helper methods relevant to the master table (not overlays), implemented through mixins.\n *\n * @mixes calculatedRows\n * @mixes calculatedColumns\n */\nclass MasterTable extends Table {\n  /**\n   * @param {TableDao} dataAccessObject The data access object.\n   * @param {FacadeGetter} facadeGetter Function which return proper facade.\n   * @param {DomBindings} domBindings Bindings into DOM.\n   * @param {Settings} wtSettings The Walkontable settings.\n   */\n  constructor(dataAccessObject, facadeGetter, domBindings, wtSettings) {\n    super(dataAccessObject, facadeGetter, domBindings, wtSettings, 'master');\n  }\n  alignOverlaysWithTrimmingContainer() {\n    const trimmingElement = getTrimmingContainer(this.wtRootElement);\n    const {\n      rootWindow\n    } = this.domBindings;\n    if (trimmingElement === rootWindow) {\n      const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n      if (!preventOverflow) {\n        this.holder.style.overflow = 'visible';\n        this.wtRootElement.style.overflow = 'visible';\n      }\n    } else {\n      const trimmingElementParent = trimmingElement.parentElement;\n      const trimmingHeight = getStyle(trimmingElement, 'height', rootWindow);\n      const trimmingOverflow = getStyle(trimmingElement, 'overflow', rootWindow);\n      const holderStyle = this.holder.style;\n      const {\n        scrollWidth,\n        scrollHeight\n      } = trimmingElement;\n      let width = trimmingElement.offsetWidth;\n      let height = trimmingElement.offsetHeight;\n      const overflow = ['auto', 'hidden', 'scroll'];\n      if (trimmingElementParent && overflow.includes(trimmingOverflow)) {\n        const cloneNode = trimmingElement.cloneNode(false);\n\n        // Before calculating the height of the trimming element, set overflow: auto to hide scrollbars.\n        // An issue occurred on Firefox, where an empty element with overflow: scroll returns an element height higher than 0px\n        // despite an empty content within.\n        cloneNode.style.overflow = 'auto';\n        // Issue #9545 shows problem with calculating height for HOT on Firefox while placing instance in some\n        // flex containers and setting overflow for some `div` section.\n        cloneNode.style.position = 'absolute';\n        if (trimmingElement.nextElementSibling) {\n          trimmingElementParent.insertBefore(cloneNode, trimmingElement.nextElementSibling);\n        } else {\n          trimmingElementParent.appendChild(cloneNode);\n        }\n        const cloneHeight = parseInt(getComputedStyle(cloneNode, rootWindow).height, 10);\n        trimmingElementParent.removeChild(cloneNode);\n        if (cloneHeight === 0) {\n          height = 0;\n        }\n      }\n      height = Math.min(height, scrollHeight);\n      holderStyle.height = trimmingHeight === 'auto' ? 'auto' : `${height}px`;\n      width = Math.min(width, scrollWidth);\n      holderStyle.width = `${width}px`;\n      holderStyle.overflow = '';\n      this.hasTableHeight = holderStyle.height === 'auto' ? true : height > 0;\n      this.hasTableWidth = width > 0;\n    }\n    this.isTableVisible = isVisible(this.TABLE);\n  }\n  markOversizedColumnHeaders() {\n    const {\n      wtSettings\n    } = this;\n    const {\n      wtViewport\n    } = this.dataAccessObject;\n    const overlayName = 'master';\n    const columnHeaders = wtSettings.getSetting('columnHeaders');\n    const columnHeadersCount = columnHeaders.length;\n    if (columnHeadersCount && !wtViewport.hasOversizedColumnHeadersMarked[overlayName]) {\n      const rowHeaders = wtSettings.getSetting('rowHeaders');\n      const rowHeaderCount = rowHeaders.length;\n      const columnCount = this.getRenderedColumnsCount();\n      for (let i = 0; i < columnHeadersCount; i++) {\n        for (let renderedColumnIndex = -1 * rowHeaderCount; renderedColumnIndex < columnCount; renderedColumnIndex++) {\n          // eslint-disable-line max-len\n          this.markIfOversizedColumnHeader(renderedColumnIndex);\n        }\n      }\n      wtViewport.hasOversizedColumnHeadersMarked[overlayName] = true;\n    }\n  }\n}\nmixin(MasterTable, calculatedRows);\nmixin(MasterTable, calculatedColumns);\nexport default MasterTable;"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,gBAAgB,EAAEC,oBAAoB,EAAEC,SAAS,QAAQ,uCAAuC;AACnH,OAAOC,KAAK,MAAM,cAAc;AAChC,OAAOC,cAAc,MAAM,4BAA4B;AACvD,OAAOC,iBAAiB,MAAM,+BAA+B;AAC7D,SAASC,KAAK,QAAQ,kCAAkC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,SAASJ,KAAK,CAAC;EAC9B;AACF;AACA;AACA;AACA;AACA;EACEK,WAAWA,CAACC,gBAAgB,EAAEC,YAAY,EAAEC,WAAW,EAAEC,UAAU,EAAE;IACnE,KAAK,CAACH,gBAAgB,EAAEC,YAAY,EAAEC,WAAW,EAAEC,UAAU,EAAE,QAAQ,CAAC;EAC1E;EACAC,kCAAkCA,CAAA,EAAG;IACnC,MAAMC,eAAe,GAAGb,oBAAoB,CAAC,IAAI,CAACc,aAAa,CAAC;IAChE,MAAM;MACJC;IACF,CAAC,GAAG,IAAI,CAACL,WAAW;IACpB,IAAIG,eAAe,KAAKE,UAAU,EAAE;MAClC,MAAMC,eAAe,GAAG,IAAI,CAACL,UAAU,CAACM,UAAU,CAAC,iBAAiB,CAAC;MACrE,IAAI,CAACD,eAAe,EAAE;QACpB,IAAI,CAACE,MAAM,CAACC,KAAK,CAACC,QAAQ,GAAG,SAAS;QACtC,IAAI,CAACN,aAAa,CAACK,KAAK,CAACC,QAAQ,GAAG,SAAS;MAC/C;IACF,CAAC,MAAM;MACL,MAAMC,qBAAqB,GAAGR,eAAe,CAACS,aAAa;MAC3D,MAAMC,cAAc,GAAGzB,QAAQ,CAACe,eAAe,EAAE,QAAQ,EAAEE,UAAU,CAAC;MACtE,MAAMS,gBAAgB,GAAG1B,QAAQ,CAACe,eAAe,EAAE,UAAU,EAAEE,UAAU,CAAC;MAC1E,MAAMU,WAAW,GAAG,IAAI,CAACP,MAAM,CAACC,KAAK;MACrC,MAAM;QACJO,WAAW;QACXC;MACF,CAAC,GAAGd,eAAe;MACnB,IAAIe,KAAK,GAAGf,eAAe,CAACgB,WAAW;MACvC,IAAIC,MAAM,GAAGjB,eAAe,CAACkB,YAAY;MACzC,MAAMX,QAAQ,GAAG,CAAC,MAAM,EAAE,QAAQ,EAAE,QAAQ,CAAC;MAC7C,IAAIC,qBAAqB,IAAID,QAAQ,CAACY,QAAQ,CAACR,gBAAgB,CAAC,EAAE;QAChE,MAAMS,SAAS,GAAGpB,eAAe,CAACoB,SAAS,CAAC,KAAK,CAAC;;QAElD;QACA;QACA;QACAA,SAAS,CAACd,KAAK,CAACC,QAAQ,GAAG,MAAM;QACjC;QACA;QACAa,SAAS,CAACd,KAAK,CAACe,QAAQ,GAAG,UAAU;QACrC,IAAIrB,eAAe,CAACsB,kBAAkB,EAAE;UACtCd,qBAAqB,CAACe,YAAY,CAACH,SAAS,EAAEpB,eAAe,CAACsB,kBAAkB,CAAC;QACnF,CAAC,MAAM;UACLd,qBAAqB,CAACgB,WAAW,CAACJ,SAAS,CAAC;QAC9C;QACA,MAAMK,WAAW,GAAGC,QAAQ,CAACxC,gBAAgB,CAACkC,SAAS,EAAElB,UAAU,CAAC,CAACe,MAAM,EAAE,EAAE,CAAC;QAChFT,qBAAqB,CAACmB,WAAW,CAACP,SAAS,CAAC;QAC5C,IAAIK,WAAW,KAAK,CAAC,EAAE;UACrBR,MAAM,GAAG,CAAC;QACZ;MACF;MACAA,MAAM,GAAGW,IAAI,CAACC,GAAG,CAACZ,MAAM,EAAEH,YAAY,CAAC;MACvCF,WAAW,CAACK,MAAM,GAAGP,cAAc,KAAK,MAAM,GAAG,MAAM,GAAG,GAAGO,MAAM,IAAI;MACvEF,KAAK,GAAGa,IAAI,CAACC,GAAG,CAACd,KAAK,EAAEF,WAAW,CAAC;MACpCD,WAAW,CAACG,KAAK,GAAG,GAAGA,KAAK,IAAI;MAChCH,WAAW,CAACL,QAAQ,GAAG,EAAE;MACzB,IAAI,CAACuB,cAAc,GAAGlB,WAAW,CAACK,MAAM,KAAK,MAAM,GAAG,IAAI,GAAGA,MAAM,GAAG,CAAC;MACvE,IAAI,CAACc,aAAa,GAAGhB,KAAK,GAAG,CAAC;IAChC;IACA,IAAI,CAACiB,cAAc,GAAG5C,SAAS,CAAC,IAAI,CAAC6C,KAAK,CAAC;EAC7C;EACAC,0BAA0BA,CAAA,EAAG;IAC3B,MAAM;MACJpC;IACF,CAAC,GAAG,IAAI;IACR,MAAM;MACJqC;IACF,CAAC,GAAG,IAAI,CAACxC,gBAAgB;IACzB,MAAMyC,WAAW,GAAG,QAAQ;IAC5B,MAAMC,aAAa,GAAGvC,UAAU,CAACM,UAAU,CAAC,eAAe,CAAC;IAC5D,MAAMkC,kBAAkB,GAAGD,aAAa,CAACE,MAAM;IAC/C,IAAID,kBAAkB,IAAI,CAACH,UAAU,CAACK,+BAA+B,CAACJ,WAAW,CAAC,EAAE;MAClF,MAAMK,UAAU,GAAG3C,UAAU,CAACM,UAAU,CAAC,YAAY,CAAC;MACtD,MAAMsC,cAAc,GAAGD,UAAU,CAACF,MAAM;MACxC,MAAMI,WAAW,GAAG,IAAI,CAACC,uBAAuB,CAAC,CAAC;MAClD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,kBAAkB,EAAEO,CAAC,EAAE,EAAE;QAC3C,KAAK,IAAIC,mBAAmB,GAAG,CAAC,CAAC,GAAGJ,cAAc,EAAEI,mBAAmB,GAAGH,WAAW,EAAEG,mBAAmB,EAAE,EAAE;UAC5G;UACA,IAAI,CAACC,2BAA2B,CAACD,mBAAmB,CAAC;QACvD;MACF;MACAX,UAAU,CAACK,+BAA+B,CAACJ,WAAW,CAAC,GAAG,IAAI;IAChE;EACF;AACF;AACA5C,KAAK,CAACC,WAAW,EAAEH,cAAc,CAAC;AAClCE,KAAK,CAACC,WAAW,EAAEF,iBAAiB,CAAC;AACrC,eAAeE,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}