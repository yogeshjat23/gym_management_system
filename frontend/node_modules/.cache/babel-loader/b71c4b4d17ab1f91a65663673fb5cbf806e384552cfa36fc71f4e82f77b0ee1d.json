{"ast":null,"code":"import { baseRenderer } from \"../baseRenderer/index.mjs\";\nimport { empty, fastInnerText } from \"../../helpers/dom/element.mjs\";\nimport { stringify } from \"../../helpers/mixed.mjs\";\nexport const RENDERER_TYPE = 'text';\n\n/**\n * Default text renderer.\n *\n * @private\n * @param {Core} hotInstance The Handsontable instance.\n * @param {HTMLTableCellElement} TD The rendered cell element.\n * @param {number} row The visual row index.\n * @param {number} col The visual column index.\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\n * @param {*} value The rendered value.\n * @param {object} cellProperties The cell meta object (see {@link Core#getCellMeta}).\n */\nexport function textRenderer(hotInstance, TD, row, col, prop, value, cellProperties) {\n  baseRenderer.apply(this, [hotInstance, TD, row, col, prop, value, cellProperties]);\n  let escaped = value;\n  if (!escaped && cellProperties.placeholder) {\n    escaped = cellProperties.placeholder;\n  }\n  escaped = stringify(escaped);\n  if (cellProperties.trimWhitespace) {\n    escaped = escaped.trim();\n  }\n  if (cellProperties.rendererTemplate) {\n    empty(TD);\n    const TEMPLATE = hotInstance.rootDocument.createElement('TEMPLATE');\n    TEMPLATE.setAttribute('bind', '{{}}');\n    TEMPLATE.innerHTML = cellProperties.rendererTemplate;\n    HTMLTemplateElement.decorate(TEMPLATE);\n    TEMPLATE.model = hotInstance.getSourceDataAtRow(row);\n    TD.appendChild(TEMPLATE);\n  } else {\n    // this is faster than innerHTML. See: https://github.com/handsontable/handsontable/wiki/JavaScript-&-DOM-performance-tips\n    fastInnerText(TD, escaped);\n  }\n}\ntextRenderer.RENDERER_TYPE = RENDERER_TYPE;","map":{"version":3,"names":["baseRenderer","empty","fastInnerText","stringify","RENDERER_TYPE","textRenderer","hotInstance","TD","row","col","prop","value","cellProperties","apply","escaped","placeholder","trimWhitespace","trim","rendererTemplate","TEMPLATE","rootDocument","createElement","setAttribute","innerHTML","HTMLTemplateElement","decorate","model","getSourceDataAtRow","appendChild"],"sources":["D:/gym-project/frontend/node_modules/handsontable/renderers/textRenderer/textRenderer.mjs"],"sourcesContent":["import { baseRenderer } from \"../baseRenderer/index.mjs\";\nimport { empty, fastInnerText } from \"../../helpers/dom/element.mjs\";\nimport { stringify } from \"../../helpers/mixed.mjs\";\nexport const RENDERER_TYPE = 'text';\n\n/**\n * Default text renderer.\n *\n * @private\n * @param {Core} hotInstance The Handsontable instance.\n * @param {HTMLTableCellElement} TD The rendered cell element.\n * @param {number} row The visual row index.\n * @param {number} col The visual column index.\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\n * @param {*} value The rendered value.\n * @param {object} cellProperties The cell meta object (see {@link Core#getCellMeta}).\n */\nexport function textRenderer(hotInstance, TD, row, col, prop, value, cellProperties) {\n  baseRenderer.apply(this, [hotInstance, TD, row, col, prop, value, cellProperties]);\n  let escaped = value;\n  if (!escaped && cellProperties.placeholder) {\n    escaped = cellProperties.placeholder;\n  }\n  escaped = stringify(escaped);\n  if (cellProperties.trimWhitespace) {\n    escaped = escaped.trim();\n  }\n  if (cellProperties.rendererTemplate) {\n    empty(TD);\n    const TEMPLATE = hotInstance.rootDocument.createElement('TEMPLATE');\n    TEMPLATE.setAttribute('bind', '{{}}');\n    TEMPLATE.innerHTML = cellProperties.rendererTemplate;\n    HTMLTemplateElement.decorate(TEMPLATE);\n    TEMPLATE.model = hotInstance.getSourceDataAtRow(row);\n    TD.appendChild(TEMPLATE);\n  } else {\n    // this is faster than innerHTML. See: https://github.com/handsontable/handsontable/wiki/JavaScript-&-DOM-performance-tips\n    fastInnerText(TD, escaped);\n  }\n}\ntextRenderer.RENDERER_TYPE = RENDERER_TYPE;"],"mappings":"AAAA,SAASA,YAAY,QAAQ,2BAA2B;AACxD,SAASC,KAAK,EAAEC,aAAa,QAAQ,+BAA+B;AACpE,SAASC,SAAS,QAAQ,yBAAyB;AACnD,OAAO,MAAMC,aAAa,GAAG,MAAM;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAYA,CAACC,WAAW,EAAEC,EAAE,EAAEC,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAEC,KAAK,EAAEC,cAAc,EAAE;EACnFZ,YAAY,CAACa,KAAK,CAAC,IAAI,EAAE,CAACP,WAAW,EAAEC,EAAE,EAAEC,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAEC,KAAK,EAAEC,cAAc,CAAC,CAAC;EAClF,IAAIE,OAAO,GAAGH,KAAK;EACnB,IAAI,CAACG,OAAO,IAAIF,cAAc,CAACG,WAAW,EAAE;IAC1CD,OAAO,GAAGF,cAAc,CAACG,WAAW;EACtC;EACAD,OAAO,GAAGX,SAAS,CAACW,OAAO,CAAC;EAC5B,IAAIF,cAAc,CAACI,cAAc,EAAE;IACjCF,OAAO,GAAGA,OAAO,CAACG,IAAI,CAAC,CAAC;EAC1B;EACA,IAAIL,cAAc,CAACM,gBAAgB,EAAE;IACnCjB,KAAK,CAACM,EAAE,CAAC;IACT,MAAMY,QAAQ,GAAGb,WAAW,CAACc,YAAY,CAACC,aAAa,CAAC,UAAU,CAAC;IACnEF,QAAQ,CAACG,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC;IACrCH,QAAQ,CAACI,SAAS,GAAGX,cAAc,CAACM,gBAAgB;IACpDM,mBAAmB,CAACC,QAAQ,CAACN,QAAQ,CAAC;IACtCA,QAAQ,CAACO,KAAK,GAAGpB,WAAW,CAACqB,kBAAkB,CAACnB,GAAG,CAAC;IACpDD,EAAE,CAACqB,WAAW,CAACT,QAAQ,CAAC;EAC1B,CAAC,MAAM;IACL;IACAjB,aAAa,CAACK,EAAE,EAAEO,OAAO,CAAC;EAC5B;AACF;AACAT,YAAY,CAACD,aAAa,GAAGA,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}