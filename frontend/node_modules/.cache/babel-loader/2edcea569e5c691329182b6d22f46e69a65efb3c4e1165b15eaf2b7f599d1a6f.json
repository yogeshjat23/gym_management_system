{"ast":null,"code":"import staticRegister from \"../utils/staticRegister.mjs\";\nimport { registerEditor } from \"../editors/registry.mjs\";\nimport { registerRenderer } from \"../renderers/registry.mjs\";\nimport { registerValidator } from \"../validators/registry.mjs\";\nconst {\n  register,\n  getItem,\n  hasItem,\n  getNames,\n  getValues\n} = staticRegister('cellTypes');\n\n/**\n * Retrieve cell type object.\n *\n * @param {string} name Cell type identification.\n * @returns {object} Returns cell type object.\n */\nfunction _getItem(name) {\n  if (!hasItem(name)) {\n    throw Error(`You declared cell type \"${name}\" as a string that is not mapped to a known object.\n                 Cell type must be an object or a string mapped to an object registered by\n                 \"Handsontable.cellTypes.registerCellType\" method`);\n  }\n  return getItem(name);\n}\n\n/**\n * Register cell type under specified name.\n *\n * @param {string} name Cell type identification.\n * @param {object} type An object with contains keys (eq: `editor`, `renderer`, `validator`) which describes specified behaviour of the cell.\n */\nfunction _register(name, type) {\n  if (typeof name !== 'string') {\n    type = name;\n    name = type.CELL_TYPE;\n  }\n  const {\n    editor,\n    renderer,\n    validator\n  } = type;\n  if (editor) {\n    registerEditor(name, editor);\n  }\n  if (renderer) {\n    registerRenderer(name, renderer);\n  }\n  if (validator) {\n    registerValidator(name, validator);\n  }\n  register(name, type);\n}\nexport { _register as registerCellType, _getItem as getCellType, hasItem as hasCellType, getNames as getRegisteredCellTypeNames, getValues as getRegisteredCellTypes };","map":{"version":3,"names":["staticRegister","registerEditor","registerRenderer","registerValidator","register","getItem","hasItem","getNames","getValues","_getItem","name","Error","_register","type","CELL_TYPE","editor","renderer","validator","registerCellType","getCellType","hasCellType","getRegisteredCellTypeNames","getRegisteredCellTypes"],"sources":["D:/gym-project/frontend/node_modules/handsontable/cellTypes/registry.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nimport staticRegister from \"../utils/staticRegister.mjs\";\nimport { registerEditor } from \"../editors/registry.mjs\";\nimport { registerRenderer } from \"../renderers/registry.mjs\";\nimport { registerValidator } from \"../validators/registry.mjs\";\nconst {\n  register,\n  getItem,\n  hasItem,\n  getNames,\n  getValues\n} = staticRegister('cellTypes');\n\n/**\n * Retrieve cell type object.\n *\n * @param {string} name Cell type identification.\n * @returns {object} Returns cell type object.\n */\nfunction _getItem(name) {\n  if (!hasItem(name)) {\n    throw Error(`You declared cell type \"${name}\" as a string that is not mapped to a known object.\n                 Cell type must be an object or a string mapped to an object registered by\n                 \"Handsontable.cellTypes.registerCellType\" method`);\n  }\n  return getItem(name);\n}\n\n/**\n * Register cell type under specified name.\n *\n * @param {string} name Cell type identification.\n * @param {object} type An object with contains keys (eq: `editor`, `renderer`, `validator`) which describes specified behaviour of the cell.\n */\nfunction _register(name, type) {\n  if (typeof name !== 'string') {\n    type = name;\n    name = type.CELL_TYPE;\n  }\n  const {\n    editor,\n    renderer,\n    validator\n  } = type;\n  if (editor) {\n    registerEditor(name, editor);\n  }\n  if (renderer) {\n    registerRenderer(name, renderer);\n  }\n  if (validator) {\n    registerValidator(name, validator);\n  }\n  register(name, type);\n}\nexport { _register as registerCellType, _getItem as getCellType, hasItem as hasCellType, getNames as getRegisteredCellTypeNames, getValues as getRegisteredCellTypes };"],"mappings":"AACA,OAAOA,cAAc,MAAM,6BAA6B;AACxD,SAASC,cAAc,QAAQ,yBAAyB;AACxD,SAASC,gBAAgB,QAAQ,2BAA2B;AAC5D,SAASC,iBAAiB,QAAQ,4BAA4B;AAC9D,MAAM;EACJC,QAAQ;EACRC,OAAO;EACPC,OAAO;EACPC,QAAQ;EACRC;AACF,CAAC,GAAGR,cAAc,CAAC,WAAW,CAAC;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA,SAASS,QAAQA,CAACC,IAAI,EAAE;EACtB,IAAI,CAACJ,OAAO,CAACI,IAAI,CAAC,EAAE;IAClB,MAAMC,KAAK,CAAC,2BAA2BD,IAAI;AAC/C;AACA,kEAAkE,CAAC;EACjE;EACA,OAAOL,OAAO,CAACK,IAAI,CAAC;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,SAASA,CAACF,IAAI,EAAEG,IAAI,EAAE;EAC7B,IAAI,OAAOH,IAAI,KAAK,QAAQ,EAAE;IAC5BG,IAAI,GAAGH,IAAI;IACXA,IAAI,GAAGG,IAAI,CAACC,SAAS;EACvB;EACA,MAAM;IACJC,MAAM;IACNC,QAAQ;IACRC;EACF,CAAC,GAAGJ,IAAI;EACR,IAAIE,MAAM,EAAE;IACVd,cAAc,CAACS,IAAI,EAAEK,MAAM,CAAC;EAC9B;EACA,IAAIC,QAAQ,EAAE;IACZd,gBAAgB,CAACQ,IAAI,EAAEM,QAAQ,CAAC;EAClC;EACA,IAAIC,SAAS,EAAE;IACbd,iBAAiB,CAACO,IAAI,EAAEO,SAAS,CAAC;EACpC;EACAb,QAAQ,CAACM,IAAI,EAAEG,IAAI,CAAC;AACtB;AACA,SAASD,SAAS,IAAIM,gBAAgB,EAAET,QAAQ,IAAIU,WAAW,EAAEb,OAAO,IAAIc,WAAW,EAAEb,QAAQ,IAAIc,0BAA0B,EAAEb,SAAS,IAAIc,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}