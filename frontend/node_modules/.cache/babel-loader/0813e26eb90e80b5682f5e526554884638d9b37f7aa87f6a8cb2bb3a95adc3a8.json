{"ast":null,"code":"import { getScrollbarWidth, outerHeight, outerWidth, resetCssTransform } from \"../../../../helpers/dom/element.mjs\";\nimport BottomInlineStartCornerOverlayTable from \"../table/bottomInlineStartCorner.mjs\";\nimport { Overlay } from \"./_base.mjs\";\nimport { CLONE_BOTTOM_INLINE_START_CORNER } from \"./constants.mjs\";\n/**\n * @class BottomInlineStartCornerOverlay\n */\nexport class BottomInlineStartCornerOverlay extends Overlay {\n  /**\n   * @param {Walkontable} wotInstance The Walkontable instance. @TODO refactoring: check if can be deleted.\n   * @param {FacadeGetter} facadeGetter Function which return proper facade.\n   * @param {Settings} wtSettings The Walkontable settings.\n   * @param {DomBindings} domBindings Dom elements bound to the current instance.\n   * @param {BottomOverlay} bottomOverlay The instance of the Top overlay.\n   * @param {InlineStartOverlay} inlineStartOverlay The instance of the InlineStart overlay.\n   */\n  constructor(wotInstance, facadeGetter, wtSettings, domBindings, bottomOverlay, inlineStartOverlay) {\n    super(wotInstance, facadeGetter, CLONE_BOTTOM_INLINE_START_CORNER, wtSettings, domBindings);\n    this.bottomOverlay = bottomOverlay;\n    this.inlineStartOverlay = inlineStartOverlay;\n  }\n\n  /**\n   * Factory method to create a subclass of `Table` that is relevant to this overlay.\n   *\n   * @see Table#constructor\n   * @param {...*} args Parameters that will be forwarded to the `Table` constructor.\n   * @returns {BottomInlineStartCornerOverlayTable}\n   */\n  createTable() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return new BottomInlineStartCornerOverlayTable(...args);\n  }\n\n  /**\n   * Checks if overlay should be fully rendered.\n   *\n   * @returns {boolean}\n   */\n  shouldBeRendered() {\n    return this.wtSettings.getSetting('shouldRenderBottomOverlay') && this.wtSettings.getSetting('shouldRenderInlineStartOverlay');\n  }\n\n  /**\n   * Updates the corner overlay position.\n   *\n   * @returns {boolean}\n   */\n  resetFixedPosition() {\n    const {\n      wot\n    } = this;\n    this.updateTrimmingContainer();\n    if (!wot.wtTable.holder.parentNode) {\n      // removed from DOM\n      return false;\n    }\n    const overlayRoot = this.clone.wtTable.holder.parentNode;\n    overlayRoot.style.top = '';\n    if (this.trimmingContainer === this.domBindings.rootWindow) {\n      const inlineStartOffset = this.inlineStartOverlay.getOverlayOffset();\n      const bottom = this.bottomOverlay.getOverlayOffset();\n      overlayRoot.style[this.isRtl() ? 'right' : 'left'] = `${inlineStartOffset}px`;\n      overlayRoot.style.bottom = `${bottom}px`;\n    } else {\n      resetCssTransform(overlayRoot);\n      this.repositionOverlay();\n    }\n    let tableHeight = outerHeight(this.clone.wtTable.TABLE);\n    const tableWidth = outerWidth(this.clone.wtTable.TABLE);\n    if (!this.wot.wtTable.hasDefinedSize()) {\n      tableHeight = 0;\n    }\n    overlayRoot.style.height = `${tableHeight}px`;\n    overlayRoot.style.width = `${tableWidth}px`;\n    return false;\n  }\n\n  /**\n   * Reposition the overlay.\n   */\n  repositionOverlay() {\n    const {\n      wtTable,\n      wtViewport\n    } = this.wot;\n    const {\n      rootDocument\n    } = this.domBindings;\n    const cloneRoot = this.clone.wtTable.holder.parentNode;\n    let bottomOffset = 0;\n    if (!wtViewport.hasVerticalScroll()) {\n      bottomOffset += wtViewport.getWorkspaceHeight() - wtTable.getTotalHeight();\n    }\n    if (wtViewport.hasVerticalScroll() && wtViewport.hasHorizontalScroll()) {\n      bottomOffset += getScrollbarWidth(rootDocument);\n    }\n    cloneRoot.style.bottom = `${bottomOffset}px`;\n  }\n}","map":{"version":3,"names":["getScrollbarWidth","outerHeight","outerWidth","resetCssTransform","BottomInlineStartCornerOverlayTable","Overlay","CLONE_BOTTOM_INLINE_START_CORNER","BottomInlineStartCornerOverlay","constructor","wotInstance","facadeGetter","wtSettings","domBindings","bottomOverlay","inlineStartOverlay","createTable","_len","arguments","length","args","Array","_key","shouldBeRendered","getSetting","resetFixedPosition","wot","updateTrimmingContainer","wtTable","holder","parentNode","overlayRoot","clone","style","top","trimmingContainer","rootWindow","inlineStartOffset","getOverlayOffset","bottom","isRtl","repositionOverlay","tableHeight","TABLE","tableWidth","hasDefinedSize","height","width","wtViewport","rootDocument","cloneRoot","bottomOffset","hasVerticalScroll","getWorkspaceHeight","getTotalHeight","hasHorizontalScroll"],"sources":["D:/gym-project/frontend/node_modules/handsontable/3rdparty/walkontable/src/overlay/bottomInlineStartCorner.mjs"],"sourcesContent":["import { getScrollbarWidth, outerHeight, outerWidth, resetCssTransform } from \"../../../../helpers/dom/element.mjs\";\nimport BottomInlineStartCornerOverlayTable from \"../table/bottomInlineStartCorner.mjs\";\nimport { Overlay } from \"./_base.mjs\";\nimport { CLONE_BOTTOM_INLINE_START_CORNER } from \"./constants.mjs\";\n/**\n * @class BottomInlineStartCornerOverlay\n */\nexport class BottomInlineStartCornerOverlay extends Overlay {\n  /**\n   * @param {Walkontable} wotInstance The Walkontable instance. @TODO refactoring: check if can be deleted.\n   * @param {FacadeGetter} facadeGetter Function which return proper facade.\n   * @param {Settings} wtSettings The Walkontable settings.\n   * @param {DomBindings} domBindings Dom elements bound to the current instance.\n   * @param {BottomOverlay} bottomOverlay The instance of the Top overlay.\n   * @param {InlineStartOverlay} inlineStartOverlay The instance of the InlineStart overlay.\n   */\n  constructor(wotInstance, facadeGetter, wtSettings, domBindings, bottomOverlay, inlineStartOverlay) {\n    super(wotInstance, facadeGetter, CLONE_BOTTOM_INLINE_START_CORNER, wtSettings, domBindings);\n    this.bottomOverlay = bottomOverlay;\n    this.inlineStartOverlay = inlineStartOverlay;\n  }\n\n  /**\n   * Factory method to create a subclass of `Table` that is relevant to this overlay.\n   *\n   * @see Table#constructor\n   * @param {...*} args Parameters that will be forwarded to the `Table` constructor.\n   * @returns {BottomInlineStartCornerOverlayTable}\n   */\n  createTable() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return new BottomInlineStartCornerOverlayTable(...args);\n  }\n\n  /**\n   * Checks if overlay should be fully rendered.\n   *\n   * @returns {boolean}\n   */\n  shouldBeRendered() {\n    return this.wtSettings.getSetting('shouldRenderBottomOverlay') && this.wtSettings.getSetting('shouldRenderInlineStartOverlay');\n  }\n\n  /**\n   * Updates the corner overlay position.\n   *\n   * @returns {boolean}\n   */\n  resetFixedPosition() {\n    const {\n      wot\n    } = this;\n    this.updateTrimmingContainer();\n    if (!wot.wtTable.holder.parentNode) {\n      // removed from DOM\n      return false;\n    }\n    const overlayRoot = this.clone.wtTable.holder.parentNode;\n    overlayRoot.style.top = '';\n    if (this.trimmingContainer === this.domBindings.rootWindow) {\n      const inlineStartOffset = this.inlineStartOverlay.getOverlayOffset();\n      const bottom = this.bottomOverlay.getOverlayOffset();\n      overlayRoot.style[this.isRtl() ? 'right' : 'left'] = `${inlineStartOffset}px`;\n      overlayRoot.style.bottom = `${bottom}px`;\n    } else {\n      resetCssTransform(overlayRoot);\n      this.repositionOverlay();\n    }\n    let tableHeight = outerHeight(this.clone.wtTable.TABLE);\n    const tableWidth = outerWidth(this.clone.wtTable.TABLE);\n    if (!this.wot.wtTable.hasDefinedSize()) {\n      tableHeight = 0;\n    }\n    overlayRoot.style.height = `${tableHeight}px`;\n    overlayRoot.style.width = `${tableWidth}px`;\n    return false;\n  }\n\n  /**\n   * Reposition the overlay.\n   */\n  repositionOverlay() {\n    const {\n      wtTable,\n      wtViewport\n    } = this.wot;\n    const {\n      rootDocument\n    } = this.domBindings;\n    const cloneRoot = this.clone.wtTable.holder.parentNode;\n    let bottomOffset = 0;\n    if (!wtViewport.hasVerticalScroll()) {\n      bottomOffset += wtViewport.getWorkspaceHeight() - wtTable.getTotalHeight();\n    }\n    if (wtViewport.hasVerticalScroll() && wtViewport.hasHorizontalScroll()) {\n      bottomOffset += getScrollbarWidth(rootDocument);\n    }\n    cloneRoot.style.bottom = `${bottomOffset}px`;\n  }\n}"],"mappings":"AAAA,SAASA,iBAAiB,EAAEC,WAAW,EAAEC,UAAU,EAAEC,iBAAiB,QAAQ,qCAAqC;AACnH,OAAOC,mCAAmC,MAAM,sCAAsC;AACtF,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,gCAAgC,QAAQ,iBAAiB;AAClE;AACA;AACA;AACA,OAAO,MAAMC,8BAA8B,SAASF,OAAO,CAAC;EAC1D;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEG,WAAWA,CAACC,WAAW,EAAEC,YAAY,EAAEC,UAAU,EAAEC,WAAW,EAAEC,aAAa,EAAEC,kBAAkB,EAAE;IACjG,KAAK,CAACL,WAAW,EAAEC,YAAY,EAAEJ,gCAAgC,EAAEK,UAAU,EAAEC,WAAW,CAAC;IAC3F,IAAI,CAACC,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACC,kBAAkB,GAAGA,kBAAkB;EAC9C;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,WAAWA,CAAA,EAAG;IACZ,KAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAAM,EAAEC,IAAI,GAAG,IAAIC,KAAK,CAACJ,IAAI,CAAC,EAAEK,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGL,IAAI,EAAEK,IAAI,EAAE,EAAE;MACvFF,IAAI,CAACE,IAAI,CAAC,GAAGJ,SAAS,CAACI,IAAI,CAAC;IAC9B;IACA,OAAO,IAAIjB,mCAAmC,CAAC,GAAGe,IAAI,CAAC;EACzD;;EAEA;AACF;AACA;AACA;AACA;EACEG,gBAAgBA,CAAA,EAAG;IACjB,OAAO,IAAI,CAACX,UAAU,CAACY,UAAU,CAAC,2BAA2B,CAAC,IAAI,IAAI,CAACZ,UAAU,CAACY,UAAU,CAAC,gCAAgC,CAAC;EAChI;;EAEA;AACF;AACA;AACA;AACA;EACEC,kBAAkBA,CAAA,EAAG;IACnB,MAAM;MACJC;IACF,CAAC,GAAG,IAAI;IACR,IAAI,CAACC,uBAAuB,CAAC,CAAC;IAC9B,IAAI,CAACD,GAAG,CAACE,OAAO,CAACC,MAAM,CAACC,UAAU,EAAE;MAClC;MACA,OAAO,KAAK;IACd;IACA,MAAMC,WAAW,GAAG,IAAI,CAACC,KAAK,CAACJ,OAAO,CAACC,MAAM,CAACC,UAAU;IACxDC,WAAW,CAACE,KAAK,CAACC,GAAG,GAAG,EAAE;IAC1B,IAAI,IAAI,CAACC,iBAAiB,KAAK,IAAI,CAACtB,WAAW,CAACuB,UAAU,EAAE;MAC1D,MAAMC,iBAAiB,GAAG,IAAI,CAACtB,kBAAkB,CAACuB,gBAAgB,CAAC,CAAC;MACpE,MAAMC,MAAM,GAAG,IAAI,CAACzB,aAAa,CAACwB,gBAAgB,CAAC,CAAC;MACpDP,WAAW,CAACE,KAAK,CAAC,IAAI,CAACO,KAAK,CAAC,CAAC,GAAG,OAAO,GAAG,MAAM,CAAC,GAAG,GAAGH,iBAAiB,IAAI;MAC7EN,WAAW,CAACE,KAAK,CAACM,MAAM,GAAG,GAAGA,MAAM,IAAI;IAC1C,CAAC,MAAM;MACLnC,iBAAiB,CAAC2B,WAAW,CAAC;MAC9B,IAAI,CAACU,iBAAiB,CAAC,CAAC;IAC1B;IACA,IAAIC,WAAW,GAAGxC,WAAW,CAAC,IAAI,CAAC8B,KAAK,CAACJ,OAAO,CAACe,KAAK,CAAC;IACvD,MAAMC,UAAU,GAAGzC,UAAU,CAAC,IAAI,CAAC6B,KAAK,CAACJ,OAAO,CAACe,KAAK,CAAC;IACvD,IAAI,CAAC,IAAI,CAACjB,GAAG,CAACE,OAAO,CAACiB,cAAc,CAAC,CAAC,EAAE;MACtCH,WAAW,GAAG,CAAC;IACjB;IACAX,WAAW,CAACE,KAAK,CAACa,MAAM,GAAG,GAAGJ,WAAW,IAAI;IAC7CX,WAAW,CAACE,KAAK,CAACc,KAAK,GAAG,GAAGH,UAAU,IAAI;IAC3C,OAAO,KAAK;EACd;;EAEA;AACF;AACA;EACEH,iBAAiBA,CAAA,EAAG;IAClB,MAAM;MACJb,OAAO;MACPoB;IACF,CAAC,GAAG,IAAI,CAACtB,GAAG;IACZ,MAAM;MACJuB;IACF,CAAC,GAAG,IAAI,CAACpC,WAAW;IACpB,MAAMqC,SAAS,GAAG,IAAI,CAAClB,KAAK,CAACJ,OAAO,CAACC,MAAM,CAACC,UAAU;IACtD,IAAIqB,YAAY,GAAG,CAAC;IACpB,IAAI,CAACH,UAAU,CAACI,iBAAiB,CAAC,CAAC,EAAE;MACnCD,YAAY,IAAIH,UAAU,CAACK,kBAAkB,CAAC,CAAC,GAAGzB,OAAO,CAAC0B,cAAc,CAAC,CAAC;IAC5E;IACA,IAAIN,UAAU,CAACI,iBAAiB,CAAC,CAAC,IAAIJ,UAAU,CAACO,mBAAmB,CAAC,CAAC,EAAE;MACtEJ,YAAY,IAAIlD,iBAAiB,CAACgD,YAAY,CAAC;IACjD;IACAC,SAAS,CAACjB,KAAK,CAACM,MAAM,GAAG,GAAGY,YAAY,IAAI;EAC9C;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}