{"ast":null,"code":"/* eslint-disable jsdoc/require-description-complete-sentence */\nimport { arrayEach, arrayMap } from \"../../../helpers/array.mjs\";\nimport { isObject } from \"../../../helpers/object.mjs\";\nimport { stringify } from \"../../../helpers/mixed.mjs\";\nimport { createDefaultHeaderSettings, createPlaceholderHeaderSettings } from \"./utils.mjs\";\n/**\n * A function that normalizes user-defined settings into one predictable\n * structure. Currently, the developer can declare nested headers by passing\n * the following unstructured (and sometimes uncompleted) array.\n *   [\n *     [{ label: 'A1', colspan: 2 }],\n *     [{ label: true }, 'B2', 4],\n *     [],\n *   ]\n *\n * The normalization process equalizes the length of columns to each header\n * layers to the same length and generates object settings with a common shape.\n * So the above mentioned example will be normalized into this:\n *   [\n *     [\n *       { label: 'A1', colspan: 2, isHidden: false, ... },\n *       { label: '', colspan: 1, isHidden: true, ... },\n *       { label: '', colspan: 1, isHidden: false, ... },\n *     ],\n *     [\n *       { label: 'true', colspan: 1, isHidden: false, ... },\n *       { label: 'B2', colspan: 1, isHidden: false, ... },\n *       { label: '4', colspan: 1, isHidden: false, ... },\n *     ],\n *     [\n *       { label: '', colspan: 1, isHidden: false, ... },\n *       { label: '', colspan: 1, isHidden: false, ... },\n *       { label: '', colspan: 1, isHidden: false, ... },\n *     ],\n *   ]\n *\n * @param {Array[]} sourceSettings An array with defined nested headers settings.\n * @param {number} [columnsLimit=Infinity] A number of columns to which the structure\n *                                         will be trimmed. While trimming the colspan\n *                                         values are adjusted to preserve the original\n *                                         structure.\n * @returns {Array[]}\n */\nexport function normalizeSettings(sourceSettings) {\n  let columnsLimit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n  const normalizedSettings = [];\n  if (columnsLimit === 0) {\n    return normalizedSettings;\n  }\n\n  // Normalize array items (header settings) into one shape - literal object with default props.\n  arrayEach(sourceSettings, headersSettings => {\n    const columns = [];\n    let columnIndex = 0;\n    normalizedSettings.push(columns);\n    arrayEach(headersSettings, sourceHeaderSettings => {\n      const headerSettings = createDefaultHeaderSettings();\n      if (isObject(sourceHeaderSettings)) {\n        const {\n          label,\n          colspan,\n          headerClassName\n        } = sourceHeaderSettings;\n        headerSettings.label = stringify(label);\n        if (typeof colspan === 'number' && colspan > 1) {\n          headerSettings.colspan = colspan;\n          headerSettings.origColspan = colspan;\n        }\n        if (typeof headerClassName === 'string') {\n          headerSettings.headerClassNames = [...headerClassName.split(' ')];\n        }\n      } else {\n        headerSettings.label = stringify(sourceHeaderSettings);\n      }\n      columnIndex += headerSettings.origColspan;\n      let cancelProcessing = false;\n      if (columnIndex >= columnsLimit) {\n        // Adjust the colspan value to not overlap the columns limit.\n        headerSettings.colspan = headerSettings.origColspan - (columnIndex - columnsLimit);\n        headerSettings.origColspan = headerSettings.colspan;\n        cancelProcessing = true;\n      }\n      columns.push(headerSettings);\n      if (headerSettings.colspan > 1) {\n        for (let i = 0; i < headerSettings.colspan - 1; i++) {\n          columns.push(createPlaceholderHeaderSettings());\n        }\n      }\n      return !cancelProcessing;\n    });\n  });\n  const columnsLength = Math.max(...arrayMap(normalizedSettings, headersSettings => headersSettings.length));\n\n  // Normalize the length of each header layer to the same columns length.\n  arrayEach(normalizedSettings, headersSettings => {\n    if (headersSettings.length < columnsLength) {\n      const defaultSettings = arrayMap(new Array(columnsLength - headersSettings.length), () => createDefaultHeaderSettings());\n      headersSettings.splice(headersSettings.length, 0, ...defaultSettings);\n    }\n  });\n  return normalizedSettings;\n}","map":{"version":3,"names":["arrayEach","arrayMap","isObject","stringify","createDefaultHeaderSettings","createPlaceholderHeaderSettings","normalizeSettings","sourceSettings","columnsLimit","arguments","length","undefined","Infinity","normalizedSettings","headersSettings","columns","columnIndex","push","sourceHeaderSettings","headerSettings","label","colspan","headerClassName","origColspan","headerClassNames","split","cancelProcessing","i","columnsLength","Math","max","defaultSettings","Array","splice"],"sources":["D:/gym-project/frontend/node_modules/handsontable/plugins/nestedHeaders/stateManager/settingsNormalizer.mjs"],"sourcesContent":["import \"core-js/modules/es.array.push.js\";\n/* eslint-disable jsdoc/require-description-complete-sentence */\nimport { arrayEach, arrayMap } from \"../../../helpers/array.mjs\";\nimport { isObject } from \"../../../helpers/object.mjs\";\nimport { stringify } from \"../../../helpers/mixed.mjs\";\nimport { createDefaultHeaderSettings, createPlaceholderHeaderSettings } from \"./utils.mjs\";\n/**\n * A function that normalizes user-defined settings into one predictable\n * structure. Currently, the developer can declare nested headers by passing\n * the following unstructured (and sometimes uncompleted) array.\n *   [\n *     [{ label: 'A1', colspan: 2 }],\n *     [{ label: true }, 'B2', 4],\n *     [],\n *   ]\n *\n * The normalization process equalizes the length of columns to each header\n * layers to the same length and generates object settings with a common shape.\n * So the above mentioned example will be normalized into this:\n *   [\n *     [\n *       { label: 'A1', colspan: 2, isHidden: false, ... },\n *       { label: '', colspan: 1, isHidden: true, ... },\n *       { label: '', colspan: 1, isHidden: false, ... },\n *     ],\n *     [\n *       { label: 'true', colspan: 1, isHidden: false, ... },\n *       { label: 'B2', colspan: 1, isHidden: false, ... },\n *       { label: '4', colspan: 1, isHidden: false, ... },\n *     ],\n *     [\n *       { label: '', colspan: 1, isHidden: false, ... },\n *       { label: '', colspan: 1, isHidden: false, ... },\n *       { label: '', colspan: 1, isHidden: false, ... },\n *     ],\n *   ]\n *\n * @param {Array[]} sourceSettings An array with defined nested headers settings.\n * @param {number} [columnsLimit=Infinity] A number of columns to which the structure\n *                                         will be trimmed. While trimming the colspan\n *                                         values are adjusted to preserve the original\n *                                         structure.\n * @returns {Array[]}\n */\nexport function normalizeSettings(sourceSettings) {\n  let columnsLimit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n  const normalizedSettings = [];\n  if (columnsLimit === 0) {\n    return normalizedSettings;\n  }\n\n  // Normalize array items (header settings) into one shape - literal object with default props.\n  arrayEach(sourceSettings, headersSettings => {\n    const columns = [];\n    let columnIndex = 0;\n    normalizedSettings.push(columns);\n    arrayEach(headersSettings, sourceHeaderSettings => {\n      const headerSettings = createDefaultHeaderSettings();\n      if (isObject(sourceHeaderSettings)) {\n        const {\n          label,\n          colspan,\n          headerClassName\n        } = sourceHeaderSettings;\n        headerSettings.label = stringify(label);\n        if (typeof colspan === 'number' && colspan > 1) {\n          headerSettings.colspan = colspan;\n          headerSettings.origColspan = colspan;\n        }\n        if (typeof headerClassName === 'string') {\n          headerSettings.headerClassNames = [...headerClassName.split(' ')];\n        }\n      } else {\n        headerSettings.label = stringify(sourceHeaderSettings);\n      }\n      columnIndex += headerSettings.origColspan;\n      let cancelProcessing = false;\n      if (columnIndex >= columnsLimit) {\n        // Adjust the colspan value to not overlap the columns limit.\n        headerSettings.colspan = headerSettings.origColspan - (columnIndex - columnsLimit);\n        headerSettings.origColspan = headerSettings.colspan;\n        cancelProcessing = true;\n      }\n      columns.push(headerSettings);\n      if (headerSettings.colspan > 1) {\n        for (let i = 0; i < headerSettings.colspan - 1; i++) {\n          columns.push(createPlaceholderHeaderSettings());\n        }\n      }\n      return !cancelProcessing;\n    });\n  });\n  const columnsLength = Math.max(...arrayMap(normalizedSettings, headersSettings => headersSettings.length));\n\n  // Normalize the length of each header layer to the same columns length.\n  arrayEach(normalizedSettings, headersSettings => {\n    if (headersSettings.length < columnsLength) {\n      const defaultSettings = arrayMap(new Array(columnsLength - headersSettings.length), () => createDefaultHeaderSettings());\n      headersSettings.splice(headersSettings.length, 0, ...defaultSettings);\n    }\n  });\n  return normalizedSettings;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}