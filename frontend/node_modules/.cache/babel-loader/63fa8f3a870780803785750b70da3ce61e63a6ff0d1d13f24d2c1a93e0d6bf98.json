{"ast":null,"code":"import { createUniqueMap } from \"../utils/dataStructures/uniqueMap.mjs\";\nimport { normalizeKeys, getKeysList } from \"./utils.mjs\";\nimport { isUndefined, isDefined } from \"../helpers/mixed.mjs\";\nimport { isFunction } from \"../helpers/function.mjs\";\nimport { objectEach, isObject } from \"../helpers/object.mjs\";\nimport { toSingleLine } from \"../helpers/templateLiteralTag.mjs\";\nconst __kindOf = Symbol('shortcut-context');\n\n/**\n * Checks if the provided object is a context object.\n *\n * @param {*} objectToCheck An object to check.\n * @returns {boolean}\n */\nexport function isContextObject(objectToCheck) {\n  return isObject(objectToCheck) && objectToCheck.__kindOf === __kindOf;\n}\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * The `ShortcutContext` API lets you store and manage [keyboard shortcuts](@/guides/navigation/keyboard-shortcuts/keyboard-shortcuts.md) in a given [context](@/guides/navigation/keyboard-shortcuts/keyboard-shortcuts.md#keyboard-shortcut-contexts).\n *\n * Each `ShortcutContext` object stores and manages its own set of keyboard shortcuts.\n *\n * @alias ShortcutContext\n * @class ShortcutContext\n * @param {string} name The name of the keyboard shortcut context\n * @returns {object}\n */\nexport const createContext = name => {\n  const SHORTCUTS = createUniqueMap({\n    errorIdExists: keys => `The \"${keys}\" shortcut is already registered in the \"${name}\" context.`\n  });\n\n  /**\n   * Add a keyboard shortcut to this context.\n   *\n   * @memberof ShortcutContext#\n   * @param {object} options The shortcut's options\n   * @param {Array<Array<string>>} options.keys Names of the shortcut's keys,\n   * (coming from [`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)),\n   * in lowercase or uppercase, unified across browsers\n   * @param {Function} options.callback The shortcut's action\n   * @param {object} options.group A group of shortcuts to which the shortcut belongs\n   * @param {object} [options.runOnlyIf] A condition on which the shortcut's action runs\n   * @param {object} [options.stopPropagation=false] If set to `true`: stops the event's propagation\n   * @param {object} [options.captureCtrl=false] If set to `true`: captures the state of the Control/Meta modifier key\n   * @param {object} [options.preventDefault=true] If set to `true`: prevents the default behavior\n   * @param {object} [options.position='after'] The order in which the shortcut's action runs:\n   * `'before'` or `'after'` the `relativeToGroup` group of actions\n   * @param {object} [options.relativeToGroup] The name of a group of actions, used to determine an action's `position`\n   * @param {object} [options.forwardToContext] The context object where the event will be forwarded to.\n   */\n  const addShortcut = function () {\n    let {\n      keys,\n      callback,\n      group,\n      runOnlyIf = () => true,\n      captureCtrl = false,\n      preventDefault = true,\n      stopPropagation = false,\n      relativeToGroup,\n      position,\n      forwardToContext\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (isUndefined(group)) {\n      throw new Error('You need to define the shortcut\\'s group.');\n    }\n    if (isFunction(callback) === false) {\n      throw new Error('The shortcut\\'s callback needs to be a function.');\n    }\n    if (Array.isArray(keys) === false) {\n      throw new Error(toSingleLine`Pass the shortcut\\'s keys as an array of arrays,\\x20\n      using the KeyboardEvent.key properties:\\x20\n      https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values.`);\n    }\n    const newShortcut = {\n      callback,\n      group,\n      runOnlyIf,\n      captureCtrl,\n      preventDefault,\n      stopPropagation\n    };\n    if (isDefined(relativeToGroup)) {\n      newShortcut.relativeToGroup = relativeToGroup;\n      newShortcut.position = position;\n    }\n    if (isContextObject(forwardToContext)) {\n      newShortcut.forwardToContext = forwardToContext;\n    }\n    keys.forEach(keyCombination => {\n      const normalizedKeys = normalizeKeys(keyCombination);\n      const hasKeyCombination = SHORTCUTS.hasItem(normalizedKeys);\n      if (hasKeyCombination) {\n        const shortcuts = SHORTCUTS.getItem(normalizedKeys);\n        let insertionIndex = shortcuts.findIndex(shortcut => shortcut.group === relativeToGroup);\n        if (insertionIndex !== -1) {\n          if (position === 'before') {\n            insertionIndex -= 1;\n          } else {\n            insertionIndex += 1;\n          }\n        } else {\n          insertionIndex = shortcuts.length;\n        }\n        shortcuts.splice(insertionIndex, 0, newShortcut);\n      } else {\n        SHORTCUTS.addItem(normalizedKeys, [newShortcut]);\n      }\n    });\n  };\n\n  /**\n   * Add multiple keyboard shortcuts to this context.\n   *\n   * @memberof ShortcutContext#\n   * @param {Array<object>} shortcuts List of shortcuts to add to this shortcut context\n   * @param {object} [options] A shortcut's options\n   * @param {Function} [options.callback] A shortcut's action\n   * @param {object} [options.group] A group of shortcuts to which a shortcut belongs\n   * @param {object} [options.runOnlyIf] A condition on which a shortcut's action runs\n   * @param {object} [options.stopPropagation=false] If set to `true`: stops the event's propagation\n   * @param {object} [options.preventDefault=true] If set to `true`: prevents the default behavior\n   * @param {object} [options.position='after'] The order in which a shortcut's action runs:\n   * `'before'` or `'after'` a `relativeToGroup` group of actions\n   * @param {object} [options.relativeToGroup] The name of a group of actions, used to determine an action's `position`\n   * @param {object} [options.forwardToContext] The context object where the event will be forwarded to.\n   */\n  const addShortcuts = function (shortcuts) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    shortcuts.forEach(shortcut => {\n      objectEach(options, (value, key) => {\n        if (Object.prototype.hasOwnProperty.call(shortcut, key) === false) {\n          shortcut[key] = options[key];\n        }\n      });\n      addShortcut(shortcut);\n    });\n  };\n\n  /**\n   * Remove a shortcut from this context.\n   *\n   * @memberof ShortcutContext#\n   * @param {Array<string>} keys Names of the shortcut's keys,\n   * (coming from [`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)),\n   * in lowercase or uppercase, unified across browsers\n   */\n  const removeShortcutsByKeys = keys => {\n    const normalizedKeys = normalizeKeys(keys);\n    SHORTCUTS.removeItem(normalizedKeys);\n  };\n\n  /**\n   * Remove a group of shortcuts from this context.\n   *\n   * @memberof ShortcutContext#\n   * @param {string} group The name of the group of shortcuts\n   */\n  const removeShortcutsByGroup = group => {\n    const shortcuts = SHORTCUTS.getItems();\n    shortcuts.forEach(_ref => {\n      let [normalizedKeys, shortcutOptions] = _ref;\n      const leftOptions = shortcutOptions.filter(option => option.group !== group);\n      if (leftOptions.length === 0) {\n        removeShortcutsByKeys(getKeysList(normalizedKeys));\n      } else {\n        shortcutOptions.length = 0;\n        shortcutOptions.push(...leftOptions);\n      }\n    });\n  };\n\n  /**\n   * Get a shortcut's details.\n   *\n   * @memberof ShortcutContext#\n   * @param {Array<string>} keys Names of the shortcut's keys,\n   * (coming from [`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)),\n   * in lowercase or uppercase, unified across browsers\n   * @returns {Array}\n   */\n  const getShortcuts = keys => {\n    const normalizedKeys = normalizeKeys(keys);\n    const shortcuts = SHORTCUTS.getItem(normalizedKeys);\n    return isDefined(shortcuts) ? shortcuts.slice() : [];\n  };\n\n  /**\n   * Check if a shortcut exists in this context.\n   *\n   * @memberof ShortcutContext#\n   * @param {Array<string>} keys Names of the shortcut's keys,\n   * (coming from [`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)),\n   * in lowercase or uppercase, unified across browsers\n   * @returns {boolean}\n   */\n  const hasShortcut = keys => {\n    const normalizedKeys = normalizeKeys(keys);\n    return SHORTCUTS.hasItem(normalizedKeys);\n  };\n  return {\n    __kindOf,\n    addShortcut,\n    addShortcuts,\n    getShortcuts,\n    hasShortcut,\n    removeShortcutsByKeys,\n    removeShortcutsByGroup\n  };\n};","map":{"version":3,"names":["createUniqueMap","normalizeKeys","getKeysList","isUndefined","isDefined","isFunction","objectEach","isObject","toSingleLine","__kindOf","Symbol","isContextObject","objectToCheck","createContext","name","SHORTCUTS","errorIdExists","keys","addShortcut","callback","group","runOnlyIf","captureCtrl","preventDefault","stopPropagation","relativeToGroup","position","forwardToContext","arguments","length","undefined","Error","Array","isArray","newShortcut","forEach","keyCombination","normalizedKeys","hasKeyCombination","hasItem","shortcuts","getItem","insertionIndex","findIndex","shortcut","splice","addItem","addShortcuts","options","value","key","Object","prototype","hasOwnProperty","call","removeShortcutsByKeys","removeItem","removeShortcutsByGroup","getItems","_ref","shortcutOptions","leftOptions","filter","option","push","getShortcuts","slice","hasShortcut"],"sources":["D:/gym-project/frontend/node_modules/handsontable/shortcuts/context.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport { createUniqueMap } from \"../utils/dataStructures/uniqueMap.mjs\";\nimport { normalizeKeys, getKeysList } from \"./utils.mjs\";\nimport { isUndefined, isDefined } from \"../helpers/mixed.mjs\";\nimport { isFunction } from \"../helpers/function.mjs\";\nimport { objectEach, isObject } from \"../helpers/object.mjs\";\nimport { toSingleLine } from \"../helpers/templateLiteralTag.mjs\";\nconst __kindOf = Symbol('shortcut-context');\n\n/**\n * Checks if the provided object is a context object.\n *\n * @param {*} objectToCheck An object to check.\n * @returns {boolean}\n */\nexport function isContextObject(objectToCheck) {\n  return isObject(objectToCheck) && objectToCheck.__kindOf === __kindOf;\n}\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * The `ShortcutContext` API lets you store and manage [keyboard shortcuts](@/guides/navigation/keyboard-shortcuts/keyboard-shortcuts.md) in a given [context](@/guides/navigation/keyboard-shortcuts/keyboard-shortcuts.md#keyboard-shortcut-contexts).\n *\n * Each `ShortcutContext` object stores and manages its own set of keyboard shortcuts.\n *\n * @alias ShortcutContext\n * @class ShortcutContext\n * @param {string} name The name of the keyboard shortcut context\n * @returns {object}\n */\nexport const createContext = name => {\n  const SHORTCUTS = createUniqueMap({\n    errorIdExists: keys => `The \"${keys}\" shortcut is already registered in the \"${name}\" context.`\n  });\n\n  /**\n   * Add a keyboard shortcut to this context.\n   *\n   * @memberof ShortcutContext#\n   * @param {object} options The shortcut's options\n   * @param {Array<Array<string>>} options.keys Names of the shortcut's keys,\n   * (coming from [`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)),\n   * in lowercase or uppercase, unified across browsers\n   * @param {Function} options.callback The shortcut's action\n   * @param {object} options.group A group of shortcuts to which the shortcut belongs\n   * @param {object} [options.runOnlyIf] A condition on which the shortcut's action runs\n   * @param {object} [options.stopPropagation=false] If set to `true`: stops the event's propagation\n   * @param {object} [options.captureCtrl=false] If set to `true`: captures the state of the Control/Meta modifier key\n   * @param {object} [options.preventDefault=true] If set to `true`: prevents the default behavior\n   * @param {object} [options.position='after'] The order in which the shortcut's action runs:\n   * `'before'` or `'after'` the `relativeToGroup` group of actions\n   * @param {object} [options.relativeToGroup] The name of a group of actions, used to determine an action's `position`\n   * @param {object} [options.forwardToContext] The context object where the event will be forwarded to.\n   */\n  const addShortcut = function () {\n    let {\n      keys,\n      callback,\n      group,\n      runOnlyIf = () => true,\n      captureCtrl = false,\n      preventDefault = true,\n      stopPropagation = false,\n      relativeToGroup,\n      position,\n      forwardToContext\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (isUndefined(group)) {\n      throw new Error('You need to define the shortcut\\'s group.');\n    }\n    if (isFunction(callback) === false) {\n      throw new Error('The shortcut\\'s callback needs to be a function.');\n    }\n    if (Array.isArray(keys) === false) {\n      throw new Error(toSingleLine`Pass the shortcut\\'s keys as an array of arrays,\\x20\n      using the KeyboardEvent.key properties:\\x20\n      https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values.`);\n    }\n    const newShortcut = {\n      callback,\n      group,\n      runOnlyIf,\n      captureCtrl,\n      preventDefault,\n      stopPropagation\n    };\n    if (isDefined(relativeToGroup)) {\n      newShortcut.relativeToGroup = relativeToGroup;\n      newShortcut.position = position;\n    }\n    if (isContextObject(forwardToContext)) {\n      newShortcut.forwardToContext = forwardToContext;\n    }\n    keys.forEach(keyCombination => {\n      const normalizedKeys = normalizeKeys(keyCombination);\n      const hasKeyCombination = SHORTCUTS.hasItem(normalizedKeys);\n      if (hasKeyCombination) {\n        const shortcuts = SHORTCUTS.getItem(normalizedKeys);\n        let insertionIndex = shortcuts.findIndex(shortcut => shortcut.group === relativeToGroup);\n        if (insertionIndex !== -1) {\n          if (position === 'before') {\n            insertionIndex -= 1;\n          } else {\n            insertionIndex += 1;\n          }\n        } else {\n          insertionIndex = shortcuts.length;\n        }\n        shortcuts.splice(insertionIndex, 0, newShortcut);\n      } else {\n        SHORTCUTS.addItem(normalizedKeys, [newShortcut]);\n      }\n    });\n  };\n\n  /**\n   * Add multiple keyboard shortcuts to this context.\n   *\n   * @memberof ShortcutContext#\n   * @param {Array<object>} shortcuts List of shortcuts to add to this shortcut context\n   * @param {object} [options] A shortcut's options\n   * @param {Function} [options.callback] A shortcut's action\n   * @param {object} [options.group] A group of shortcuts to which a shortcut belongs\n   * @param {object} [options.runOnlyIf] A condition on which a shortcut's action runs\n   * @param {object} [options.stopPropagation=false] If set to `true`: stops the event's propagation\n   * @param {object} [options.preventDefault=true] If set to `true`: prevents the default behavior\n   * @param {object} [options.position='after'] The order in which a shortcut's action runs:\n   * `'before'` or `'after'` a `relativeToGroup` group of actions\n   * @param {object} [options.relativeToGroup] The name of a group of actions, used to determine an action's `position`\n   * @param {object} [options.forwardToContext] The context object where the event will be forwarded to.\n   */\n  const addShortcuts = function (shortcuts) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    shortcuts.forEach(shortcut => {\n      objectEach(options, (value, key) => {\n        if (Object.prototype.hasOwnProperty.call(shortcut, key) === false) {\n          shortcut[key] = options[key];\n        }\n      });\n      addShortcut(shortcut);\n    });\n  };\n\n  /**\n   * Remove a shortcut from this context.\n   *\n   * @memberof ShortcutContext#\n   * @param {Array<string>} keys Names of the shortcut's keys,\n   * (coming from [`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)),\n   * in lowercase or uppercase, unified across browsers\n   */\n  const removeShortcutsByKeys = keys => {\n    const normalizedKeys = normalizeKeys(keys);\n    SHORTCUTS.removeItem(normalizedKeys);\n  };\n\n  /**\n   * Remove a group of shortcuts from this context.\n   *\n   * @memberof ShortcutContext#\n   * @param {string} group The name of the group of shortcuts\n   */\n  const removeShortcutsByGroup = group => {\n    const shortcuts = SHORTCUTS.getItems();\n    shortcuts.forEach(_ref => {\n      let [normalizedKeys, shortcutOptions] = _ref;\n      const leftOptions = shortcutOptions.filter(option => option.group !== group);\n      if (leftOptions.length === 0) {\n        removeShortcutsByKeys(getKeysList(normalizedKeys));\n      } else {\n        shortcutOptions.length = 0;\n        shortcutOptions.push(...leftOptions);\n      }\n    });\n  };\n\n  /**\n   * Get a shortcut's details.\n   *\n   * @memberof ShortcutContext#\n   * @param {Array<string>} keys Names of the shortcut's keys,\n   * (coming from [`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)),\n   * in lowercase or uppercase, unified across browsers\n   * @returns {Array}\n   */\n  const getShortcuts = keys => {\n    const normalizedKeys = normalizeKeys(keys);\n    const shortcuts = SHORTCUTS.getItem(normalizedKeys);\n    return isDefined(shortcuts) ? shortcuts.slice() : [];\n  };\n\n  /**\n   * Check if a shortcut exists in this context.\n   *\n   * @memberof ShortcutContext#\n   * @param {Array<string>} keys Names of the shortcut's keys,\n   * (coming from [`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)),\n   * in lowercase or uppercase, unified across browsers\n   * @returns {boolean}\n   */\n  const hasShortcut = keys => {\n    const normalizedKeys = normalizeKeys(keys);\n    return SHORTCUTS.hasItem(normalizedKeys);\n  };\n  return {\n    __kindOf,\n    addShortcut,\n    addShortcuts,\n    getShortcuts,\n    hasShortcut,\n    removeShortcutsByKeys,\n    removeShortcutsByGroup\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}