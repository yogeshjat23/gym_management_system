{"ast":null,"code":"import { PLUGIN_KEY } from \"../formulas.mjs\";\nexport const DEFAULT_LICENSE_KEY = 'internal-use-in-handsontable';\nexport const DEFAULT_SETTINGS = {\n  licenseKey: DEFAULT_LICENSE_KEY,\n  useArrayArithmetic: true,\n  useColumnIndex: false,\n  useStats: false,\n  evaluateNullToZero: true,\n  precisionEpsilon: 1e-13,\n  precisionRounding: 14,\n  smartRounding: true,\n  leapYear1900: false,\n  nullDate: {\n    year: 1899,\n    month: 12,\n    day: 30\n  },\n  nullYear: 30,\n  dateFormats: ['DD/MM/YYYY', 'DD/MM/YY'],\n  timeFormats: ['hh:mm', 'hh:mm:ss.sss'],\n  matchWholeCell: true,\n  useRegularExpressions: false,\n  useWildcards: true,\n  functionArgSeparator: ',',\n  thousandSeparator: '',\n  decimalSeparator: '.',\n  language: 'enGB'\n};\n\n/**\n * Gets a set of engine settings to be applied on top of the provided settings, based on user's Handsontable settings.\n *\n * @param {object} hotSettings Handsontable settings object.\n * @returns {object} Object containing the overriding options.\n */\nexport function getEngineSettingsOverrides(hotSettings) {\n  var _hotSettings$PLUGIN_K;\n  return {\n    maxColumns: hotSettings.maxColumns,\n    maxRows: hotSettings.maxRows,\n    language: (_hotSettings$PLUGIN_K = hotSettings[PLUGIN_KEY]) === null || _hotSettings$PLUGIN_K === void 0 || (_hotSettings$PLUGIN_K = _hotSettings$PLUGIN_K.language) === null || _hotSettings$PLUGIN_K === void 0 ? void 0 : _hotSettings$PLUGIN_K.langCode\n  };\n}\n\n/**\n * Drop `hyperformula` key from object if it exists.\n *\n * @param {object} pluginSettings Formulas plugin settings.\n * @returns {object}\n */\nfunction cleanEngineSettings(pluginSettings) {\n  return Object.keys(pluginSettings).reduce((obj, key) => {\n    if (key !== 'hyperformula') {\n      obj[key] = pluginSettings[key];\n    }\n    return obj;\n  }, {});\n}\n\n/**\n * Takes the default, user and overriding settings and merges them into a single object to be passed to the engine.\n *\n * The final object gets its parameters in the following order,\n * with properties attached to objects listed in the lower levels of the list overriding the\n * ones above them:\n *\n * 1. Default settings\n * 2. User settings\n * 3. Overrides.\n *\n * Meant to be used during *initialization* of the engine.\n *\n * @param {object} hotSettings The Handsontable settings.\n * @returns {object} The final engine settings.\n */\nexport function getEngineSettingsWithDefaultsAndOverrides(hotSettings) {\n  var _pluginSettings$engin;\n  const pluginSettings = hotSettings[PLUGIN_KEY];\n  const userSettings = cleanEngineSettings(pluginSettings !== null && pluginSettings !== void 0 && (_pluginSettings$engin = pluginSettings.engine) !== null && _pluginSettings$engin !== void 0 && _pluginSettings$engin.hyperformula ? pluginSettings.engine : {});\n  const overrides = getEngineSettingsOverrides(hotSettings);\n  return {\n    ...DEFAULT_SETTINGS,\n    ...userSettings,\n    ...overrides\n  };\n}\n\n/**\n * Get engine settings from a Handsontable settings object with overrides.\n *\n * @param {object} hotSettings Handsontable settings object.\n * @returns {object}\n */\nexport function getEngineSettingsWithOverrides(hotSettings) {\n  var _pluginSettings$engin2;\n  const pluginSettings = hotSettings[PLUGIN_KEY];\n  const userSettings = cleanEngineSettings(pluginSettings !== null && pluginSettings !== void 0 && (_pluginSettings$engin2 = pluginSettings.engine) !== null && _pluginSettings$engin2 !== void 0 && _pluginSettings$engin2.hyperformula ? pluginSettings.engine : {});\n  const overrides = getEngineSettingsOverrides(hotSettings);\n  return {\n    ...userSettings,\n    ...overrides\n  };\n}\n\n/**\n * Check if the new settings are defined and are different from the ones currently used by the engine.\n *\n * @param {object} currentEngineSettings Currently used engine settings.\n * @param {object} newEngineSettings New engine settings.\n * @returns {boolean}\n */\nexport function haveEngineSettingsChanged(currentEngineSettings, newEngineSettings) {\n  return Object.keys(newEngineSettings).some(settingOption => {\n    return newEngineSettings[settingOption] !== undefined && newEngineSettings[settingOption] !== currentEngineSettings[settingOption];\n  });\n}","map":{"version":3,"names":["PLUGIN_KEY","DEFAULT_LICENSE_KEY","DEFAULT_SETTINGS","licenseKey","useArrayArithmetic","useColumnIndex","useStats","evaluateNullToZero","precisionEpsilon","precisionRounding","smartRounding","leapYear1900","nullDate","year","month","day","nullYear","dateFormats","timeFormats","matchWholeCell","useRegularExpressions","useWildcards","functionArgSeparator","thousandSeparator","decimalSeparator","language","getEngineSettingsOverrides","hotSettings","_hotSettings$PLUGIN_K","maxColumns","maxRows","langCode","cleanEngineSettings","pluginSettings","Object","keys","reduce","obj","key","getEngineSettingsWithDefaultsAndOverrides","_pluginSettings$engin","userSettings","engine","hyperformula","overrides","getEngineSettingsWithOverrides","_pluginSettings$engin2","haveEngineSettingsChanged","currentEngineSettings","newEngineSettings","some","settingOption","undefined"],"sources":["D:/gym-project/frontend/node_modules/handsontable/plugins/formulas/engine/settings.mjs"],"sourcesContent":["import { PLUGIN_KEY } from \"../formulas.mjs\";\nexport const DEFAULT_LICENSE_KEY = 'internal-use-in-handsontable';\nexport const DEFAULT_SETTINGS = {\n  licenseKey: DEFAULT_LICENSE_KEY,\n  useArrayArithmetic: true,\n  useColumnIndex: false,\n  useStats: false,\n  evaluateNullToZero: true,\n  precisionEpsilon: 1e-13,\n  precisionRounding: 14,\n  smartRounding: true,\n  leapYear1900: false,\n  nullDate: {\n    year: 1899,\n    month: 12,\n    day: 30\n  },\n  nullYear: 30,\n  dateFormats: ['DD/MM/YYYY', 'DD/MM/YY'],\n  timeFormats: ['hh:mm', 'hh:mm:ss.sss'],\n  matchWholeCell: true,\n  useRegularExpressions: false,\n  useWildcards: true,\n  functionArgSeparator: ',',\n  thousandSeparator: '',\n  decimalSeparator: '.',\n  language: 'enGB'\n};\n\n/**\n * Gets a set of engine settings to be applied on top of the provided settings, based on user's Handsontable settings.\n *\n * @param {object} hotSettings Handsontable settings object.\n * @returns {object} Object containing the overriding options.\n */\nexport function getEngineSettingsOverrides(hotSettings) {\n  var _hotSettings$PLUGIN_K;\n  return {\n    maxColumns: hotSettings.maxColumns,\n    maxRows: hotSettings.maxRows,\n    language: (_hotSettings$PLUGIN_K = hotSettings[PLUGIN_KEY]) === null || _hotSettings$PLUGIN_K === void 0 || (_hotSettings$PLUGIN_K = _hotSettings$PLUGIN_K.language) === null || _hotSettings$PLUGIN_K === void 0 ? void 0 : _hotSettings$PLUGIN_K.langCode\n  };\n}\n\n/**\n * Drop `hyperformula` key from object if it exists.\n *\n * @param {object} pluginSettings Formulas plugin settings.\n * @returns {object}\n */\nfunction cleanEngineSettings(pluginSettings) {\n  return Object.keys(pluginSettings).reduce((obj, key) => {\n    if (key !== 'hyperformula') {\n      obj[key] = pluginSettings[key];\n    }\n    return obj;\n  }, {});\n}\n\n/**\n * Takes the default, user and overriding settings and merges them into a single object to be passed to the engine.\n *\n * The final object gets its parameters in the following order,\n * with properties attached to objects listed in the lower levels of the list overriding the\n * ones above them:\n *\n * 1. Default settings\n * 2. User settings\n * 3. Overrides.\n *\n * Meant to be used during *initialization* of the engine.\n *\n * @param {object} hotSettings The Handsontable settings.\n * @returns {object} The final engine settings.\n */\nexport function getEngineSettingsWithDefaultsAndOverrides(hotSettings) {\n  var _pluginSettings$engin;\n  const pluginSettings = hotSettings[PLUGIN_KEY];\n  const userSettings = cleanEngineSettings(pluginSettings !== null && pluginSettings !== void 0 && (_pluginSettings$engin = pluginSettings.engine) !== null && _pluginSettings$engin !== void 0 && _pluginSettings$engin.hyperformula ? pluginSettings.engine : {});\n  const overrides = getEngineSettingsOverrides(hotSettings);\n  return {\n    ...DEFAULT_SETTINGS,\n    ...userSettings,\n    ...overrides\n  };\n}\n\n/**\n * Get engine settings from a Handsontable settings object with overrides.\n *\n * @param {object} hotSettings Handsontable settings object.\n * @returns {object}\n */\nexport function getEngineSettingsWithOverrides(hotSettings) {\n  var _pluginSettings$engin2;\n  const pluginSettings = hotSettings[PLUGIN_KEY];\n  const userSettings = cleanEngineSettings(pluginSettings !== null && pluginSettings !== void 0 && (_pluginSettings$engin2 = pluginSettings.engine) !== null && _pluginSettings$engin2 !== void 0 && _pluginSettings$engin2.hyperformula ? pluginSettings.engine : {});\n  const overrides = getEngineSettingsOverrides(hotSettings);\n  return {\n    ...userSettings,\n    ...overrides\n  };\n}\n\n/**\n * Check if the new settings are defined and are different from the ones currently used by the engine.\n *\n * @param {object} currentEngineSettings Currently used engine settings.\n * @param {object} newEngineSettings New engine settings.\n * @returns {boolean}\n */\nexport function haveEngineSettingsChanged(currentEngineSettings, newEngineSettings) {\n  return Object.keys(newEngineSettings).some(settingOption => {\n    return newEngineSettings[settingOption] !== undefined && newEngineSettings[settingOption] !== currentEngineSettings[settingOption];\n  });\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}