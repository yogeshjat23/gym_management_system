{"ast":null,"code":"import { defineGetter } from \"../../../../../helpers/object.mjs\";\nconst MIXIN_NAME = 'stickyRowsBottom';\n\n/**\n * Mixin for the subclasses of `Table` with implementations of\n * helper methods that are related to rows.\n * This mixin is meant to be applied in the subclasses of `Table`\n * that use sticky rendering of the bottom rows in the vertical axis.\n *\n * @type {object}\n */\nconst stickyRowsBottom = {\n  /**\n   * Get the source index of the first rendered row. If no rows are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstRenderedRow() {\n    const totalRows = this.wtSettings.getSetting('totalRows');\n    const fixedRowsBottom = this.wtSettings.getSetting('fixedRowsBottom');\n    const index = totalRows - fixedRowsBottom;\n    if (totalRows === 0 || fixedRowsBottom === 0) {\n      return -1;\n    }\n    if (index < 0) {\n      return 0;\n    }\n    return index;\n  },\n  /**\n   * Get the source index of the first row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstVisibleRow() {\n    return this.getFirstRenderedRow();\n  },\n  /**\n   * Get the source index of the first row partially visible in the viewport. If no rows are partially visible, returns an error code: -1.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstPartiallyVisibleRow() {\n    return this.getFirstRenderedRow();\n  },\n  /**\n   * Get the source index of the last rendered row. If no rows are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastRenderedRow() {\n    return this.wtSettings.getSetting('totalRows') - 1;\n  },\n  /**\n   * Get the source index of the last row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastVisibleRow() {\n    return this.getLastRenderedRow();\n  },\n  /**\n   * Get the source index of the last row partially visible in the viewport. If no rows are partially visible, returns an error code: -1.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastPartiallyVisibleRow() {\n    return this.getLastRenderedRow();\n  },\n  /**\n   * Get the number of rendered rows.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getRenderedRowsCount() {\n    const totalRows = this.wtSettings.getSetting('totalRows');\n    return Math.min(this.wtSettings.getSetting('fixedRowsBottom'), totalRows);\n  },\n  /**\n   * Get the number of fully visible rows in the viewport.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getVisibleRowsCount() {\n    return this.getRenderedRowsCount();\n  },\n  /**\n   * Get the number of rendered column headers.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getColumnHeadersCount() {\n    return 0;\n  }\n};\ndefineGetter(stickyRowsBottom, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nexport default stickyRowsBottom;","map":{"version":3,"names":["defineGetter","MIXIN_NAME","stickyRowsBottom","getFirstRenderedRow","totalRows","wtSettings","getSetting","fixedRowsBottom","index","getFirstVisibleRow","getFirstPartiallyVisibleRow","getLastRenderedRow","getLastVisibleRow","getLastPartiallyVisibleRow","getRenderedRowsCount","Math","min","getVisibleRowsCount","getColumnHeadersCount","writable","enumerable"],"sources":["D:/gym-project/frontend/node_modules/handsontable/3rdparty/walkontable/src/table/mixin/stickyRowsBottom.mjs"],"sourcesContent":["import { defineGetter } from \"../../../../../helpers/object.mjs\";\nconst MIXIN_NAME = 'stickyRowsBottom';\n\n/**\n * Mixin for the subclasses of `Table` with implementations of\n * helper methods that are related to rows.\n * This mixin is meant to be applied in the subclasses of `Table`\n * that use sticky rendering of the bottom rows in the vertical axis.\n *\n * @type {object}\n */\nconst stickyRowsBottom = {\n  /**\n   * Get the source index of the first rendered row. If no rows are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstRenderedRow() {\n    const totalRows = this.wtSettings.getSetting('totalRows');\n    const fixedRowsBottom = this.wtSettings.getSetting('fixedRowsBottom');\n    const index = totalRows - fixedRowsBottom;\n    if (totalRows === 0 || fixedRowsBottom === 0) {\n      return -1;\n    }\n    if (index < 0) {\n      return 0;\n    }\n    return index;\n  },\n  /**\n   * Get the source index of the first row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstVisibleRow() {\n    return this.getFirstRenderedRow();\n  },\n  /**\n   * Get the source index of the first row partially visible in the viewport. If no rows are partially visible, returns an error code: -1.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstPartiallyVisibleRow() {\n    return this.getFirstRenderedRow();\n  },\n  /**\n   * Get the source index of the last rendered row. If no rows are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastRenderedRow() {\n    return this.wtSettings.getSetting('totalRows') - 1;\n  },\n  /**\n   * Get the source index of the last row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastVisibleRow() {\n    return this.getLastRenderedRow();\n  },\n  /**\n   * Get the source index of the last row partially visible in the viewport. If no rows are partially visible, returns an error code: -1.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastPartiallyVisibleRow() {\n    return this.getLastRenderedRow();\n  },\n  /**\n   * Get the number of rendered rows.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getRenderedRowsCount() {\n    const totalRows = this.wtSettings.getSetting('totalRows');\n    return Math.min(this.wtSettings.getSetting('fixedRowsBottom'), totalRows);\n  },\n  /**\n   * Get the number of fully visible rows in the viewport.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getVisibleRowsCount() {\n    return this.getRenderedRowsCount();\n  },\n  /**\n   * Get the number of rendered column headers.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getColumnHeadersCount() {\n    return 0;\n  }\n};\ndefineGetter(stickyRowsBottom, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nexport default stickyRowsBottom;"],"mappings":"AAAA,SAASA,YAAY,QAAQ,mCAAmC;AAChE,MAAMC,UAAU,GAAG,kBAAkB;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG;EACvB;AACF;AACA;AACA;AACA;AACA;EACEC,mBAAmBA,CAAA,EAAG;IACpB,MAAMC,SAAS,GAAG,IAAI,CAACC,UAAU,CAACC,UAAU,CAAC,WAAW,CAAC;IACzD,MAAMC,eAAe,GAAG,IAAI,CAACF,UAAU,CAACC,UAAU,CAAC,iBAAiB,CAAC;IACrE,MAAME,KAAK,GAAGJ,SAAS,GAAGG,eAAe;IACzC,IAAIH,SAAS,KAAK,CAAC,IAAIG,eAAe,KAAK,CAAC,EAAE;MAC5C,OAAO,CAAC,CAAC;IACX;IACA,IAAIC,KAAK,GAAG,CAAC,EAAE;MACb,OAAO,CAAC;IACV;IACA,OAAOA,KAAK;EACd,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,kBAAkBA,CAAA,EAAG;IACnB,OAAO,IAAI,CAACN,mBAAmB,CAAC,CAAC;EACnC,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;EACEO,2BAA2BA,CAAA,EAAG;IAC5B,OAAO,IAAI,CAACP,mBAAmB,CAAC,CAAC;EACnC,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;EACEQ,kBAAkBA,CAAA,EAAG;IACnB,OAAO,IAAI,CAACN,UAAU,CAACC,UAAU,CAAC,WAAW,CAAC,GAAG,CAAC;EACpD,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;EACEM,iBAAiBA,CAAA,EAAG;IAClB,OAAO,IAAI,CAACD,kBAAkB,CAAC,CAAC;EAClC,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;EACEE,0BAA0BA,CAAA,EAAG;IAC3B,OAAO,IAAI,CAACF,kBAAkB,CAAC,CAAC;EAClC,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;EACEG,oBAAoBA,CAAA,EAAG;IACrB,MAAMV,SAAS,GAAG,IAAI,CAACC,UAAU,CAACC,UAAU,CAAC,WAAW,CAAC;IACzD,OAAOS,IAAI,CAACC,GAAG,CAAC,IAAI,CAACX,UAAU,CAACC,UAAU,CAAC,iBAAiB,CAAC,EAAEF,SAAS,CAAC;EAC3E,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;EACEa,mBAAmBA,CAAA,EAAG;IACpB,OAAO,IAAI,CAACH,oBAAoB,CAAC,CAAC;EACpC,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;EACEI,qBAAqBA,CAAA,EAAG;IACtB,OAAO,CAAC;EACV;AACF,CAAC;AACDlB,YAAY,CAACE,gBAAgB,EAAE,YAAY,EAAED,UAAU,EAAE;EACvDkB,QAAQ,EAAE,KAAK;EACfC,UAAU,EAAE;AACd,CAAC,CAAC;AACF,eAAelB,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}