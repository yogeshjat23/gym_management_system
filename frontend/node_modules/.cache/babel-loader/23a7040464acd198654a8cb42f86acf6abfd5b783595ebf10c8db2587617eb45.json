{"ast":null,"code":"import staticRegister from \"../../../utils/staticRegister.mjs\";\nimport { isUndefined } from \"../../../helpers/mixed.mjs\";\nimport { toSingleLine } from \"../../../helpers/templateLiteralTag.mjs\";\nimport { warn } from \"../../../helpers/console.mjs\";\nimport { isObjectEqual } from \"../../../helpers/object.mjs\";\nimport { PLUGIN_KEY } from \"../formulas.mjs\";\nimport { DEFAULT_LICENSE_KEY, DEFAULT_SETTINGS, getEngineSettingsWithDefaultsAndOverrides } from \"./settings.mjs\";\n/**\n * Prepares and returns the collection for the engine relationship with the HoT instances.\n *\n * @returns {Map}\n */\nfunction getEngineRelationshipRegistry() {\n  const registryKey = 'engine_relationship';\n  const pluginStaticRegistry = staticRegister(PLUGIN_KEY);\n  if (!pluginStaticRegistry.hasItem(registryKey)) {\n    pluginStaticRegistry.register(registryKey, new Map());\n  }\n  return pluginStaticRegistry.getItem(registryKey);\n}\n\n/**\n * Prepares and returns the collection for the engine shared usage.\n *\n * @returns {Map}\n */\nfunction getSharedEngineUsageRegistry() {\n  const registryKey = 'shared_engine_usage';\n  const pluginStaticRegistry = staticRegister(PLUGIN_KEY);\n  if (!pluginStaticRegistry.hasItem(registryKey)) {\n    pluginStaticRegistry.register(registryKey, new Map());\n  }\n  return pluginStaticRegistry.getItem(registryKey);\n}\n\n/**\n * Setups the engine instance. It either creates a new (possibly shared) engine instance, or attaches\n * the plugin to an already-existing instance.\n *\n * @param {Handsontable} hotInstance Handsontable instance.\n * @returns {null|object} Returns the engine instance if everything worked right and `null` otherwise.\n */\nexport function setupEngine(hotInstance) {\n  const hotSettings = hotInstance.getSettings();\n  const pluginSettings = hotSettings[PLUGIN_KEY];\n  const engineConfigItem = pluginSettings === null || pluginSettings === void 0 ? void 0 : pluginSettings.engine;\n  if (pluginSettings === true) {\n    return null;\n  }\n  if (isUndefined(engineConfigItem)) {\n    return null;\n  }\n\n  // `engine.hyperformula` or `engine` is the engine class\n  if (typeof engineConfigItem.hyperformula === 'function' || typeof engineConfigItem === 'function') {\n    var _engineConfigItem$hyp;\n    return registerEngine((_engineConfigItem$hyp = engineConfigItem.hyperformula) !== null && _engineConfigItem$hyp !== void 0 ? _engineConfigItem$hyp : engineConfigItem, hotSettings, hotInstance);\n\n    // `engine` is the engine instance\n  } else if (typeof engineConfigItem === 'object' && isUndefined(engineConfigItem.hyperformula)) {\n    const engineRelationship = getEngineRelationshipRegistry();\n    const sharedEngineUsage = getSharedEngineUsageRegistry().get(engineConfigItem);\n    if (!engineRelationship.has(engineConfigItem)) {\n      engineRelationship.set(engineConfigItem, []);\n    }\n    engineRelationship.get(engineConfigItem).push(hotInstance);\n    if (sharedEngineUsage) {\n      sharedEngineUsage.push(hotInstance.guid);\n    }\n    if (!engineConfigItem.getConfig().licenseKey) {\n      engineConfigItem.updateConfig({\n        licenseKey: DEFAULT_LICENSE_KEY\n      });\n    }\n    if (engineConfigItem.getConfig().leapYear1900 !== DEFAULT_SETTINGS.leapYear1900 || isObjectEqual(engineConfigItem.getConfig().nullDate, DEFAULT_SETTINGS.nullDate) === false) {\n      warn(toSingleLine`If you use HyperFormula with Handsontable, keep the default \\`leapYear1900\\` and \\`nullDate\\` \n      settings. Otherwise, HyperFormula's dates may not sync correctly with Handsontable's dates.`);\n    }\n    return engineConfigItem;\n  }\n  return null;\n}\n\n/**\n * Registers the engine in the global register and attaches the needed event listeners.\n *\n * @param {Function} engineClass The engine class.\n * @param {object} hotSettings The Handsontable settings.\n * @param {Handsontable} hotInstance Handsontable instance.\n * @returns {object} Returns the engine instance.\n */\nexport function registerEngine(engineClass, hotSettings, hotInstance) {\n  const pluginSettings = hotSettings[PLUGIN_KEY];\n  const engineSettings = getEngineSettingsWithDefaultsAndOverrides(hotSettings);\n  const engineRegistry = getEngineRelationshipRegistry();\n  const sharedEngineRegistry = getSharedEngineUsageRegistry();\n  registerCustomFunctions(engineClass, pluginSettings.functions);\n  registerLanguage(engineClass, pluginSettings.language);\n\n  // Create instance\n  const engineInstance = engineClass.buildEmpty(engineSettings);\n\n  // Add it to global registry\n  engineRegistry.set(engineInstance, [hotInstance]);\n  sharedEngineRegistry.set(engineInstance, [hotInstance.guid]);\n  registerNamedExpressions(engineInstance, pluginSettings.namedExpressions);\n\n  // Add hooks needed for cross-referencing sheets\n  engineInstance.on('sheetAdded', () => {\n    engineInstance.rebuildAndRecalculate();\n  });\n  engineInstance.on('sheetRemoved', () => {\n    engineInstance.rebuildAndRecalculate();\n  });\n  return engineInstance;\n}\n\n/**\n * Returns the list of the Handsontable instances linked to the specific engine instance.\n *\n * @param {object} engine The engine instance.\n * @returns {Map<number, Handsontable>} Returns Map with Handsontable instances.\n */\nexport function getRegisteredHotInstances(engine) {\n  var _engineRegistry$get;\n  const engineRegistry = getEngineRelationshipRegistry();\n  const hotInstances = engineRegistry.size === 0 ? [] : Array.from((_engineRegistry$get = engineRegistry.get(engine)) !== null && _engineRegistry$get !== void 0 ? _engineRegistry$get : []);\n  return new Map(hotInstances.map(hot => [hot.getPlugin('formulas').sheetId, hot]));\n}\n\n/**\n * Removes the HOT instance from the global register's engine usage array, and if there are no HOT instances left,\n * unregisters the engine itself.\n *\n * @param {object} engine The engine instance.\n * @param {string} hotInstance The Handsontable instance.\n */\nexport function unregisterEngine(engine, hotInstance) {\n  if (engine) {\n    const engineRegistry = getEngineRelationshipRegistry();\n    const engineHotRelationship = engineRegistry.get(engine);\n    const sharedEngineRegistry = getSharedEngineUsageRegistry();\n    const sharedEngineUsage = sharedEngineRegistry.get(engine);\n    if (engineHotRelationship && engineHotRelationship.includes(hotInstance)) {\n      engineHotRelationship.splice(engineHotRelationship.indexOf(hotInstance), 1);\n      if (engineHotRelationship.length === 0) {\n        engineRegistry.delete(engine);\n      }\n    }\n    if (sharedEngineUsage && sharedEngineUsage.includes(hotInstance.guid)) {\n      sharedEngineUsage.splice(sharedEngineUsage.indexOf(hotInstance.guid), 1);\n      if (sharedEngineUsage.length === 0) {\n        sharedEngineRegistry.delete(engine);\n        engine.destroy();\n      }\n    }\n  }\n}\n\n/**\n * Registers the custom functions for the engine.\n *\n * @param {Function} engineClass The engine class.\n * @param {Array} customFunctions The custom functions array.\n */\nexport function registerCustomFunctions(engineClass, customFunctions) {\n  if (customFunctions) {\n    customFunctions.forEach(func => {\n      const {\n        name,\n        plugin,\n        translations\n      } = func;\n      try {\n        engineClass.registerFunction(name, plugin, translations);\n      } catch (e) {\n        warn(e.message);\n      }\n    });\n  }\n}\n\n/**\n * Registers the provided language for the engine.\n *\n * @param {Function} engineClass The engine class.\n * @param {object} languageSetting The engine's language object.\n */\nexport function registerLanguage(engineClass, languageSetting) {\n  if (languageSetting) {\n    const {\n      langCode\n    } = languageSetting;\n    try {\n      engineClass.registerLanguage(langCode, languageSetting);\n    } catch (e) {\n      warn(e.message);\n    }\n  }\n}\n\n/**\n * Registers the provided named expressions in the engine instance.\n *\n * @param {object} engineInstance The engine instance.\n * @param {Array} namedExpressions Array of the named expressions to be registered.\n */\nexport function registerNamedExpressions(engineInstance, namedExpressions) {\n  if (namedExpressions) {\n    engineInstance.suspendEvaluation();\n    namedExpressions.forEach(namedExp => {\n      const {\n        name,\n        expression,\n        scope,\n        options\n      } = namedExp;\n      try {\n        engineInstance.addNamedExpression(name, expression, scope, options);\n      } catch (e) {\n        warn(e.message);\n      }\n    });\n    engineInstance.resumeEvaluation();\n  }\n}\n\n/**\n * Sets up a new sheet.\n *\n * @param {object} engineInstance The engine instance.\n * @param {string} sheetName The new sheet name.\n * @returns {*}\n */\nexport function setupSheet(engineInstance, sheetName) {\n  if (isUndefined(sheetName) || !engineInstance.doesSheetExist(sheetName)) {\n    sheetName = engineInstance.addSheet(sheetName);\n  }\n  return sheetName;\n}","map":{"version":3,"names":["staticRegister","isUndefined","toSingleLine","warn","isObjectEqual","PLUGIN_KEY","DEFAULT_LICENSE_KEY","DEFAULT_SETTINGS","getEngineSettingsWithDefaultsAndOverrides","getEngineRelationshipRegistry","registryKey","pluginStaticRegistry","hasItem","register","Map","getItem","getSharedEngineUsageRegistry","setupEngine","hotInstance","hotSettings","getSettings","pluginSettings","engineConfigItem","engine","hyperformula","_engineConfigItem$hyp","registerEngine","engineRelationship","sharedEngineUsage","get","has","set","push","guid","getConfig","licenseKey","updateConfig","leapYear1900","nullDate","engineClass","engineSettings","engineRegistry","sharedEngineRegistry","registerCustomFunctions","functions","registerLanguage","language","engineInstance","buildEmpty","registerNamedExpressions","namedExpressions","on","rebuildAndRecalculate","getRegisteredHotInstances","_engineRegistry$get","hotInstances","size","Array","from","map","hot","getPlugin","sheetId","unregisterEngine","engineHotRelationship","includes","splice","indexOf","length","delete","destroy","customFunctions","forEach","func","name","plugin","translations","registerFunction","e","message","languageSetting","langCode","suspendEvaluation","namedExp","expression","scope","options","addNamedExpression","resumeEvaluation","setupSheet","sheetName","doesSheetExist","addSheet"],"sources":["D:/gym-project/frontend/node_modules/handsontable/plugins/formulas/engine/register.mjs"],"sourcesContent":["import \"core-js/modules/es.array.push.js\";\nimport staticRegister from \"../../../utils/staticRegister.mjs\";\nimport { isUndefined } from \"../../../helpers/mixed.mjs\";\nimport { toSingleLine } from \"../../../helpers/templateLiteralTag.mjs\";\nimport { warn } from \"../../../helpers/console.mjs\";\nimport { isObjectEqual } from \"../../../helpers/object.mjs\";\nimport { PLUGIN_KEY } from \"../formulas.mjs\";\nimport { DEFAULT_LICENSE_KEY, DEFAULT_SETTINGS, getEngineSettingsWithDefaultsAndOverrides } from \"./settings.mjs\";\n/**\n * Prepares and returns the collection for the engine relationship with the HoT instances.\n *\n * @returns {Map}\n */\nfunction getEngineRelationshipRegistry() {\n  const registryKey = 'engine_relationship';\n  const pluginStaticRegistry = staticRegister(PLUGIN_KEY);\n  if (!pluginStaticRegistry.hasItem(registryKey)) {\n    pluginStaticRegistry.register(registryKey, new Map());\n  }\n  return pluginStaticRegistry.getItem(registryKey);\n}\n\n/**\n * Prepares and returns the collection for the engine shared usage.\n *\n * @returns {Map}\n */\nfunction getSharedEngineUsageRegistry() {\n  const registryKey = 'shared_engine_usage';\n  const pluginStaticRegistry = staticRegister(PLUGIN_KEY);\n  if (!pluginStaticRegistry.hasItem(registryKey)) {\n    pluginStaticRegistry.register(registryKey, new Map());\n  }\n  return pluginStaticRegistry.getItem(registryKey);\n}\n\n/**\n * Setups the engine instance. It either creates a new (possibly shared) engine instance, or attaches\n * the plugin to an already-existing instance.\n *\n * @param {Handsontable} hotInstance Handsontable instance.\n * @returns {null|object} Returns the engine instance if everything worked right and `null` otherwise.\n */\nexport function setupEngine(hotInstance) {\n  const hotSettings = hotInstance.getSettings();\n  const pluginSettings = hotSettings[PLUGIN_KEY];\n  const engineConfigItem = pluginSettings === null || pluginSettings === void 0 ? void 0 : pluginSettings.engine;\n  if (pluginSettings === true) {\n    return null;\n  }\n  if (isUndefined(engineConfigItem)) {\n    return null;\n  }\n\n  // `engine.hyperformula` or `engine` is the engine class\n  if (typeof engineConfigItem.hyperformula === 'function' || typeof engineConfigItem === 'function') {\n    var _engineConfigItem$hyp;\n    return registerEngine((_engineConfigItem$hyp = engineConfigItem.hyperformula) !== null && _engineConfigItem$hyp !== void 0 ? _engineConfigItem$hyp : engineConfigItem, hotSettings, hotInstance);\n\n    // `engine` is the engine instance\n  } else if (typeof engineConfigItem === 'object' && isUndefined(engineConfigItem.hyperformula)) {\n    const engineRelationship = getEngineRelationshipRegistry();\n    const sharedEngineUsage = getSharedEngineUsageRegistry().get(engineConfigItem);\n    if (!engineRelationship.has(engineConfigItem)) {\n      engineRelationship.set(engineConfigItem, []);\n    }\n    engineRelationship.get(engineConfigItem).push(hotInstance);\n    if (sharedEngineUsage) {\n      sharedEngineUsage.push(hotInstance.guid);\n    }\n    if (!engineConfigItem.getConfig().licenseKey) {\n      engineConfigItem.updateConfig({\n        licenseKey: DEFAULT_LICENSE_KEY\n      });\n    }\n    if (engineConfigItem.getConfig().leapYear1900 !== DEFAULT_SETTINGS.leapYear1900 || isObjectEqual(engineConfigItem.getConfig().nullDate, DEFAULT_SETTINGS.nullDate) === false) {\n      warn(toSingleLine`If you use HyperFormula with Handsontable, keep the default \\`leapYear1900\\` and \\`nullDate\\` \n      settings. Otherwise, HyperFormula's dates may not sync correctly with Handsontable's dates.`);\n    }\n    return engineConfigItem;\n  }\n  return null;\n}\n\n/**\n * Registers the engine in the global register and attaches the needed event listeners.\n *\n * @param {Function} engineClass The engine class.\n * @param {object} hotSettings The Handsontable settings.\n * @param {Handsontable} hotInstance Handsontable instance.\n * @returns {object} Returns the engine instance.\n */\nexport function registerEngine(engineClass, hotSettings, hotInstance) {\n  const pluginSettings = hotSettings[PLUGIN_KEY];\n  const engineSettings = getEngineSettingsWithDefaultsAndOverrides(hotSettings);\n  const engineRegistry = getEngineRelationshipRegistry();\n  const sharedEngineRegistry = getSharedEngineUsageRegistry();\n  registerCustomFunctions(engineClass, pluginSettings.functions);\n  registerLanguage(engineClass, pluginSettings.language);\n\n  // Create instance\n  const engineInstance = engineClass.buildEmpty(engineSettings);\n\n  // Add it to global registry\n  engineRegistry.set(engineInstance, [hotInstance]);\n  sharedEngineRegistry.set(engineInstance, [hotInstance.guid]);\n  registerNamedExpressions(engineInstance, pluginSettings.namedExpressions);\n\n  // Add hooks needed for cross-referencing sheets\n  engineInstance.on('sheetAdded', () => {\n    engineInstance.rebuildAndRecalculate();\n  });\n  engineInstance.on('sheetRemoved', () => {\n    engineInstance.rebuildAndRecalculate();\n  });\n  return engineInstance;\n}\n\n/**\n * Returns the list of the Handsontable instances linked to the specific engine instance.\n *\n * @param {object} engine The engine instance.\n * @returns {Map<number, Handsontable>} Returns Map with Handsontable instances.\n */\nexport function getRegisteredHotInstances(engine) {\n  var _engineRegistry$get;\n  const engineRegistry = getEngineRelationshipRegistry();\n  const hotInstances = engineRegistry.size === 0 ? [] : Array.from((_engineRegistry$get = engineRegistry.get(engine)) !== null && _engineRegistry$get !== void 0 ? _engineRegistry$get : []);\n  return new Map(hotInstances.map(hot => [hot.getPlugin('formulas').sheetId, hot]));\n}\n\n/**\n * Removes the HOT instance from the global register's engine usage array, and if there are no HOT instances left,\n * unregisters the engine itself.\n *\n * @param {object} engine The engine instance.\n * @param {string} hotInstance The Handsontable instance.\n */\nexport function unregisterEngine(engine, hotInstance) {\n  if (engine) {\n    const engineRegistry = getEngineRelationshipRegistry();\n    const engineHotRelationship = engineRegistry.get(engine);\n    const sharedEngineRegistry = getSharedEngineUsageRegistry();\n    const sharedEngineUsage = sharedEngineRegistry.get(engine);\n    if (engineHotRelationship && engineHotRelationship.includes(hotInstance)) {\n      engineHotRelationship.splice(engineHotRelationship.indexOf(hotInstance), 1);\n      if (engineHotRelationship.length === 0) {\n        engineRegistry.delete(engine);\n      }\n    }\n    if (sharedEngineUsage && sharedEngineUsage.includes(hotInstance.guid)) {\n      sharedEngineUsage.splice(sharedEngineUsage.indexOf(hotInstance.guid), 1);\n      if (sharedEngineUsage.length === 0) {\n        sharedEngineRegistry.delete(engine);\n        engine.destroy();\n      }\n    }\n  }\n}\n\n/**\n * Registers the custom functions for the engine.\n *\n * @param {Function} engineClass The engine class.\n * @param {Array} customFunctions The custom functions array.\n */\nexport function registerCustomFunctions(engineClass, customFunctions) {\n  if (customFunctions) {\n    customFunctions.forEach(func => {\n      const {\n        name,\n        plugin,\n        translations\n      } = func;\n      try {\n        engineClass.registerFunction(name, plugin, translations);\n      } catch (e) {\n        warn(e.message);\n      }\n    });\n  }\n}\n\n/**\n * Registers the provided language for the engine.\n *\n * @param {Function} engineClass The engine class.\n * @param {object} languageSetting The engine's language object.\n */\nexport function registerLanguage(engineClass, languageSetting) {\n  if (languageSetting) {\n    const {\n      langCode\n    } = languageSetting;\n    try {\n      engineClass.registerLanguage(langCode, languageSetting);\n    } catch (e) {\n      warn(e.message);\n    }\n  }\n}\n\n/**\n * Registers the provided named expressions in the engine instance.\n *\n * @param {object} engineInstance The engine instance.\n * @param {Array} namedExpressions Array of the named expressions to be registered.\n */\nexport function registerNamedExpressions(engineInstance, namedExpressions) {\n  if (namedExpressions) {\n    engineInstance.suspendEvaluation();\n    namedExpressions.forEach(namedExp => {\n      const {\n        name,\n        expression,\n        scope,\n        options\n      } = namedExp;\n      try {\n        engineInstance.addNamedExpression(name, expression, scope, options);\n      } catch (e) {\n        warn(e.message);\n      }\n    });\n    engineInstance.resumeEvaluation();\n  }\n}\n\n/**\n * Sets up a new sheet.\n *\n * @param {object} engineInstance The engine instance.\n * @param {string} sheetName The new sheet name.\n * @returns {*}\n */\nexport function setupSheet(engineInstance, sheetName) {\n  if (isUndefined(sheetName) || !engineInstance.doesSheetExist(sheetName)) {\n    sheetName = engineInstance.addSheet(sheetName);\n  }\n  return sheetName;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}